{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#victor-andres-aguirre-fernandez","title":"Victor Andres Aguirre Fernandez","text":"<p>These are my notes here I write, collect, and sometimes copy information about:</p> <ul> <li>Concepts or Tools that I'm learning to improve on my Daily Job.</li> <li>A New Hobby.</li> <li>Something Interesting.</li> </ul> <p>I store all my notes in different categories with the idea is to have easy access to knowledge and as a quick personal reference.</p> NOTE: I use different sources to learn or to consult.  I must clarify, not all the content is mine. I will change, summarize, or put my explanations for some topics. However,  I keep the original sentence or the graphic if I believe it provides information and doesn't worth it to change it.  <p>PS: These are personal notes, so if someone other than me reads them bear in mind it is a work in progress, I will update, fix errors or re-write it.</p>"},{"location":"about.html","title":"About","text":"<p>I'm Victor. I have been working as an engineer in Asia for the last seven years.  I work in three different fields, Entertainment with a multinational, E-commerce in a startup, and finally, as a Field Application Engineer in a CCTV and AI system manufacturer.</p> <p>I worked with an in-office team as well as international distributed and remote teams on roles that include:</p> <ul> <li>Field Application Engineer.</li> <li>Product development manager.</li> <li>Automation test developer.</li> <li>Project manager in Web and mobile development.</li> </ul> <p>I constantly study new technologies and innovative concepts to their rapid and efficient implementation. I developed with experience the ability to perform effectively in teams and as an individual.</p>"},{"location":"APIs/intro.html","title":"Notes regarding APIs","text":"<p>Here I will compile and save the notes about different APIs that we use in a project or that for some reason I need it to understand. I will try to create examples and notes about how to use the API.</p> <p>Here a list of APIs already made notes about:</p> <ul> <li>NewsAPI: Get news from more than 800,000 sources.</li> <li>Datamuse: From the official website \"series of resources designed to help people create and communicate more effectively.\"</li> <li>GOOGLE Sheets: It is the API to interact with Google sheets.</li> </ul>"},{"location":"APIs/Google/introduction.html","title":"Google API","text":""},{"location":"APIs/Google/introduction.html#google-workspace-developer","title":"Google workspace developer","text":"<p>To be able to use the API we will need to have the API token or key for that we need, in big terms, to follow:</p> <ol> <li>Create a new project and enable the API.</li> <li>Define the type of authentication.</li> <li>Identify the scope</li> <li>Create the credentials, if need it to provide access to User to the specific resources.</li> </ol>"},{"location":"APIs/Google/introduction.html#initial-setup","title":"Initial setup","text":""},{"location":"APIs/Google/introduction.html#1google-cloud-platform","title":"1.Google Cloud platform","text":"<p>Navigate to console.cloud.google.com, if this is your first time you will find something like this</p> <p>In order to use the Google API we need to have an account in Google, of course, but also we need to set up the google cloud platform.</p> <p>This is just the standard \" term of services\" \"let me spam you with products\" page.</p> <p>Not much we can do, just agree with the term of services, and is up to you if you want to get the email updates.</p> <p></p> <p>Now we are presented with the home page or dashboard for the google cloud</p> <p></p>"},{"location":"APIs/Google/introduction.html#2-set-up-projects","title":"2. Set up Projects","text":"<p>The projects will represent our application, at least that is how I understand it, so in order to create the access token or the API keys we will need to have a project, we have a limited amount of projects before we need to request an upgrade or to delete previous once, however, the number of projects slots we get initially is pretty generous</p> <p></p>"},{"location":"APIs/Google/introduction.html#new-project","title":"New project","text":"<p>First, we start by giving a name to the project and adding the organisation.</p> <p></p> <p>once the project is created the dashboard will change and will start to display information about the specific project, we can change the project in the top bar next to the \"google cloud platform\" title.</p> <p></p> <p>Now the dashboard has a lot of information regarding the project, here you can monitor the API consumption in the user or member of your organization interacting with the project.</p> <p>We already have the project so now we need to get the API, in this case, the example will be related to the Sheets API, but the process is similar for most of the APIs, however, my configuration of Authorization and authentication might not be the best practices, google provide an extensive explanation about this topic, and I'm working on it, but for this notes, I will take a simple approach.</p>"},{"location":"APIs/Google/introduction.html#api-services","title":"API &amp; Services","text":"<p>We need to add the library that we need, in this case, we need to navigate to API &amp; Services &gt;  Library.</p> <p></p> <p>once on the new page we need to select the API we want to use, in this case, as mentioned before, I will go for the Google sheet API.</p> <p></p> <p>Once selected we will see a new page with some description and information. we can either try the API here and confirm this wants we need or go ahead and enable it.</p> <p>Once enabled we have a second dashboard, this case is just for this API, here we can proceed and create the credentials and the services that we need in order to make use of this API</p> <p></p>"},{"location":"APIs/Google/introduction.html#credentials","title":"Credentials","text":"<p>Once we start the process of credential creation we will see different files to set up, here is where you can spend some time making a proper configuration about the scope and who can access, in this case, I will go the easy way and make it simple, creating access just to myself.</p> <p></p> <p>Once we get the credentials we go for the services, here is where we are going to define the limits, in this case, I want to have access to the creation, delete and modification of google sheet, thus the scope selected, you will notice an email-like string, that is the service account.</p> <p></p>"},{"location":"APIs/Google/introduction.html#oauth-20-client-id","title":"OAuth 2.0 Client ID","text":"<p>In the examples given by the Google sheet API page, we have one section in the code that we request information from a file called <code>credential.json</code> this file is coming from the section OAuth 2.0 Client IDs</p> <p></p> <p>To get this file we need to create the client Id, we can do that in the top of the page \"+ Create credentials\"</p> <p></p> <p>It is possible that before creating the OAuth Id we will need to configure the Consent screen, this is the screen that will ask the user to grant permission o the application.</p> <p>In the configuration of consent, we will be presented with two options internal and external. My project right now is just a personal project so it won't affect me which option I will select so I will go by the external sense is the one I use before.</p> <p></p> <p>We will be asked to add some information, this information will be display to the user once they try to connect to our application, part of this configuration will include the scope I mentioned before, this scopes will define how much access the application has to the customer data and what the user can do with the API.</p> <p></p> <p>Now the scopes</p> <p></p> <p>I will select the scope Google Sheet API</p> <p></p> <p>so I can create, delete and edit the google sheets.</p> <p>The next steps in this OAuth consent screen configuration will be the test user, which I won't configure since I'm the only one using it.</p> <p>Finally, with this configuration, we can proceed and finish the generation of the OAuth 2,0 Client ID</p> <p></p> <p>Now we need to select what type of application will interact with the API in this case I will select desktop since the project I planning to work with will be develop in python</p> <p></p> <p>We will get a Modal view with the information about the client, this information will be in the json file as well</p> <p></p> <p>To download the .json file ( the one we will rename <code>credentials.json</code>) we can do it in the dashboard</p> <p></p>"},{"location":"APIs/Google/introduction.html#apis","title":"APIs","text":""},{"location":"APIs/Google/introduction.html#google-sheet-api","title":"Google Sheet API","text":"<p>Google Sheets API</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html","title":"Google Sheets API","text":"<p>The task we can perform with the RESTful API will be:</p> <ul> <li>Create spreadsheets</li> <li>Read and write spreadsheets cell values</li> <li>update spreadsheets formatting</li> <li>Manage connected sheets</li> </ul>"},{"location":"APIs/Google/sheets/google_sheet_api.html#common-terms","title":"Common terms","text":"<p>Some terms used in the API</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#spreadsheet","title":"Spreadsheet","text":"<p>It is the primary object, and it contains multiple sheets. It has a unique ID <code>spreeadsheetId</code> made with letters, numbers, hyphens, and underscores. You can find it in the google sheet URL.</p> <pre><code>https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=0\n</code></pre> <p>REST Resource: spreadsheets | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#sheet","title":"Sheet","text":"<p>A page or tab in the spreadsheet, sheets have a unique title and a numeric <code>sheetId</code> value which can be found in a google sheet URL.</p> <pre><code>https://docs.google.com/spreadsheets/d/aBC-123_xYz/edit#gid=sheetId\n</code></pre> <p>Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#cell","title":"Cell","text":"<p>An individual field of text or data within the sheets. Cells can be group vertically by rows and horizontally by columns.</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#a1-notation","title":"A1 notation","text":"<p>The method refers to one or a group of cells. It uses the sheet name, the column letter, and a numeric value that indicates the row. Bellow examples taken from the google sheet documentation:</p> <ul> <li><code>Sheet1!A1:B2</code> refers to the first two cells in the top two rows of Sheet1.</li> <li><code>Sheet1!A:A</code> refers to all the cells in the first column of Sheet1.</li> <li><code>Sheet1!1:2</code> refers to all the cells in the first two rows of Sheet1.</li> <li><code>Sheet1!A5:A</code> refers to all the cells of the first column of Sheet 1, from row 5 onward.</li> <li><code>A1:B2</code> refers to the first two cells in the top two rows of the first visible sheet.</li> <li><code>Sheet1</code> refers to all the cells in Sheet1.</li> </ul>"},{"location":"APIs/Google/sheets/google_sheet_api.html#r1c1-notation","title":"R1C1 notation","text":"<p>This method is less common than A1 notation, and it is used to refer to some cells or cells about a specific point. It uses the sheet name and the starting and ending coordinates of the cell using the row and column numbers.</p> <ul> <li><code>Sheet1!R1C1:R2C2</code> refers to the first two cells in the top two rows of Sheet1.</li> <li><code>R1C1:R2C2</code> refers to the first two cells in the top two rows of the first visible sheet.</li> <li><code>Sheet1!R[3]C[1]</code> refers to the cell that is three rows below and one column to the right of the current cell.</li> </ul> <p>Cells | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#python-quickstart","title":"Python Quickstart","text":"<p>There will be some prerequisites. They can be fine in the official documentation.</p> <p>Python Quickstart | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_api.html#1-install-the-google-client-library","title":"1. Install the google client library","text":"<pre><code>pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n</code></pre>"},{"location":"APIs/Google/sheets/google_sheet_api.html#2-configure-the-example","title":"2. Configure the example","text":"<p><pre><code>from __future__ import print_function\nimport os.path\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']\n\n# The ID and range of a sample spreadsheet.\nSAMPLE_SPREADSHEET_ID = '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'\nSAMPLE_RANGE_NAME = 'Class Data!A2:E'\n\ndef main():\n    \"\"\"Shows basic usage of the Sheets API.\n    Prints values from a sample spreadsheet.\n    \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    service = build('sheets', 'v4', credentials=creds)\n\n    # Call the Sheets API\n    sheet = service.spreadsheets()\n    result = sheet.values().get(spreadsheetId=SAMPLE_SPREADSHEET_ID,\n                                range=SAMPLE_RANGE_NAME).execute()\n    values = result.get('values', [])\n\n    if not values:\n        print('No data found.')\n    else:\n        print('Name, Major:')\n        for row in values:\n            # Print columns A and E, which correspond to indices 0 and 4.\n            print('%s, %s' % (row[0], row[4]))\n\nif __name__ == '__main__':\n    main()\n</code></pre> Now from the code above:</p> <ol> <li>The import of the packages, in this case, I'm importing from the google library. It will make easy the interaction with the google API.</li> <li><code>SCOPES</code> It is the limitation on the actions. For this case, it is limited to <code>readonly</code>.</li> <li><code>SAMPLE_SPREADSHEET_ID</code> and <code>SAMPLE_RANGE_NAME</code> these are the ID for the spreadsheet and the range where I'm going to work in.</li> <li>Inside the main function will be a section where I will consult the file <code>credentials.json</code> this is the file I download from the dashboard in the OAuth 2.0 client ID section.</li> </ol>"},{"location":"APIs/Google/sheets/google_sheet_create.html","title":"Create Spreadsheet","text":"<p>To create spreadsheets we need to have authentication and authorization, these can be achieved by the usage of the Class <code>Flow</code> and the object <code>Credentials</code> for more information we can refer to the documentation in Github.</p> <p>google-api-python-client/oauth.md at main \u00b7 googleapis/google-api-python-client</p> <p>in this case, I will copy and modify the code from the example in the quick start form google documentation</p> <pre><code>SCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n.\n.\ndef start():\n    \"\"\"Shows basic usage of the Sheets API.\n        Prints values from a sample spreadsheet.\n        \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    service = build('sheets', 'v4', credentials=creds)\n    return service\n</code></pre> <p>We get the use the code to get the credentials and the token need it to interact with the API and return the object service that we will use for the creation of the spreadsheet</p>"},{"location":"APIs/Google/sheets/google_sheet_create.html#create-method","title":"<code>create()</code> method","text":"<p>To create a new spreadsheet we will use the method <code>create()</code></p> <p>This code is a modification of the example code provided by google</p> <pre><code>def create_spreadsheet(service, title):\n    spreadsheet = {\n        'properties':{\n            'title': title\n        },\n        'sheets':[\n            {\n                'properties':{\n                    \"sheetId\": 1,\n                    \"title\": 'first sheet',\n                    \"index\": 0,\n                }\n            }\n        ]\n    }\n    spreadsheet = service.spreadsheets().create(body=spreadsheet, fields='spreadsheetId').execute()\n    print('Spreadsheet ID: {0}'.format(spreadsheet.get('spreadsheetId')))\n</code></pre> <p>From the above code:</p> <p>We have the object <code>spreadsheet</code> with some properties like the title and sheets, these are not the only properties and parameters we can modify for more information we need to check the spreadsheet resources and the sheet resources</p> <p>REST Resource: spreadsheets | Sheets API | Google Developers</p> <p>Sheets API | Google Developers</p> <p>Later we use the method <code>create()</code> with the object spreadsheet for the parameter body, finally the method <code>execute()</code> to execute the action.</p> <p>Finally, use <code>print()</code> to get the spreadsheet ID, we can use this ID on the browser to find the sheet.</p> <p></p> <p></p> <p>Note the ID in the URL as well as the Sheet ID, at the bottom we have the name of the sheet.</p>"},{"location":"APIs/Google/sheets/google_sheet_create.html#personal-changes","title":"Personal Changes","text":"<p>I made some personal changes in the code, adding some type of hint.</p> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_read.html","title":"Reading and Writing spreadsheet","text":"<p>A cell is located at interception between a row and a column and may contain a value. To interact with those cells, google sheets API provides the spreadsheet.values collection with it, those with the credentials can reading and writing.</p> <p>I will focus here on the \"basic\" usage of the spreadsheet.values collection and ignoring any formatting properties for the sheets.</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#methods","title":"Methods","text":"<p>The following methods are from the spreadsheet.values collection</p> Range Access Reading Writing Single Range spreadsheets.values.get spreadsheets.values.update Multiple Range spreadsheets.values.batchGet spreadsheet.values.batchUpdate Appending spreadsheet.values.append <p>Google Provide additional examples for Basic reading and Basic Writing in the sample pages</p> <p>Basic reading samples</p> <p>Basic Reading | Sheets API | Google Developers</p> <p>Basic Writing samples</p> <p>Basic Writing | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#reading","title":"Reading","text":"<p>What do I need to read the spreadsheet?</p> <ul> <li>The spreadsheet ID</li> <li>The range in A1 notation</li> </ul> <p>The output of this action will be control by 3 parameters:</p> <ul> <li><code>majorDimension</code> ( default value: <code>ROW</code>)</li> <li><code>valueRenderOption</code> (Default value: <code>FORMATTED_VALUE</code>)</li> <li><code>dateTimeRenderOption</code> (Default value: <code>SERIAL_NUMBER</code>)</li> </ul>"},{"location":"APIs/Google/sheets/google_sheet_read.html#valuerange","title":"<code>ValueRange</code>","text":"<p>Represent the data within the range of the spreadsheet, the data I'm reading.</p> <p>Its JSON representation is:</p> <pre><code>{\n  \"range\": string,\n  \"majorDimension\": enum(Dimension),\n  \"values\": [\n    array\n  ]\n}\n</code></pre> <p>Where:</p> <ul> <li><code>range</code> type <code>string</code>: the range of values in A1 notation. This range will be the one I will be reading.</li> <li><code>majorDimension</code> type <code>enum</code>: This is more difficult to understand, but in few words, depending on the value the output will follow a format, let say the value is <code>majorDimension=ROWS</code>the data is A1=1,B1=2,A2=3,B2=4, the <code>range=A1:B2</code> the return will be <code>[ [1,2] [3,4] ]</code> but if I modify <code>majorDimension=COLUMNS</code> the output will be <code>[ [1,3] [2,4] ]</code>.</li> <li><code>values</code> type <code>array</code>: the data to be read, this fallow a format of an array of arrays, the outer array represent the data, each inner array a <code>majordimension</code> and each item inside a cell value.</li> </ul> <p>more info:</p> <p>REST Resource: spreadsheets.values | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#valuerenderoption","title":"<code>valueRenderOption</code>","text":"<p>It will affect how the values are rendered in the output.  The possible values of this parameter are:</p> <ul> <li><code>FORMATTED_VALUE</code></li> <li><code>UNFORMATTED_VALUE</code></li> <li><code>FORMULA</code></li> </ul> <p>More info:</p> <p>ValueRenderOption | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#datetimerenderoption","title":"<code>dateTimeRenderOption</code>","text":"<p>It is used only if <code>valueRenderOption=FORMATTED_VALUE</code>.  It affects how dates are rendered in the output. the options are:</p> <ul> <li><code>SERIAL_NUMBER</code></li> <li><code>FORMATTED_STRING</code></li> </ul> <p>more info:</p> <p>DateTimeRenderOption | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#batchgetvalueresponse","title":"<code>BatchGetValueResponse</code>","text":"<p>It is the response when the method <code>batchGet()</code> is used. It is the method to read non-consecutive ranges or several ranges from a spreadsheet. As well as <code>valueRange</code> is has a JSON representation</p> <pre><code>{\n  \"spreadsheetId\": string,\n  \"valueRanges\": [\n    {\n      object (ValueRange)\n    }\n  ]\n}\n</code></pre> <p>Where:</p> <ul> <li><code>spreadsheetId</code>: It is the ID of the spreadsheet I am reading</li> <li><code>valueRanges</code>: is an object that contains <code>valueRange</code> in the same order as the request values.</li> </ul> <p>more info:</p> <p>Method: spreadsheets.values.batchGet | Sheets API | Google Developers</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#examples","title":"Examples","text":"<p>I have the spreadsheet</p> <p></p> <p>Where:</p> <ul> <li><code>spreadsheetId</code> is known and will look similar to <code>10q7CW3zqzb2B3hHluXPC4Q8J</code></li> <li>The sheet that contains the data is <code>first_sheet</code></li> <li>And the range I'm going to read in A1 notation will be <code>first_sheet!A1:C4</code></li> </ul>"},{"location":"APIs/Google/sheets/google_sheet_read.html#reading-single-range","title":"Reading single range","text":"<p>Assuming that I already have the resources and tokens (full implementation below), the reading function will look like this:</p> <pre><code>def read_single(gservice: gsheet_resource):\n    result = gservice.spreadsheets().values().get(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        range=SAMPLE_RANGE_NAME).execute()\n    rows = result.get('values')\n    print('{0} '.format(rows))\n</code></pre> <p>Be aware that <code>values</code> in the second statement are the item in the <code>ValueRange</code> JSON representation I mentioned earlier.</p> <p>I didn't provide any information about the <code>majorDimension</code> so the default value <code>ROW</code> is applied. the result is</p> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#reading-multiple-ranges","title":"Reading multiple ranges","text":"<p>Using the same spreadsheet, for this example, I will change the range to two non-consecutive ranges. I will need to make some changes to the function. I replace the <code>get()</code> method for <code>batchGet()</code>.</p> <p>The response will be a <code>BatchGetValueResponse</code> that is an object that contains a list of <code>ValueRange</code> and the <code>spreadsheet_ID</code></p> <pre><code>def read_multiple(gservice: gsheet_resource):\n    range_names = [\n        'first_sheet!A1:C1',\n        'first_sheet!A3:C4'\n    ]\n    result = gservice.spreadsheets().values().batchGet(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        ranges=range_names).execute()\n    rows = result.get('valueRanges')\n    print('{0} '.format(rows))\n</code></pre> <p>and the response will be:</p> <pre><code>[\n{'range': 'first_sheet!A1:C1', 'majorDimension': 'ROWS', 'values': [['name', 'tel', 'country']]},\n{'range': 'first_sheet!A3:C4', 'majorDimension': 'ROWS', 'values': [['Andres', '888-888-888', 'CH'], ['Tob', '222-222-222', 'UK']]}\n]\n</code></pre>"},{"location":"APIs/Google/sheets/google_sheet_read.html#writing","title":"Writing","text":"<p>Similar to \"reading\". I will need few elements to be able to read on the spreadsheet, these elements are:</p> <ul> <li><code>spreadsheetID</code>.</li> <li>The range in A1 notation.</li> <li>The data is arranged in the appropriate format in the body of the request.</li> </ul> <p>for the update, I will need to use the parameter <code>ValueInputOption</code> ( for a batch update this value is in the body of the request, for a single update, it will be part of the query parameters)</p> valueInputOption Description RAW It will place a string without any parse, if the input is =1+2 the value place in the cell will be that =1+2 USER_ENTERED The input will be parse following a similar pattern that googles sheet UI, example, =1+2 will be rendered as a result of the operation 3"},{"location":"APIs/Google/sheets/google_sheet_read.html#examples_1","title":"Examples","text":"<p>To write data as it was to read, I have two types, the single range writing and the writing for multiple ranges.</p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#writing-a-single-range","title":"Writing a single range","text":"<p>For this, I will follow the requested <code>[spreadsheet.values.update](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update)</code></p> <p>I started with a simple empty sheet</p> <p></p> <p>I'm going to write in the first and second row, and the code looks like</p> <pre><code>def write_single(gservice: gsheet_resource):\n    values = [\n        ['name','title','value'],\n        ['Dune','Dune the movie','$13000'],\n    ]\n    body = {\n        'values': values\n    }\n    result = gservice.spreadsheets().values().update(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        range=SAMPLE_RANGE_NAME,\n        valueInputOption='RAW',\n        body=body\n    ).execute()\n    print('{0} cells updated.'.format(result.get('updatedCells')))\n</code></pre> <p>from the code above:</p> <ol> <li>I create a list of values the outer array represents all ranges of the spreadsheet, the inner arrays are the rows since I didn't specify the <code>majorDimention</code>, and each item in the array is a value of the cell.</li> <li>I define the body of the request, in this case, it is a <code>valueRange</code> just the value item is mandatory if I specify the <code>range</code> it must match the one provided in the <code>update</code> function below. Here I can change the <code>majorDimension</code></li> <li>I have the <code>update</code> function, here I will pass the <code>spreadsheeId</code>, the <code>range</code>, the <code>valueInputOption</code> because it is a single range update, otherwise, it will be in the body. Finally, I will pass the <code>body</code> containing the values.</li> </ol> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#writing-a-multiple-ranges","title":"Writing a multiple ranges","text":"<p>In this case, the request use is spreadsheets.values.batchUpdate</p> <p>The request must be <code>BatchUpdateValuesRequest</code> object, this object will contain the <code>ValueInputOption</code> and a list of <code>ValueRange</code>, an example:</p> <pre><code>def write_range(gservice: gsheet_resource):\n    range_name = 'first_sheet!A1:C1'\n    range_name_1 = 'first_sheet!A3:C3'\n\n    values1 = [\n        ['name','title','value'],\n    ]\n    values2 = [\n        ['Animal farm','animal farm', '$14000']\n    ]\n\n    data = [\n        {\n            'range': range_name,\n            'values': values1\n        },\n        {\n            'range': range_name_1,\n            'values': values2\n        }\n    ]\n    body = {\n        'valueInputOption': 'RAW',\n        'data': data\n    }\n    result = gservice.spreadsheets().values().batchUpdate(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        body=body\n    ).execute()\n    print('{0} cells updated.'.format(result.get('totalUpdatedCells')))\n</code></pre> <p>From the code above:</p> <ol> <li>I define two ranges, ode that will be the first row <code>first_sheet!A1:C1</code> and the second will be the third row <code>first_sheet!A3:C3</code>.</li> <li>I define two variables that will handle the values, <code>values1</code>, and <code>values2</code></li> <li>I create the <code>data</code>, Be aware here I have two<code>valueRange</code>.</li> <li>I create the <code>body, the</code>valueInputOption` will be in the body in the request instead of the query parameter, like in the example with a single range.</li> <li>I use the function <code>batchUpdate</code> to execute the writing.</li> </ol> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#appending","title":"Appending","text":"<p>Like writing append will use a specific type of request in this case <code>spreadsheets.values.append</code>.</p> <p>For the most part, the append is similar to writing a single range with the difference in the function use, rather than use <code>update()</code> I use <code>append()</code>.</p> <pre><code>def append_range(gservice: gsheet_resource):\n    range = 'first_sheet!A3:C3'\n    values = [\n        [\n            'lorem','ipsum','$1200'\n        ],\n    ]\n    body = {\n        'values': values\n    }\n    result = service.spreadsheets().values().append(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID, range=range,\n        valueInputOption='RAW', body=body).execute()\n    print('{0} cells appended.'.format(result.get('updates').get('updatedCells')))\n</code></pre> <p>from the code above:</p> <ol> <li>Define the range where I will start to append ( be aware that if that is used already the new information will be written in the next row)</li> <li>Define the values, the outer array defines the data, inner array represents the rows (I haven't defined a <code>majorDimension</code> so the default is <code>ROW</code>).</li> <li>I create the <code>body</code>.</li> <li>I use the function <code>append()</code> that will include the query parameter <code>valueInputOption</code></li> </ol> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_read.html#full-scripts","title":"Full scripts","text":""},{"location":"APIs/Google/sheets/google_sheet_read.html#reading_1","title":"Reading","text":"<pre><code>from __future__ import print_function\nimport os.path\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\n\n# Creating an alias for google Resource class\ngsheet_resource = 'googleapiclient.discovery.Resource'\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n\n# The ID and range of a sample spreadsheet.\nSAMPLE_SPREADSHEET_ID = '10q7CW3zqzb2B3hHluXPC4Q8JLGludKXQHH3NX9Wi7aU'\nSAMPLE_RANGE_NAME = 'first_sheet!A1:C4'\n\ndef fetch_resource() -&gt; gsheet_resource:\n    \"\"\"Shows basic usage of the Sheets API.\n        Prints values from a sample spreadsheet.\n        \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    return build('sheets', 'v4', credentials=creds)\n\ndef read_single(gservice: gsheet_resource):\n    result = gservice.spreadsheets().values().get(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        range=SAMPLE_RANGE_NAME).execute()\n    rows = result.get('values')\n    print('{0} '.format(rows))\n\ndef read_multiple(gservice: gsheet_resource):\n    range_names = [\n        'first_sheet!A1:C1',\n        'first_sheet!A3:C4'\n    ]\n    result = gservice.spreadsheets().values().batchGet(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        ranges=range_names).execute()\n    rows = result.get('valueRanges')\n    print('{0} '.format(rows))\n\nif __name__ == '__main__':\n    service = fetch_resource()\n    read_single(service)\n    read_multiple(service)\n</code></pre>"},{"location":"APIs/Google/sheets/google_sheet_read.html#writing_1","title":"Writing","text":"<pre><code>from __future__ import print_function\nimport os.path\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\n\n# Creating an alias for google Resource class\ngsheet_resource = 'googleapiclient.discovery.Resource'\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n\n# The ID and range of a sample spreadsheet.\nSAMPLE_SPREADSHEET_ID = '1DjfIxE0ValkVRVyIOVE-8Sa9v7xSkqDvY9NCWGhImPg'\nSAMPLE_RANGE_NAME = 'first_sheet!A1:C4'\n\ndef fetch_resource() -&gt; gsheet_resource:\n    \"\"\"Shows basic usage of the Sheets API.\n        Prints values from a sample spreadsheet.\n        \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    return build('sheets', 'v4', credentials=creds)\n\ndef write_single(gservice: gsheet_resource):\n    values = [\n        ['name','title','value'],\n        ['Dune','Dune the movie','$13000'],\n    ]\n    body = {\n        'values': values\n    }\n    result = gservice.spreadsheets().values().update(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        range=SAMPLE_RANGE_NAME,\n        valueInputOption='RAW',\n        body=body\n    ).execute()\n    print('{0} cells updated.'.format(result.get('updatedCells')))\n\ndef write_range(gservice: gsheet_resource):\n    range_name = 'first_sheet!A1:C1'\n    range_name_1 = 'first_sheet!A3:C3'\n\n    values1 = [\n        ['name','title','value'],\n    ]\n    values2 = [\n        ['Animal farm','animal farm', '$14000']\n    ]\n\n    data = [\n        {\n            'range': range_name,\n            'values': values1\n        },\n        {\n            'range': range_name_1,\n            'values': values2\n        }\n    ]\n    body = {\n        'valueInputOption': 'RAW',\n        'data': data\n    }\n    result = gservice.spreadsheets().values().batchUpdate(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        body=body\n    ).execute()\n    print('{0} cells updated.'.format(result.get('totalUpdatedCells')))\n\ndef append_range(gservice: gsheet_resource):\n    range = 'first_sheet!A3:C3'\n    values = [\n        [\n            'lorem','ipsum','$1200'\n        ],\n    ]\n    body = {\n        'values': values\n    }\n    result = service.spreadsheets().values().append(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID, range=range,\n        valueInputOption='RAW', body=body).execute()\n    print('{0} cells appended.'.format(result.get('updates').get('updatedCells')))\n\nif __name__ == '__main__':\n    service = fetch_resource()\n    write_single(service)\n    write_range(service)\n    append_range(service)\n</code></pre>"},{"location":"APIs/Google/sheets/google_sheet_update.html","title":"Update Spreadsheet","text":"<p>I can use the <code>batchUpdate</code> method to alter or update some appearance and operation of the spreadsheets. I can change the following data:</p> <ul> <li>Cell format and borders</li> <li>named rage</li> <li>protected range</li> <li>conditional formatting</li> </ul> <p>These operations can be divided into three groups.</p> <ol> <li>Add (and duplicate): add new objects or  duplicate existing one</li> <li>Update ( or set): update some properties and leaving others as they were.</li> <li>Delete: Delete objects</li> </ol> <p>How it works is that <code>batchUpdate</code> will take one or more request objects, each one will modify, add or delete some parameter or value.  I will take the information from the official documentation</p> <p>Updating Spreadsheets | Sheets API | Google Developers</p> <p>This table will be a short version of the information in the above link:</p> Object ADD/DUPLICATE UPDATE/SET DELETE Spreadsheet properties UpdateSpreadsheetPropertiesRequest Sheets AddSheetRequest , DuplicateSheetRequest UpdateSheetPropertiesRequest DeleteSheetRequest Cells RepeatCellRequest, UpdateCellsRequest, AppendCellsRequest Borders UpdateBordersRequest <p>The official documentation also mentions request that mimics user actions, but the most relevant for me are:</p> <ul> <li>FindReplaceRequest</li> <li>SortRangeRequest</li> </ul>"},{"location":"APIs/Google/sheets/google_sheet_update.html#filed-mask","title":"Filed mask","text":"<p>These are comma-separated values that will ensure just the desire fields are changed. These \"field masks\" are required in some update requests. I can use '*' as a shorthand to update every field.</p> <p>an example of these files in a JSON representation is:</p> <pre><code>{\n  \"requests\": [{\n      \"updateSpreadsheetProperties\": {\n          \"properties\": {\"title\": \"My New Title\"},\n          \"fields\": \"title\"\n      }\n  }]\n}\n</code></pre> <p>Some update requests will have a response. These returns are delivered in array form, where each response will occupy the same index that corresponds to the request.</p>"},{"location":"APIs/Google/sheets/google_sheet_update.html#example","title":"Example","text":"<p>First, I will display the example from the documentation and later a customized example with few modifications.</p> <pre><code>requests = []\n# Change the spreadsheet's title.\nrequests.append({\n    'updateSpreadsheetProperties': {\n        'properties': {\n            'title': title\n        },\n        'fields': 'title'\n    }\n})\n# Find and replace text\nrequests.append({\n    'findReplace': {\n        'find': find,\n        'replacement': replacement,\n        'allSheets': True\n    }\n})\n# Add additional requests (operations) ...\n\nbody = {\n    'requests': requests\n}\nresponse = service.spreadsheets().batchUpdate(\n    spreadsheetId=spreadsheet_id,\n    body=body).execute()\nfind_replace_response = response.get('replies')[1].get('findReplace')\nprint('{0} replacements made.'.format(\n    find_replace_response.get('occurrencesChanged')))\n</code></pre> <p>from the documentation code above:</p> <ol> <li>Create an empty array called <code>requests</code>.</li> <li>Append the first update request <code>updateSpreadsheetProperties</code> which will change the name of the spreadsheet.</li> <li>Append the second request <code>findReplace</code> which finds a specific value and replaces it.</li> <li>I create the <code>body</code> with the requests</li> <li>Execute the <code>batchUpdate</code> request using the body I already create.</li> <li>Save and display the response from the <code>findReplace</code>request.</li> </ol> <p>For the example, I will start with the following spreadsheet</p> <p></p> <p>and I have the following method:</p> <pre><code>def update_spreadsheet(gservice: gsheet_resource):\n    requests = []\n    requests.append({\n        'updateSpreadsheetProperties':{\n            'properties': {\n                'title': 'New_title'\n            },\n            'fields': 'title'\n        }\n    })\n    requests.append({\n        'findReplace':{\n            'find': \"first\",\n            'replacement': \"second\",\n            'allSheets': True\n        }\n    })\n\n    body = {\n        'requests': requests\n    }\n\n    response = gservice.spreadsheets().batchUpdate(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        body=body\n    ).execute()\n    find_replace_response = response\n    print(f'{find_replace_response}')\n</code></pre> <p>The code about it is similar to the example from the documentation with some minor changes:</p> <ol> <li>I add the changes in the title of the spreadsheet and define the strings I want to find and replace</li> <li>I print the full response for this request</li> </ol> <p>The response of this request is:</p> <pre><code>{'spreadsheetId': '1DjfIxE0ValkVRVyIOVE-8Sa9v7xSkqDvY9NCWGhImGp', 'replies': [{}, {'findReplace': {'valuesChanged': 2, 'rowsChanged': 2, 'sheetsChanged': 1, 'occurrencesChanged': 2}}]}\n</code></pre> <p>I have the ID of the spreadsheet, and  the array that represents the response to the different requests</p> <pre><code>'replies': [{}, {'findReplace': {'valuesChanged': 2, 'rowsChanged': 2, 'sheetsChanged': 1, 'occurrencesChanged': 2}}]}\n</code></pre> <p>The first item in the array is empty because the first request was the change of the name. The second is the request to find and replace a string. The response looks like <code>{'findReplace': {'valuesChanged': 2, 'rowsChanged': 2, 'sheetsChanged': 1, 'occurrencesChanged': 2}}]}</code> we find 2 occurrences of the string <code>first</code> and replace it with the string <code>second</code> affecting two rows in one sheet.</p> <p>now the spreadsheet looks like this:</p> <p></p>"},{"location":"APIs/Google/sheets/google_sheet_update.html#the-script","title":"The script","text":"<pre><code>from __future__ import print_function\nimport os.path\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\n\n# Creating an alias for google Resource class\ngsheet_resource = 'googleapiclient.discovery.Resource'\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n\n# The ID and range of a sample spreadsheet.\nSAMPLE_SPREADSHEET_ID = '1DjfIxE0ValkVRVyIOVE-8Sa9v7xSkqDvY9NCWGhImGp'\nSAMPLE_RANGE_NAME = 'first_sheet!A1:C4'\n\ndef fetch_resource() -&gt; gsheet_resource:\n    \"\"\"Shows basic usage of the Sheets API.\n        Prints values from a sample spreadsheet.\n        \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    return build('sheets', 'v4', credentials=creds)\n\ndef update_spreadsheet(gservice: gsheet_resource):\n    requests = []\n    requests.append({\n        'updateSpreadsheetProperties':{\n            'properties': {\n                'title': 'New_title'\n            },\n            'fields': 'title'\n        }\n    })\n    requests.append({\n        'findReplace':{\n            'find': \"first\",\n            'replacement': \"second\",\n            'allSheets': True\n        }\n    })\n\n    body = {\n        'requests': requests\n    }\n\n    response = gservice.spreadsheets().batchUpdate(\n        spreadsheetId=SAMPLE_SPREADSHEET_ID,\n        body=body\n    ).execute()\n    find_replace_response = response\n    print(f'{find_replace_response}')\n\nif __name__ == '__main__':\n    service = fetch_resource()\n    update_spreadsheet(service)\n</code></pre>"},{"location":"APIs/News_API/news_api.html","title":"News API","text":"<p>News API - Search News and Blog Articles on the Web</p> <p>We can get News and articles from the web using this API.</p>"},{"location":"APIs/News_API/news_api.html#get-the-api-key","title":"Get the API Key","text":"<p>Obtaining the API key is one of the easiest tasks with this API. The only thing we need is an email.</p> <ol> <li>Go to the get started page.</li> </ol> <p></p> <ol> <li>Click Get API Key.</li> </ol> <p></p> <ol> <li>Fill the form, and you get the API Key. Be aware there is a limitation to the free API.</li> </ol> <p></p> <p>This API provides simple and complete documentation, within this documentation, we can find information about Client libraries in different languages. Although the Python client mattlisiv/newsapi-python is not an official client it can be useful, at the end of these notes some notes about <code>newsapi-python</code>.</p>"},{"location":"APIs/News_API/news_api.html#news-api-description","title":"News API Description.","text":"<p>We can say this API is subdivided into two main endpoints, with some specialization in one of these subdivisions, these subdivisions are the endpoints.</p> <p>The first endpoint <code>everything</code> gathers all information about a specific topic, and the second endpoint <code>top-headlines</code> is to get the top-headlines base of country and language with the option of select specific keywords, this endpoint is <code>top-headlines.</code></p> <ul> <li><code>/v2/everything</code>: The API claim there are more than 80,000 news and blogs.</li> <li><code>/v2/top-headlines</code>: This can be used to get the top headlines for a country or specific toping in a region.<ul> <li><code>/v2/top-headlines/source</code>: This is a specialized endpoint, it returns information (including name, description, and category) about the most notable sources available for obtaining top headlines from.</li> </ul> </li> </ul>"},{"location":"APIs/News_API/news_api.html#authentication","title":"Authentication","text":"<p>They are three different ways to authenticate with the API:</p> <ol> <li>As part of the query string, <code>apiKey=\"here API key\"</code></li> <li>via <code>X-Api-Key</code> HTTP header.</li> <li>Via the <code>Authorization</code> HTTP header. Including Bearer is optional.</li> </ol> <pre><code>#Via querystring\nGET https://newsapi.org/v2/everything?q=keyword&amp;apiKey=db0c830faab34094b9d9f3xxxxxxxx\n#Via X-Api-Key HTTP header\nX-Api-Key: db0c830faab34094b9d9f3d3xxxxxxxx\n#Via Authorization HTTP header\nAuthorization: db0c830faab34094b9d9f3d3xxxxxxxx\n</code></pre> <p>If the authentication is not done correctly the <code>401 - Unauthorized</code> HTTP error.</p>"},{"location":"APIs/News_API/news_api.html#endpoints","title":"Endpoints","text":""},{"location":"APIs/News_API/news_api.html#v2everything","title":"<code>/v2/everything</code>","text":"<p>Like mentioned before the API documentation claim 80,000 news and blogs, this Endpoint is a good option for general-purpose or discovery and analysis.</p> <p>For more information check the official documentation</p> <p>Everything - Documentation - News API</p>"},{"location":"APIs/News_API/news_api.html#request-parameters","title":"Request parameters","text":"<p>Some request parameters:</p> <ul> <li><code>apiKey</code> this is can be pass as part of the string query or as another form previously discussed.</li> <li><code>q</code> and <code>qInTitle</code> The first parameter is used to provide the phrases or keywords to search. The second <code>qInTitle</code> is the focus on keywords and phrases present just in the title of the new.</li> <li><code>sources</code> with this parameter we can limit the sources in the response.</li> <li><code>from</code> and <code>to</code> It is self-explanatory it will limit the time frame for the news.</li> </ul> <pre><code>GET https://newsapi.org/v2/everything?q=apple&amp;from=2021-10-02&amp;to=2021-10-02&amp;sortBy=popularity&amp;apiKey=db0c830faab34094b9d9xxxxxxxxxxxx\n</code></pre>"},{"location":"APIs/News_API/news_api.html#response-object","title":"Response Object","text":"<p>The response Object will be in JSON format, we can get more information in the documentation but here is a list of some of the most relevant parameters of this response.</p> <pre><code>{\n\"status\": \"ok\",\n\"totalResults\": 2177,\n\"articles\": [\n    {results_1},\n    {results_2},\n]\n</code></pre> <p>From the code above:</p> <ul> <li><code>status</code> is just an indicator if the response is successful.</li> <li><code>totalResult</code> the number of results.</li> <li><code>article</code> is an array of JSON objects that contain the news object response.</li> </ul> <p>Bellow the parameters within each <code>article</code> array.</p> Parameter Type Description source string This identifies the article, it contains two parameter <code>id</code> and display name <code>name</code>. author string The author of the article title string The headline or title of the article description string A short snippet of the news url string URL of the article urlToImage string The headline or title of the article publishedAt string date and time of published ( UTC+000) content string content of the article truncated to 200 characters."},{"location":"APIs/News_API/news_api.html#v2top-headlines","title":"<code>/v2/top-headlines</code>","text":"<p>This endpoint provides breaking news or headlines for a country, or top news from a specific category in a specific country, a single source, or multiple sources.</p> <p>The documentation recommends this endpoint to get news for stock tickers or financial-related topics.</p> <p>Top headlines - Documentation - News API</p>"},{"location":"APIs/News_API/news_api.html#request-parameters_1","title":"Request parameters","text":"<p>Some request parameters:</p> <ul> <li><code>apiKey</code> this is can be pass as part of the string query or as another form previously discussed.</li> <li><code>country</code> follow the 2-letter ISO 3166-1 code. example: <code>co</code> means Colombia.</li> <li><code>category</code> possible options: <code>business</code> <code>entertainment</code> <code>general</code> <code>health</code> <code>science</code> <code>sports</code> <code>technology</code>.</li> <li><code>source</code> here is a list of sources per country, the source for official documentation.</li> <li><code>q</code> like the previous endpoint this is a parameter for the keyword and phrase search.</li> </ul> <pre><code>GET https://newsapi.org/v2/top-headlines?country=us&amp;apiKey=db0c830faab34094b9d9xxxxxxxxxxxx\n</code></pre>"},{"location":"APIs/News_API/news_api.html#response-object_1","title":"Response Object","text":"<p>The response Object will be in JSON format. Follow the same structure of the <code>/v2/everything</code> response object.</p> <p>From the code above:</p> <ul> <li><code>status</code> is just an indicator if the response is successful.</li> <li><code>totalResult</code> the number of results.</li> <li><code>article</code> is an array of JSON objects that contain the news object response.</li> </ul> <p>Bellow the parameters within each <code>article</code> array.</p> Parameter Type Description source string This identifies the article, it contains two parameter <code>id</code> and display name <code>name</code> author string The author of the article title string The headline or title of the article description string A short snippet of the news url string URL of the article urlToImage string The headline or title of the article publishedAt string date and time of published ( UTC+000) content string content of the article truncated to 200 characters."},{"location":"APIs/News_API/news_api.html#v2top-headlinessources","title":"<code>/v2/top-headlines/sources</code>","text":"<p>This endpoint returns the subset of news publishers that top headlines (<code>/v2/top-headlines</code>) are available from. The official documentation recommends this endpoint to keep track of the publishers available on the API.</p> <p>Sources - Documentation - News API</p>"},{"location":"APIs/News_API/news_api.html#request-parameters_2","title":"Request Parameters","text":"<ul> <li><code>apiKey</code> this is can be pass as part of the string query or as another form previously discussed.</li> <li><code>category</code> possible options: <code>business</code> <code>entertainment</code> <code>general</code> <code>health</code> <code>science</code> <code>sports</code> <code>technology</code>.</li> <li><code>language</code> this will force answers in a specific language, the default is all language, the options: <code>ar</code> <code>de</code> <code>en</code> <code>es</code> <code>fr</code> <code>he</code> <code>it</code> <code>nl</code> <code>no</code> <code>pt</code> <code>ru</code> <code>se</code> <code>ud</code> <code>zh</code>.</li> <li><code>country</code> the default option in all countries, the options: <code>ae</code> <code>ar</code> <code>at</code> <code>au</code> <code>be</code> <code>bg</code> <code>br</code> <code>ca</code> <code>ch</code> <code>cn</code> <code>co</code> <code>cu</code> <code>cz</code> <code>de</code> <code>eg</code> <code>fr</code> <code>gb</code> <code>gr</code> <code>hk</code> <code>hu</code> <code>id</code> <code>ie</code> <code>il</code> <code>in</code> <code>it</code> <code>jp</code> <code>kr</code> <code>lt</code> <code>lv</code> <code>ma</code> <code>mx</code> <code>my</code> <code>ng</code> <code>nl</code> <code>no</code> <code>nz</code> <code>ph</code> <code>pl</code> <code>pt</code> <code>ro</code> <code>rs</code> <code>ru</code> <code>sa</code> <code>se</code> <code>sg</code> <code>si</code> <code>sk</code> <code>th</code> <code>tr</code> <code>tw</code> <code>ua</code> <code>us</code> <code>ve</code> <code>za</code>.</li> </ul>"},{"location":"APIs/News_API/news_api.html#response-object_2","title":"Response Object","text":"<p>From the code above:</p> <ul> <li><code>status</code> is just an indicator if the response is successful.</li> <li><code>source</code> It is an array that contains the answer for the request.</li> </ul> Parameter Type Description id string Identify the source . name string Name of the source. description string A short snippet of the news. url string URL of the article. category string The type of news in the response. language string The language in the source write in. country string The country this news source is based in."},{"location":"APIs/News_API/news_api.html#errors","title":"Errors","text":"<p>This is the response to a bad request.</p> <p>The response will have:</p> <ul> <li><code>status</code> this will have the string <code>error</code></li> <li><code>code</code> this is the HTTP code.</li> <li><code>message</code> this is a description of the error.</li> </ul> <pre><code>{\n\"status\": \"error\",\n\"code\": \"apiKeyMissing\",\n\"message\": \"Your API key is missing. Append this to the URL with the apiKey param, or use the x-api-key HTTP header.\"\n}\n</code></pre>"},{"location":"APIs/News_API/news_api.html#http-status","title":"HTTP status","text":"<ul> <li><code>200 - OK</code> success</li> <li><code>400 - Bad request</code> Unacceptable, most likely a missing parameter or an error in one.</li> <li><code>401 - Unauthorized</code> Your API key is not correct.</li> <li><code>429 - To Many Request</code> To many requests in a short window of time.</li> <li><code>500 - server error</code> something is wrong with the newsAPI.</li> </ul>"},{"location":"APIs/News_API/news_api.html#error-codes","title":"Error codes","text":"<p>These are just a few of the codes, for a full list check the documentation.</p> <p>Errors - Documentation - News API</p> <ul> <li><code>apiKeyDisabled</code>- The key is disabled.</li> <li><code>apiKeyExhausted</code>- We reach the limit of the plan.</li> <li><code>parameterInvalid</code>- The request has some invalid parameters.</li> <li><code>parametersMissing</code>- The request is missing some parameters.</li> </ul>"},{"location":"APIs/News_API/news_api.html#client-library","title":"Client Library","text":"<p>For python, the documentation recommends an official python client.</p> <p>This code is directly copied from the documentations since is the best summary.</p>"},{"location":"APIs/News_API/news_api.html#installing","title":"Installing","text":"<pre><code>pip install newsapi-python\n</code></pre>"},{"location":"APIs/News_API/news_api.html#code","title":"Code","text":"<pre><code>from newsapi import NewsApiClient\n\n# Init\nnewsapi = NewsApiClient(api_key='Here API key')\n\n# /v2/top-headlines\ntop_headlines = newsapi.get_top_headlines(q='bitcoin',\n                                          sources='bbc-news,the-verge',\n                                          language='en')\n\n# /v2/everything\nall_articles = newsapi.get_everything(q='bitcoin',\n                                      sources='bbc-news,the-verge',\n                                      domains='bbc.co.uk,techcrunch.com',\n                                      from_param='2021-09-04',\n                                      to='2021-09-12',\n                                      language='en',\n                                      sort_by='relevancy',\n                                      page=2)\n\n# /v2/top-headlines/sources\nsources = newsapi.get_sources()\n</code></pre> <p>From the code above few points</p> <ul> <li>For <code>get_top_headlines</code> it is not possible to make a request using <code>sources</code> and <code>category</code>/ <code>country</code> at the same time, that will give us back an error.</li> <li>For <code>get_everything</code>  pay attention to the time frame, on the free tier of the NewsAPI we are limited to one-month-old news.</li> </ul> <p>Here an example of a response from <code>/v2/top-headlines</code> </p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html","title":"Coin Market Cap","text":"<p>Coin market cap provides quality information about cryptocurrency and blockchain technologies. As part of their products they have a blog, portfolio management, and API, etc. The coin market cap API provides a RESTful JSON endpoint with the latest information about the prices, airdrops, chain supported, and project information.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#credentials","title":"Credentials","text":"<p>For CMC, we will need just the API key, and to get this API key:</p> <ol> <li>Navigate to https://coinmarketcap.com/api/</li> <li>Create an account ( in case we do not have one already)</li> <li>Get an API key (you will find the link asking you if you want to get the API key)</li> <li>You will be redirected to https://pro.coinmarketcap.com/account</li> </ol> <p></p> <p>Remember that CMC provides a different package to work with their API, some endpoints are just for pro members, but you can get along with the free package.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#authentication","title":"Authentication","text":"<p>You can provide the API key in two ways:</p> <ol> <li>Via headers ( <code>X-CMC_PRO_API_KEY</code> )</li> <li>As a parameter in the query string ( string parameter <code>CMC_PRO_API_KEY</code>)</li> </ol> <p>The recommended method is via headers. Honestly, it is the easiest way. Here is the example provided by CMC:</p> <pre><code>from requests import Request, Session\nfrom requests.exceptions import ConnectionError, Timeout, TooManyRedirects\nimport json\n\nurl = 'https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\nparameters = {\n  'start':'1',\n  'limit':'5000',\n  'convert':'USD'\n}\nheaders = {\n  'Accepts': 'application/json',\n  'X-CMC_PRO_API_KEY': 'YOUR API KEY GOES HERE',\n}\n\nsession = Session()\nsession.headers.update(headers)\n\ntry:\n  response = session.get(url, params=parameters)\n  data = json.loads(response.text)\n  print(data)\nexcept (ConnectionError, Timeout, TooManyRedirects) as e:\n  print(e)\n</code></pre> <p>From the code above, please notice:</p> <ol> <li>There is a variable called headers. Here we added the key <code>X-CMC_PRO_API_KEY</code> and the value. This value will be the API key we already generate.</li> <li>the other step is just an API call using <code>requests</code></li> </ol>  \ud83d\udca1 Each plan will have a maximum of daily and monthly calls to the API, each endpoint will have a credit cost.  <p>CMC explains it really well in the session API Key Usage Credits</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#endpoints-overview","title":"Endpoints Overview","text":"<p>Here CMC shows the skill by explaining in detail and few words how the API was designed, here is the main point:</p> <ol> <li>There are 8 endpoints each one will provide some type of information.</li> <li>Additional to the endpoint will be some patterns. These patterns will match the type of information provided. For example, if you want the latest market price, the pattern needs it will include <code>/latest</code>, now if what you want is the historical data the pattern will include <code>/historical</code>.</li> </ol> <p>This table is the same in the documentation.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#endpoints","title":"Endpoints","text":"Endpoint Category Description /cryptocurrency/* Endpoints that return data about the cryptocurrencies include price, ranking, etc. /exchange/* Endpoints that return data about the cryptocurrency exchanges /global-metrics/* Endpoints that return aggregate market data such as global market cap and BTC dominance. /tools/* Useful utilities such as cryptocurrency and fiat price conversions. /blockchain/* Endpoints that return block explorer-related data for blockchains. /fiat/* Endpoints that return data around fiats currencies including mapping to CMC IDs. /partners/* Endpoints for convenient access to 3<sup>rd</sup> party crypto data. /key/* API key administration endpoints to review and manage your usage. <p>Here are a couple of notes:</p> <ol> <li>The endpoint I use the most is <code>/cryptocurrency/*</code> it provides more than enough data.</li> <li>The Endpoint <code>/tools/*</code> useful and convenient, if combined with <code>/cryptocurrency/*</code> will give you all the information you need.</li> <li>CMC IDs is a mapping system by CMC for the different currencies and projects, for example, <code>BTC</code> <code>CMC ID</code> will be <code>1</code>.</li> </ol>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#patterns","title":"Patterns","text":"End path End path tab Description */latest latest market data The latest market quote average from the exchanges */historical historical market data OHLCV data or data for charting libraries */info Metadata Metadata cryptocurrency exchange URLs or logos */map ID map Utility endpoint to get the map for resources to CMC IDs <p>Both endpoints <code>cryptocurrency</code> and <code>exchange</code> will provide two ways to access the data, the first one as listing <code>*/listing/*</code> which can be filtered and sorted. Second, as ID-based resources with <code>*/quotes/*</code> and <code>*/market-pairs/*</code>.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#standards-and-conventions","title":"Standards and Conventions","text":"<p>Each HTTP request must contain a header with the following information:</p> <ul> <li><code>Accept: application/json</code></li> <li><code>Accept-Encoding: deflate,gzip</code></li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#endpoint-response-and-payload-format","title":"Endpoint Response and Payload Format","text":"<ol> <li> <p>The information returned will be under the key <code>data</code> if the call is successful.</p> </li> <li> <p><code>status</code> key is almost always added to successful and not successful calls, and it will contain:</p> <ol> <li><code>timestamp</code> when the call was done.</li> <li><code>credit_count</code> the number of credits used.</li> <li><code>elapsed</code> time that took to process the request.</li> <li>if and error is encounter <code>error_code</code> and <code>error_message</code></li> </ol> </li> </ol> <p>Bellow the link to the Error and Rate limit page:</p> <p>Account</p> <p>but here a quick summary:</p> HTTP Status code Description 400 Bad request 401 Unauthorized 402 Payment Required 403 Forbidden 429 To Many Request 500 Internal Service Error"},{"location":"APIs/coinmarketcap/coinmarketcap.html#date-and-time-format","title":"Date and Time Format","text":"<p>The <code>timestamp</code> follows the format ISO-8601 (2022-04-04T01:40:40Z) or Unix time (1528249600).</p>  \ud83d\udca1 The ISO-8601 format will display the date as YYYY-mm-ddThh:mm:ss.mmmZ <ul> <li> Z represents the UTC time.</li> <li> last three \u2018m\u2019 represent milliseconds, not all APIs will provide that value. </li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#best-practice","title":"Best Practice","text":"<p>The documentation provides a series of tips and recommendations, This will make it easier to work with the API. ( also show the dedication of the CMC team)</p> <ol> <li>Use CMC ID instead of the Cryptocurrency symbol.</li> <li>Use the right Endpoint for the job. For general consultation use <code>cryptocurrency/listing/latest</code>. For a more selective consultation <code>cryptocurrency/quotes/latest</code></li> <li>Implement a caching strategy to avoid repetitive calls.</li> </ol>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#a-general-description-of-the-endpoint","title":"A general description of the Endpoint","text":"<p>The documentation provides more detailed information about each endpoint. Here I present just an overview.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#cryptocurrency","title":"<code>cryptocurrency</code>","text":"<p>It has 17 endpoints</p> <ul> <li>/v1/cryptocurrency/map - Provide the CMC mapping for CMC ID and cryptocurrency</li> <li>/v1/cryptocurrency/info - Metadata</li> <li>/v1/cryptocurrency/listings/latest - Latest listings</li> <li>/v1/cryptocurrency/listings/historical - Historical listings</li> <li>/v1/cryptocurrency/quotes/latest - Latest quotes</li> <li>/v1/cryptocurrency/quotes/historical - Historical quotes</li> <li>/v1/cryptocurrency/market-pairs/latest - Latest market pairs</li> <li>/v1/cryptocurrency/ohlcv/latest - Latest OHLCV</li> <li>/v1/cryptocurrency/ohlcv/historical - Historical OHLCV</li> <li>/v1/cryptocurrency/price-performance-stats/latest - Price performance Stats</li> <li>/v1/cryptocurrency/categories - Categories</li> <li>/v1/cryptocurrency/category - Category</li> <li>/v1/cryptocurrency/airdrops - Airdrops</li> <li>/v1/cryptocurrency/airdrop - Airdrop</li> <li>/v1/cryptocurrency/trending/latest - Trending Latest</li> <li>/v1/cryptocurrency/trending/most-visited - Trending Most Visited</li> <li>/v1/cryptocurrency/trending/gainers-losers - Trending Gainers &amp; Losers</li> </ul> <p>Some Endpoints are not available for the free tiers</p> <ul> <li>Airdrop and Airdrops</li> <li>Listing historical</li> <li>listing new</li> <li>Trending Gainers &amp; Losers</li> <li>Trending Latest</li> <li>Trending Most Visit</li> <li>Market pairs Laters (v2)</li> <li>OHLCV historical</li> <li>OHLCV latest (v2)</li> <li>Price Performance status (v2)</li> <li>Quote historical (v2)</li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#fiat","title":"<code>fiat</code>","text":"<p>One Endpoint.</p> <p>\u2022 /v1/fiat/map - CoinMarketCap ID map</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#exchange","title":"<code>exchange</code>","text":"<p>Information about exchanges.</p> <p>Contain 7 EndPoints.</p> <ul> <li>/v1/exchange/map - CoinMarketCap ID map</li> <li>/v1/exchange/info - Metadata</li> <li>/v1/exchange/listings/latest - Latest listings</li> <li>/v1/exchange/quotes/latest - Latest quotes</li> <li>/v1/exchange/quotes/historical - Historical quotes</li> <li>/v1/exchange/market-pairs/latest - Latest market pairs</li> </ul> <p>Some Endpoints are not available for the free tiers:</p> <ul> <li>Listing Latest.</li> <li>Market Pairs Latest.</li> <li>Quote Historical.</li> <li>Quote Latest.</li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#global-metrics","title":"<code>global-metrics</code>","text":"<p>Global Aggregated data.</p> <p>Two Endpoints.</p> <ul> <li>/v1/global-metrics/quotes/latest - Latest global metrics</li> <li>/v1/global-metrics/quotes/historical - Historical global metrics</li> </ul> <p>One Endpoint is not available for the Free tier:</p> <ul> <li>Quote Historical</li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#tools","title":"<code>tools</code>","text":"<p>Convenient utilities including price conversion.</p> <p>One EndPoint.</p> <ul> <li>/v1/tools/price-conversion - Price conversion tool</li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#blockchain","title":"<code>Blockchain</code>","text":"<p>General information about the BlockChain</p> <p>One Endpoint.</p> <ul> <li>/v1/blockchain/statistics/latest - Latest statistics</li> </ul> <p>This EndPoint is not supported in the free tier.</p>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#key","title":"<code>key</code>","text":"<p>This Endpoint will provide information about the API usage, like credits remaining.</p> <p>One Endpoint.</p> <ul> <li>/v1/key/info - Key Info</li> </ul>"},{"location":"APIs/coinmarketcap/coinmarketcap.html#target-domain-and-request-example","title":"Target domain and Request example.","text":"<p>All requests must be targeted to:</p> <p><code>https://pro-api.coinmarketcap.com</code></p> <p>however, there is a sandbox domain that we can use for testing</p> <p><code>https://sandbox-api.coinmarketcap.com</code></p> <p>And here is a request example:</p> <pre><code>from requests import Request, Session\nfrom requests.exceptions import ConnectionError, Timeout, TooManyRedirects\nimport json\nimport os\n\nurl = 'https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\nparameters = {\n  'start':'1',\n  'limit':'5000',\n  'convert':'USD'\n}\nheaders = {\n  'Accepts': 'application/json',\n  'X-CMC_PRO_API_KEY': os.environ['COIN_API_KEY'],\n}\n\nsession = Session()\nsession.headers.update(headers)\n\ntry:\n  response = session.get(url, params=parameters)\n  data = json.loads(response.text)\n  print(data)\nexcept (ConnectionError, Timeout, TooManyRedirects) as e:\n  print(e)\n</code></pre> <p>Response</p> <pre><code>{\n      \"timestamp\": \"2022-04-24T04:29:28.687Z\",\n      \"data\": [\n            {\n                  \"id\": 1,\n                  \"name\": \"Bitcoin\",\n                  \"symbol\": \"BTC\",\n                  \"slug\": \"bitcoin\",\n                  \"num_market_pairs\": 9357,\n                  \"date_added\": \"2013-04-28T00:00:00.000Z\",\n                  \"tags\": [\n                        \"mineable\",\n                        \"pow\",\n                        \"sha-256\",\n                        \"store-of-value\",\n                        \"state-channel\",\n                        \"coinbase-ventures-portfolio\",\n                        \"three-arrows-capital-portfolio\",\n                        \"polychain-capital-portfolio\",\n                        \"binance-labs-portfolio\",\n                        \"blockchain-capital-portfolio\",\n                        \"boostvc-portfolio\",\n                        \"cms-holdings-portfolio\",\n                        \"dcg-portfolio\",\n                        \"dragonfly-capital-portfolio\",\n                        \"electric-capital-portfolio\",\n                        \"fabric-ventures-portfolio\",\n                        \"framework-ventures-portfolio\",\n                        \"galaxy-digital-portfolio\",\n                        \"huobi-capital-portfolio\",\n                        \"alameda-research-portfolio\",\n                        \"a16z-portfolio\",\n                        \"1confirmation-portfolio\",\n                        \"winklevoss-capital-portfolio\",\n                        \"usv-portfolio\",\n                        \"placeholder-ventures-portfolio\",\n                        \"pantera-capital-portfolio\",\n                        \"multicoin-capital-portfolio\",\n                        \"paradigm-portfolio\"\n                  ],\n                  \"max_supply\": 21000000,\n                  \"circulating_supply\": 19020456,\n                  \"total_supply\": 19020456,\n                  \"platform\": null,\n                  \"cmc_rank\": 1,\n                  \"self_reported_circulating_supply\": null,\n                  \"self_reported_market_cap\": null,\n                  \"last_updated\": \"2022-04-24T04:29:00.000Z\",\n                  \"quote\": {\n                        \"USD\": {\n                              \"price\": 39771.52058406209,\n                              \"volume_24h\": 16208164811.782156,\n                              \"volume_change_24h\": -39.0177,\n                              \"percent_change_1h\": 0.05196188,\n                              \"percent_change_24h\": 1.01643893,\n                              \"percent_change_7d\": -1.37701514,\n                              \"percent_change_30d\": -9.62447945,\n                              \"percent_change_60d\": 4.84949453,\n                              \"percent_change_90d\": 12.37243427,\n                              \"market_cap\": 756472457322.2473,\n                              \"market_cap_dominance\": 40.9044,\n                              \"fully_diluted_market_cap\": 835201932265.3,\n                              \"last_updated\": \"2022-04-24T04:29:00.000Z\"\n                        }\n                  }\n            },\n...\n</code></pre>"},{"location":"APIs/datamuse/datamuse.html","title":"Datamuse","text":"<p>Datamuse is a collection of free websites, mobile apps, and APIs designed to help people create and communicate more effectively.</p> <p>datamuse API</p>"},{"location":"APIs/datamuse/datamuse.html#what-is-it","title":"What is it","text":"<p>the website describe it as: The Datamuse API is a word-finding query engine for developers.</p>"},{"location":"APIs/datamuse/datamuse.html#for-what-i-can-use-it","title":"For what I can use it?","text":"To find end point Meaning similar to a sentence <code>/words?ml=[sentence]</code> Related with a word that start with b or ends with a <code>/words?ml=duck&amp;sp=b*</code>or <code>/words?ml=spoon&amp;sp=*a</code> Word that sound like <code>/words?sl=jirraf</code> A word that start with t has 2 letters between and end k <code>/words?sp=t??k</code> Words that are spelled similarly to hippopotamus <code>/words?sp=hipopatamus</code> Words that rhyme with forgetful <code>/words?rel_rhy=forgetful</code> Words that rhyme with grape that are related to breakfast <code>/words?ml=breakfast&amp;rel_rhy=grape</code> Adjectives that are often used to describe ocean <code>/words?rel_jjb=ocean</code> Adjectives describing ocean sorted by how related they are to temperature <code>/words?rel_jjb=ocean&amp;topics=temperature</code> Nouns that are often described by the adjective yellow <code>/words?rel_jja=yellow</code> Words that often follow \"drink\" in a sentence, that start with the letter w <code>/words?lc=drink&amp;sp=w*</code> Words that are triggered by (strongly associated with) the word \"cow\" <code>/words?rel_trg=cow</code> Suggestions for the user if they have typed in rawand so far <code>/sug?s=rawand</code>"},{"location":"APIs/datamuse/datamuse.html#end-points","title":"End points","text":"<p>The feacture can be access on:</p> <ul> <li><code>api.datamuse.com/words</code></li> <li><code>api.datamuse.com/sug</code></li> </ul>"},{"location":"APIs/datamuse/datamuse.html#words-endpoint","title":"<code>/words</code> endpoint","text":"<p>End point return a list of words</p> <p>I can divide it in 3 categories; 1. Hard constraints results (<code>rd</code>,<code>sl</code>,<code>sp</code>,<code>rel_[code]</code> and <code>v</code>). 2. Context hints (<code>topics</code>, <code>lc</code>, <code>rc</code>). 3. Those that affect the order of the results returned.</p>"},{"location":"APIs/datamuse/datamuse.html#hard-constraints","title":"Hard Constraints","text":""},{"location":"APIs/datamuse/datamuse.html#means-like-ml","title":"Means like <code>ml</code>","text":"<p>This will give back words or sentence that has similar meaning</p> <pre><code>https://api.datamuse.com/words?ml=ringing+in+the+ears\nor\nhttps://api.datamuse.com/words?ml=Python\n</code></pre>"},{"location":"APIs/datamuse/datamuse.html#sound-like-sl","title":"Sound like <code>sl</code>","text":"<p>Require that the results are pronounced similarly to this string of characters. <pre><code>https://api.datamuse.com/words?sl=jirraf\n</code></pre></p>"},{"location":"APIs/datamuse/datamuse.html#spelled-like-sp","title":"spelled like <code>sp</code>","text":"<p>Require that the results are spelled similarly to this string of characters. A pattern can include any combination of alphanumeric characters, spaces, and two reserved characters that represent placeholders:</p> <ul> <li>\"*\" (which matches any number of characters).</li> <li>\"?\" (which matches exactly one character).</li> </ul> <pre><code>https://api.datamuse.com/words?sp=t??k\nor\nhttps://api.datamuse.com/words?sp=hipopatamus\n</code></pre>"},{"location":"APIs/datamuse/datamuse.html#related-word-rel_code","title":"Related word <code>rel_[code]</code>","text":"<p>[code] is a three-letter identifier from the list below.</p> [code] Description Example jja Popular nouns modified by the given adjective gradual \u2192 increase jjb Popular adjectives used to modify the given noun beach \u2192 sandy syn Synonyms ocean \u2192 sea trg \"Triggers\", words that are statistically associated with the query word. cow \u2192 milking ant Antonyms late \u2192 early spc \"Kind of\", direct hypernyms. gondola \u2192 boat gen \"More general than\", direct hyponyms boat \u2192 gondola com \"Comprises\", direct holonyms car \u2192 accelerator par \"Part of\", direct meronyms trunk \u2192 tree bga Frequent followers (w\u2032 such that P(w\u2032|w) \u2265 0.001) wreak \u2192 havoc bgb Frequent predecessors (w\u2032 such that P(w|w\u2032) \u2265 0.001) havoc \u2192 wreak rhy Rhymes, \"perfect\" rhymes spade \u2192 aid nry Approximate rhymes forest \u2192 chorus hom Homophones, sound-alike words course \u2192 coarse cns Consonant match sample \u2192 simple"},{"location":"APIs/datamuse/datamuse.html#vocabulary-used-v","title":"Vocabulary used <code>v</code>","text":"<p>Identifier for the vocabulary to use. If none is provided, a \\(550,000\\)-term vocabulary of <code>English</code> words and multiword expressions is used. (The value es specifies a \\(500,000\\)-term vocabulary of words from <code>Spanish-language</code> books.</p>"},{"location":"APIs/goldapi/goldapi.html","title":"Goldapi","text":""},{"location":"APIs/goldapi/goldapi.html#main-page","title":"Main page","text":"<p>Free Gold and Silver Prices JSON API | GoldAPI.io</p>"},{"location":"APIs/goldapi/goldapi.html#description","title":"Description","text":"<p>Get the prices of the four metals:</p> <ul> <li>Silver</li> <li>Gold</li> <li>Platinum</li> <li>Palladium</li> </ul>"},{"location":"APIs/goldapi/goldapi.html#endpoints","title":"Endpoints","text":"<p>There are three endpoints</p> <ol> <li>Get Metal Prices: Get the prices of the metals</li> <li>Get Requests Stats: get the number of requests done in the day, week, and month.</li> <li>Check API Stats: Get the status of the API.</li> </ol> <p>The domain:</p> <pre><code>https://www.goldapi.io/api/\n</code></pre> <p>The headers:</p> <pre><code>\"x-access-token\": \"API_KEY\",\n\"Content-Type\": \"application/json\"\n</code></pre>"},{"location":"APIs/goldapi/goldapi.html#get-metal-prices","title":"Get Metal Prices","text":"<p><pre><code>https://www.goldapi.io/api/:symbol/:currency/:date?\n# URL to fetch gold prices in USD\nhttps://www.goldapi.io/api/XAU/USD\n</code></pre> </p> <p>From the API End point:</p> <ul> <li><code>:symbol</code> Here is the symbol for the metals</li> </ul> <pre><code>\"XAU\": \"Gold\",\n\"XAG\": \"Silver\",\n\"XPT\": \"Platinum\",\n\"XPD\": \"Palladium\"\n</code></pre> <ul> <li><code>:currency</code> Here is the currency, format ISO-4217</li> </ul> <p>If we want the historical price</p> <ul> <li>(Option) <code>:date</code> the format YYYYMMDD</li> </ul>"},{"location":"APIs/goldapi/goldapi.html#example-response","title":"Example Response","text":""},{"location":"APIs/goldapi/goldapi.html#get-request-stats","title":"Get Request Stats","text":"<pre><code>https://www.goldapi.io/api/stat\n</code></pre>"},{"location":"APIs/goldapi/goldapi.html#example-response_1","title":"Example Response","text":"<pre><code>{\n\"requests_today\":80\n\"requests_yesterday\":4\n\"requests_month\":84\n\"requests_last_month\":0\n}\n</code></pre>"},{"location":"APIs/goldapi/goldapi.html#check-api-status","title":"Check API Status","text":"<pre><code>https://www.goldapi.io/api/status\n</code></pre>"},{"location":"APIs/goldapi/goldapi.html#example-response_2","title":"Example Response","text":"<pre><code>{\n\"result\":true\n}\n</code></pre>"},{"location":"APIs/goldapi/goldapi.html#error-handling","title":"Error Handling","text":"<p>Free Gold and Silver Prices JSON API | GoldAPI.io</p>"},{"location":"Arduino/Projects/Air_vent_servo_control.html","title":"Air Vent servo control","text":"<p>The air vent subproject is part of the Ikea Lack enclosure, more exact to the Air vent or the temperature control. The idea is simple; the vents will be open and close with by a servo, the decision to open or close the vents depending on the current temperature inside the enclosure.</p> <p>The project is based on Servo automated iris/aperture for airflow control by AcE_Krystal</p> <p></p>"},{"location":"Arduino/Projects/Air_vent_servo_control.html#first-sketch-basic-control","title":"First Sketch (Basic Control)","text":"<p> First, we are going to create a sketch to control the servo. It will move 180 degrees right, later 180 left.</p> <p>The code will be as follow:</p> <pre><code>#include &lt;Servo.h&gt;\n\nServo servo_air_vent;\n\nint servo_position = 0;\n\nvoid setup() {\n\n  servo_Air_vent.attach (9);\n\n}\n\nvoid loop() {\n\n  for (servo_position = 0; servo_position &lt;=180; servo_position +=1){\n\n    servo_Air_vent.write(servo_position);\n    delay(10);\n  }\n\n  for (servo_position=180; servo_position &gt;= 0; servo_position -=1){\n\n    servo_Air_vent.write(servo_position);\n    delay(10);\n  }\n}\n</code></pre> <ol> <li>We are going to import the library <code>#include &lt;Servo.h&gt;</code></li> <li>we are going to give a name to the servo, in this case, \"servo_air_vent\" <code>Servo servo_air_vent;</code></li> <li>we define the initial position <code>int servo_position = 0;</code></li> <li>in the <code>setup</code> block we tell Arduino where the servo is connected <code>Servo_Air_vent.attach (9);</code></li> <li>In the <code>loop</code> block we create 2 <code>for</code> that will move the servo to the right and later to the left</li> </ol>"},{"location":"Arduino/Projects/Morse_code_Translator.html","title":"Morse code Translator","text":""},{"location":"Arduino/Projects/Morse_code_Translator.html#description","title":"Description","text":"<p>I will take a sentence from the serial com and later use the LEDs to output the same sentence using Morse code.</p>"},{"location":"Arduino/Projects/Morse_code_Translator.html#the-structure","title":"The Structure","text":""},{"location":"Arduino/Projects/Morse_code_Translator.html#definition-of-variables","title":"Definition of variables","text":"<ul> <li>Two variables <code>int</code> to define the LED output and the delay between the dots.</li> <li>A list of <code>char</code> that will represent the letters from A-Z.</li> <li>A list of <code>char</code> that represent the numbers from 0-9.</li> </ul> <pre><code>int ledPin = 13;\nint dotDelay = 200;\n\nchar* letters[] = {\n  \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\",    // A-I\n  \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\",  // J-R\n  \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"          // S-Z\n};\n\nchar* numbers[] = {\n  \"-----\", \".----\", \"..---\", \"...--\", \"....-\", \".....\", \"-....\", \"--...\", \"---..\", \"----.\"};\n</code></pre>"},{"location":"Arduino/Projects/Morse_code_Translator.html#setup","title":"<code>setup()</code>","text":"<p>The setup will contain the definition of the output <code>pinMode()</code> and the baud for the serial communication.</p> <pre><code>void setup()\n{\n  pinMode(ledPin, OUTPUT);\n  Serial.begin(9600);\n}\n</code></pre>"},{"location":"Arduino/Projects/Morse_code_Translator.html#loop","title":"<code>loop()</code>","text":"<p>Here will be the main loop of the sketch.</p> <ol> <li>First, I create a <code>char</code> variable that holds a character. The character will come from the input, one character at a time.</li> <li>I use the <code>Serial.available()</code> to check if something is waiting in the serial port.</li> <li>It will read the serial input and save one character at a time in the variable <code>ch</code>.</li> <li>A <code>if/else</code> conditionals that compare the input with letters (Arduino will read/interpret every letter as its value in ASCII).</li> <li>Inside the <code>if/else</code> there is a function <code>flashSequence()</code> that will take as input one element of the list <code>letters[]</code>, the element is selected by subtracting the ASCII value of the letter taken from the serial input and a letter of the alphabet <code>[ch - 'a']</code></li> <li>A delay statement to make a gap between words (<code>delay(dotDelay * 4)</code>).</li> </ol>"},{"location":"Arduino/Projects/Morse_code_Translator.html#the-functions","title":"The functions","text":"<p>There will be two functions:</p> <ul> <li><code>flashSequence()</code>: it is going to execute the flash sequence, and check if the is more sentence or words on the serial input.</li> <li><code>flashDotOrDash()</code>: is the function that will make the LED flash.</li> </ul>"},{"location":"Arduino/Projects/Morse_code_Translator.html#the-final-script-or-sketch","title":"The final script or sketch:","text":"<pre><code>// Morse code translator\n\nint ledPin = 13;\nint dotDelay = 200;\n\nchar* letters[] = {\n  \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\",    // A-I\n  \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\",  // J-R\n  \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"          // S-Z\n};\n\nchar* numbers[] = {\n  \"-----\", \".----\", \"..---\", \"...--\", \"....-\", \".....\", \"-....\", \"--...\", \"---..\", \"----.\"};\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop()\n{\n  char ch;\n  if (Serial.available() &gt; 0)\n  {\n    ch = Serial.read();\n    if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z')\n    {\n      flashSequence(letters[ch - 'a']);\n    }\n    else if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')\n    {\n      flashSequence(letters[ch - 'A']);\n    }\n    else if (ch &gt;= '0' &amp;&amp; ch &lt;= '9')\n    {\n      flashSequence(numbers[ch - '0']);\n    }\n    else if (ch == ' ')\n    {\n      delay(dotDelay * 4);  // gap between words\n    }\n  }\n}\n\nvoid flashSequence(char* sequence)\n{\n  int i = 0;\n  while (sequence[i] != NULL)\n  {\n    flashDotOrDash(sequence[i]);\n    i++;\n  }\n  delay(dotDelay * 3);    // gap between letters\n}\n\nvoid flashDotOrDash(char dotOrDash)\n{\n  digitalWrite(ledPin, HIGH);\n  if (dotOrDash == '.')\n  {\n    delay(dotDelay);\n  }\n  else // must be a dash\n  {\n    delay(dotDelay * 3);\n  }\n  digitalWrite(ledPin, LOW);\n  delay(dotDelay); // gap between flashes\n}\n</code></pre>"},{"location":"Arduino/Structure/Control_Structure.html","title":"Control Structure","text":"<p>Similar to many other languages on Arduino we have control structures, some of this structure are:</p> <ul> <li>Do...while</li> <li>while</li> <li>if (if-else)</li> <li>for</li> <li>switch...case</li> <li>goto</li> </ul> <p>From this the new one (in comparison with python and swift ) will be the <code>goto</code>.</p> <p>As other language we have ways to jump to return a value, go to the next item, or break the loop all together, for those task we have:</p> <ul> <li>return</li> <li>break</li> <li>continue</li> </ul> <p>I won't add much about <code>break</code>, <code>continue</code>, and <code>return</code> since they work like in another languages, same as some of the control structures. Although, I will add the syntax of some of those items, to quick reference.</p>"},{"location":"Arduino/Structure/Control_Structure.html#dowhile","title":"do...while","text":"<p>Work similar to <code>while</code> loop, with the exception the condition is evaluated at the end of the loop, so the loop aways run at least one time.</p> <p>Syntax <pre><code>do {\n  // statement block\n} while (condition);\n</code></pre></p> <p>Example <pre><code>int x = 0;\ndo {\n  delay(50);          // wait for sensors to stabilize\n  x = readSensors();  // check the sensors\n} while (x &lt; 100);\n</code></pre></p>"},{"location":"Arduino/Structure/Control_Structure.html#while","title":"while","text":"<p>Like any other while loop, i will loop until the condition become <code>False</code></p> <p>Syntax <pre><code>while (condition) {\n  // statement(s)\n}\n</code></pre> Example <pre><code>var = 0;\nwhile (var &lt; 200) {\n  // do something repetitive 200 times\n  var++;\n}\n</code></pre></p>"},{"location":"Arduino/Structure/Control_Structure.html#switchcase","title":"switch...case","text":"<p>\"switch case controls the flow of programs by allowing programmers to specify different code that should be executed in various conditions\"</p> <ul> <li><code>var</code>: a variable whose value to compare with various cases. Allowed data types: <code>int</code>, <code>char</code>.</li> <li><code>label1</code>, <code>label2</code>: constants. Allowed data types: <code>int</code>, <code>char</code>.</li> </ul> <p>Syntax <pre><code>switch (var) {\n  case label1:\n    // statements\n    break;\n  case label2:\n    // statements\n    break;\n  default:\n    // statements\n    break;\n}\n</code></pre> Example <pre><code>switch (var) {\n  case 1:\n    //do something when var equals 1\n    break;\n  case 2:\n    //do something when var equals 2\n    break;\n  default:\n    // if nothing else matches, do the default\n    // default is optional\n    break;\n}\n</code></pre></p>"},{"location":"Arduino/Structure/Control_Structure.html#goto","title":"goto","text":"<p>Transfers program flow to a labeled point in the program.</p> <p>Syntax <pre><code>label:\n\ngoto label; // sends program flow to the label\n</code></pre></p> <p>Example <pre><code>for (byte r = 0; r &lt; 255; r++) {\n  for (byte g = 255; g &gt; 0; g--) {\n    for (byte b = 0; b &lt; 255; b++) {\n      if (analogRead(0) &gt; 250) {\n        goto bailout;\n      }\n      // more statements ...\n    }\n  }\n}\n\nbailout:\n// more statements ...\n</code></pre></p> <p>The use of goto is discouraged in C programming</p>"},{"location":"Arduino/Structure/Further_Syntax.html","title":"<code>#define</code>","text":""},{"location":"Arduino/Structure/Further_Syntax.html#description","title":"Description","text":"<p><code>#define</code> is a useful C++ component that allows the programmer to give a name to a constant value before the program is compiled. Defined constants in arduino don\u2019t take up any program memory space on the chip. The compiler will replace references to these constants with the defined value at compile time.</p> <p>Unwanted side effects: A constant name that had been <code>#defined</code> is included in some other constant or variable name. In that case the text would be replaced by the <code>#defined</code> number (or text).</p> <p>The <code>const</code> keyword is preferred for defining constants and should be used instead of <code>#define</code>.</p> <p>Syntax</p> <pre><code>#define constantName value\n</code></pre> <p>Parameters:</p> <ul> <li>constantName: the name of the macro to define.</li> <li>value: the value to assign to the macro.</li> </ul>"},{"location":"Arduino/Structure/Further_Syntax.html#example-code","title":"Example Code","text":"<pre><code>#define ledPin 3\n</code></pre>"},{"location":"Arduino/Structure/Further_Syntax.html#include-include","title":"<code>#include (include)</code>","text":"<p>Syntax</p> <p>Examples</p>"},{"location":"Arduino/Structure/Further_Syntax.html#reference-operator","title":"<code>&amp;</code> reference operator","text":"<p>This operator is use with pointers, if <code>x</code> is a variable, <code>&amp;x</code> represent the address of the variable.</p> <p>Syntax</p> <pre><code>int *p;       // declare a pointer to an int data type\nint i = 5;\nint result = 0;\np = &amp;i;       // now 'p' contains the address of 'i'\nresult = *p;  // 'result' gets the value at the address pointed by 'p'\n              // i.e., it gets the value of 'i' which is 5\n</code></pre>"},{"location":"Arduino/Structure/Further_Syntax.html#dereference-operator","title":"<code>*</code> Dereference operator","text":"<p>The Arduino Documentation call it \"Dereference\", the <code>*</code> is use to represent the Dereference. \"[...] If <code>p</code> is a pointer, then <code>*p</code> represents the value contained in the address pointed by <code>p</code>.\"</p> <p>Syntax <pre><code>int *p;       // declare a pointer to an int data type\nint i = 5;\nint result = 0;\np = &amp;i;       // now 'p' contains the address of 'i'\nresult = *p;  // 'result' gets the value at the address pointed by 'p'\n              // i.e., it gets the value of 'i' which is 5\n</code></pre></p>"},{"location":"Arduino/Structure/Sketch.html","title":"Sketch","text":"<p>The arduino code has two basic \"Functions\", these functions are a requirement to the sketch to run, other functions can be define and use inside this basic loops, these basic function are:</p> <ul> <li><code>Setup</code> function.</li> <li><code>Loop</code> function.</li> </ul>"},{"location":"Arduino/Structure/Sketch.html#setup-function","title":"<code>setup()</code> function","text":"<p>The <code>setup()</code> function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc. The <code>setup()</code> function will only run once, after each powerup or reset of the Arduino board.</p> <pre><code>void setup(){\n\n}\n</code></pre> <p>one of the statement that are going to be in this function, or that are commonly found, is the function to communicate with the serial port, <code>Serial.begin(9600);</code> this is standard and basically is feeding 960 characters per second over the serial</p> <pre><code>int buttonPin = 3;\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(buttonPin, INPUT);\n}\n\nvoid loop() {\n  // ...\n}\n</code></pre>"},{"location":"Arduino/Structure/Sketch.html#loop-function","title":"<code>loop()</code> function","text":"<p>After creating a <code>setup()</code> function, which initializes and sets the initial values, the <code>loop()</code> function does precisely what its name suggests, and loops consecutively, allowing your program to change and respond. Use it to actively control the Arduino board.</p> <pre><code>int buttonPin = 3;\n\n// setup initializes serial and the button pin\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(buttonPin, INPUT);\n}\n\n// loop checks the button pin each time,\n// and will send serial if it is pressed\nvoid loop() {\n  if (digitalRead(buttonPin) == HIGH) {\n    Serial.write('H');\n  }\n  else {\n    Serial.write('L');\n  }\n\n  delay(1000);\n}\n</code></pre>"},{"location":"Arduino/Variables/Variable_Scope_Qualifiers.html","title":"Variable Scope & Qualifiers","text":""},{"location":"Arduino/Variables/Variable_Scope_Qualifiers.html#scope","title":"Scope","text":"<p>Arduino use C++ for programing, have a property called Scope, a global variable is one that can be access by evey function on the program, local variable are just visible by the function in whihc they are declared. In the arduiono enviroment, any varivable declared outside ouside of the function( example: <code>setup()</code> and <code>loop()</code>, etc), is a global variable.</p> <p>Example <pre><code>int gPWMval; //any function will see this variable\n\nvoid setup() {\n    //...\n}\n\nvoid loop() {\n    //...\n}\n</code></pre></p>"},{"location":"Arduino/Variables/Variable_Scope_Qualifiers.html#const","title":"const","text":"<p>The keyword <code>const</code> is a constant. it is a variable qualifier that modify the behavior of the variable making a variable \"read-only\".</p> <p>The <code>const</code> keyword is a superior method for defining constants and is preferred over using <code>#define</code>.</p> <p>Example <pre><code>const float pi = 3.14;\nfloat x;\n// ..\nx = pi * 2; // it's fine to use consts in math\npi = 7;     // illegal - you can't write to (modify) a constant\n</code></pre></p>"},{"location":"Arduino/Variables/Variable_Scope_Qualifiers.html#static","title":"static","text":"<p>The <code>static</code> keyword is used to create variables that are visible to only one function. but the difference with a normal variable that are create and destroy every time a function is called, static variables persist beyond the function call, preserving their data between function calls.</p> <p>Variables declared as static will only be created and initialized the first time a function is called.</p> <pre><code>static int count = 0;\n</code></pre>"},{"location":"CCTV/Basic_concepts.html","title":"Basic Concepts","text":""},{"location":"CCTV/Basic_concepts.html#throughput-vs-bandwidth","title":"Throughput vs Bandwidth","text":"<p>Throughput tells you how much data was transferred from a source at any given time and bandwidth tells how much data could theoretically be transferred from a source at any given time.</p> <p></p>"},{"location":"CCTV/Basic_concepts.html#throughput","title":"Throughput","text":"<p>The network throughput refers to how much data can be transferred from source to destination within a frame of time. Throughput measures how many packets arrive at their destinations successfully. Packet loss, latency, and jitter are all related to slow throughput speed. Latency is the amount of time it takes for a packet to make it from source to destination, and jitter refers to the difference in packet delay.</p>"},{"location":"CCTV/Basic_concepts.html#bandwidth","title":"Bandwidth","text":"<p>The bandwidth definition will be Network bandwidth is defined as the maximum transfer throughput capacity of a network. It measures how much data can be sent and receive at the same time. It is important to know bandwidth doesn't increase the speed of a network, it just appears to make the network faster.</p> <p>Let\u2019s say 1 Mbps is the equivalent of a single-lane freeway. Let\u2019s also say you want to download a 5 Mb image. If you had a connection with a bandwidth of 1 Mbps (one lane) it would take you about five seconds to download that image. Now, if you were operating with a 5 Mbps bandwidth connection (five lanes)</p> <p></p> <p>You can think of bandwidth as a tube and data throughput as sand. If you have a large tube, you can pour more sand through it at a faster rate. but, if you try to put a lot of sand through a small tube, it will go very slowly.</p>"},{"location":"CCTV/Basic_concepts.html#i-p-b-frames","title":"I-P-B Frames","text":"<p>I-FRAME or Intra-coded picture, least compressible of all frames but it doesn't require other frames to be decoded, it is a complete image, similar to <code>.jpg</code>, compress just I-Frames will result in good quality but heavy file.</p> <p>P-Frame or Predicted picture, more compressible than the I-FRAME, it uses information of the previous frame to decompress. It only holds the part of the image that changes comparing with the last frame.</p> <p>B-Frame or Bidirectional predicted picture can use both previous and forward Frame to get the highest amount of data compression, use the difference between the current frame and both the preceding and following frame to specify its content.</p> <p></p>"},{"location":"CCTV/Basic_concepts.html#video-format-and-codecs","title":"Video format and codecs","text":""},{"location":"CCTV/Basic_concepts.html#video-formats","title":"Video Formats","text":"<p>It is common to find an extension for video files like <code>.mp4</code> and <code>.avi</code> and is even more common to misunderstand this extension or containers for the codec. When we talk about <code>mp4</code> we are not talking about a single file, instead of a container of multiple files. It consists of video files, audio files, and metadata files.</p> <p></p> <p>The most common containers for CCTV will be <code>AVI</code> and <code>MP4</code>.</p>"},{"location":"CCTV/Basic_concepts.html#video-codec","title":"Video Codec","text":"<p>Now the name codec comes  from the combination of Coder and decoder $$ Codec = Coder + Decoder $$</p> <p>We talk about software codec but be aware that the name <code>codec</code> applies to hardware as well.</p> <p>To make the video manageable and smaller, codec creates an encoded stream or a compressed version of the video and the audio, software like VLC player can then decode that video stream and present the result.</p> <p>It is important to know that most of the codec is \"lossy\" or \"lossy compression\", in other words, some quality is lost during the compression.</p> <p>The most common codec use in CCTV for video are:</p> <ul> <li>H.265 (HECV)<sup>1</sup></li> <li>MPEG4</li> <li>H.264 (AVC)<sup>2</sup></li> </ul> <p>\"lossless\"  codec we have MJPEG.</p> <p></p> <ol> <li> <p>High-Efficiency Video Coding\u00a0\u21a9</p> </li> <li> <p>Advanced Video Coding\u00a0\u21a9</p> </li> </ol>"},{"location":"CCTV/SoC.html","title":"SoC What is and What it Does?","text":"<p>IP Camera/DVR/NVR's SoC, What's it? What it does?</p> <p>A system on a Chip or SoC is the core processor in most of the IP cameras and NVRs, so it is safe to say that the SoC will determine the performance of the Network CCTV equipment.</p>"},{"location":"CCTV/SoC.html#components-of-the-soc","title":"Components of the SoC","text":"<p>There is a different component of the SoC, but it is faster if we mention what SoC integrates:</p> <ul> <li>ISP or Image signal processor.</li> <li>Video Codec Engine (Encoding)</li> <li>DSP or Digital signal processor</li> <li>Network peripheral interfaces</li> <li>Intelligent video analysis engine</li> <li>Etc</li> </ul> <p></p> <p>We can say that there are two main important components in a CCTV camera, those will be the CMOS sensor and the SoC, in order to evaluate a device it is important to know what type of SoC it is used.</p> <p>The factors to determine the performance of the SoC are:</p> <ol> <li>Architecture of the SoC, dual-core, quad-core, speed</li> <li>ISP Capability including WDR, HDR, DOL. etc</li> <li>Encoding/Decoding capability</li> <li>Maximum resolution and frame rate</li> <li>Network and other I/O peripheral interfaces</li> </ol> <p>If we know the SoC we will be able to compare different cameras that share similar features.</p> <p>The most popular manufactures are:</p> <ul> <li>Ambrella</li> <li>Hisilicon</li> <li>Texas Instruments</li> </ul> <p>Hikvision and Dahua use Ambarella and Hisilicon</p> <p>Uniview and Tiandy use Hisilicon</p> <p>in 2020 due to the NDAA some manufacture move away from SoC produce in China such as Hisilicon.</p>"},{"location":"CCTV/SoC.html#most-popular-socs","title":"Most popular SoCs","text":"Manufacture Model Main Specification Hisilicon Hi3518EV200/201 1280x960@30fps/1920x1080@15fps H.264 Hi3516CV100/200 1080P@30fps+VGA@30fps H.264 Hi3516EV100 1920x1080@20fps+720x576@20fps H.265 Hi3516CV300 1080P@30fps+720@30fps H.265 Hi3516DV100 3M@30fps/4M@25fps/5M@15fps H.265 Hi3516AV100 5M@30fps+VGA@30fps H.265 Hi3516AV200 6M@30fps+VGA@30fps H.265 Hi3519V101 4K@30fps+1080P@30fps H.265 Hi3559AV100 8K@30fps+1080P@30fps H.265 Ambarella S5 4Kp60 HEVC/H.265 and 4Kp60 AVC/H.264 S5L 4Kp30 S3L 5M/H.265/HEVC S3Lm 3M/H.265/HEVC S2L/S2Lm 5Mp30 264 S2E 4K Ultra HD A5s 1080p30 Goke GK7101 1080P@30fPs GK7102 960P/720P@30fps Grain Media GM8135S 720P@45fps GM8138S 1080p@45 fps Anyka AK3918 H.264 720P@30fps Ingenic T10 Up to H.264 960P@40fps T20 Up to H.264 1080P@60fps MStar\u00a0(Media Tek) MC313E MC316D Fullhan 8538M HD Analog@2M/4M/5M FH8536 720P@60/50/30/25 1080P@30/25 FH8532 720P@60/50/30/25 Nextchip NVP2431H 720p@30fps NVP2441H 1080p@30fps NVP2470H 1536p@30fps NVP2475H 1944p@30fps Hisilicon Hi3520DV200 Max. 4-channel 720P@30fps Hi3520DV300 Max.8-channel 720P@30fps Hi3521AV100 Up to 8-channel 1080P@30fps Hi3531AV100 Up to 16-channel 1080P@30fps Hi3535V100 Up to 5-channel 1080P@30fps Hi3536CV100 Up to 8/16-channel 1080P@30fps H.265 Hi3536V100 4*4K@30FPS H.265 Hi3798M V200 4K x 2K@60 fps H.265/H.264"},{"location":"CCTV/hypercoverged_infrastructure.html","title":"What is Hyperconverged infrastructure?","text":"<p>A good solution for private clouds</p> <p>Hyperconverged infrastructure or HCI combine:</p> <ul> <li>Computing</li> <li>Virtualization</li> <li>Networking</li> <li>storage</li> </ul> <p>All in a single cluster, this provides cloud-like scalability.</p>"},{"location":"CCTV/hypercoverged_infrastructure.html#components","title":"Components","text":"<p>There are two major components in these systems</p> <ol> <li>Hypervisors ( VMware, Hyper-v, KVM, Citrix, etc )</li> <li>Storage Controllers ( Stonefly, etc)</li> </ol>"},{"location":"CCTV/hypercoverged_infrastructure.html#available-in-which-forms","title":"Available in which forms?","text":"<p>They are available in two main forms</p> <ul> <li>Fully Integrate Hardware appliances (hardware and software same manufacture)</li> <li>Standalone Software</li> </ul>"},{"location":"CCTV/hypercoverged_infrastructure.html#how-is-it-work","title":"How is it work?","text":"<p>First, a standard or common architecture</p>"},{"location":"CCTV/hypercoverged_infrastructure.html#standard-3-tier-siloed-architecture","title":"Standard 3-tier \"siloed\" architecture","text":"<p>We have some points to remark:</p> <p>Storage tier</p> <ol> <li>It will contain:<ol> <li>Storage</li> <li>controllers or NAS switch</li> <li>Backup</li> </ol> </li> <li>There will be 3 different user interphase to control all</li> </ol> <p>Server Tier</p> <ol> <li>Hypervisor to control all servers</li> <li>Servers</li> <li>2 different UI to control everything</li> </ol> <p>Site A will have a Redundancy Site B</p> <ol> <li>To keep the two sites sync, a Bidirectional replication is a use (for example Wan optimization )</li> </ol> <p>It is called \"3-tier\" because it is divided into three parts, network, server, storage</p> <p>One advantage is the ability to update different parts independently.</p> <p>The disadvantage you need to notify the other tiers of that update or any change.</p>"},{"location":"CCTV/hypercoverged_infrastructure.html#how-to-improve-the-3-tier-architecture","title":"How to improve the 3-tier architecture?","text":"<p>By using Hyperconvergance</p> <ol> <li>Remove as many hardware components as possible</li> <li>Remove as many UI as possible ( ideally have just one single UI)</li> </ol> <p></p> <p>In the example above, two of the three layers are collapsed and it is replaced for a single standard server ( with a mirror device as redundancy). All the UI are replaced for a single UI.</p> <p>The Hypervisor will virtualize server resources and use the storage controller to provide virtual storage ( vNAS, vSAN, etc)</p> <p>This architecture allows the user to use Available server resources to the maximum capacity.</p>"},{"location":"CCTV/hypercoverged_infrastructure.html#benefits","title":"Benefits","text":"<ul> <li>Agility</li> <li>Flexibility</li> <li>Simplicity</li> <li>Unified Storage</li> <li>Cost-Effective</li> <li>Cloud-friendly</li> </ul>"},{"location":"CCTV/hypercoverged_infrastructure.html#reference","title":"Reference","text":"<p>Hyperconvergence - Simple Is Beautiful</p>"},{"location":"CCTV/lens_mount.html","title":"Different types of mount for lens","text":""},{"location":"CCTV/lens_mount.html#ccs-mount-lenses","title":"C/CS-Mount Lenses","text":"<p>A C-mount is a type of mount typically used on CCTV cameras. C-mount provides a male thread, which mates with a female thread on the camera.</p> <p>The common threats are: * 25.4 mm in diameter. * 32 threads per pitch (0.794 mm).</p> <p>The Flange Focal: * Distance 17.526 millimeters for C-Mount. * Distance 12.526 millimeters for CS-Mount.</p> <p></p> <p>It is not an easy way to use a CS-Mount lens on C-Mount. The main reason is the back focal length. They won\u2019t match. If you cannot focus a CS-Mount lens, check if you leave the 5mm C-CS adapter on the thread.</p>"},{"location":"CCTV/lens_mount.html#m12-s-mount-lens","title":"M12 (S-mount) Lens","text":"<p>Another typical lens use in CCTV is the M12 or S-Mount lens.</p> <p>M12 because the lens threat is 12mm, and S stands for Small or short. This lens is shorter or compact comparing with the C/CS-Mount lens because of the size these types of lens are popular on CCTV cameras.</p> <p></p> <p>Adapters from M12 to Raspberry Cam</p>"},{"location":"CCTV/lens_mount.html#dslr-or-mirrorless-lens-mounts","title":"DSLR or Mirrorless Lens mounts","text":"<p>Most of these mounts are related to a specific brand of camera or the type of the camera itself.</p>"},{"location":"CCTV/lens_mount.html#cine-camera-lens","title":"Cine Camera Lens","text":"<ol> <li>EF-Mount (Electronic Focus Mount).</li> <li>PL-Mount (Positive Lock Mount).</li> <li>F-Mount (Format SLR Mount).</li> </ol>"},{"location":"CCTV/lens_mount.html#photo-camera-lens-mounts","title":"Photo Camera Lens Mounts","text":"<ol> <li>A-mount (Sony 'Alpha' Series Mount) Mostly for the old model of cameras replace by E-mount.</li> <li>E-mount (Sony Mirrorless Mount).</li> <li>Z-mount (New Nikon Mirrorless Mount).</li> <li>RF-mount (New Canon EOS Mount).</li> <li>M43-mount (Micro Four Thirds Mount).</li> </ol>"},{"location":"CCTV/starvis.html","title":"STARVIS sensor","text":"<p>Sony STARVIS sensor is a back-illuminated pixel technology use in CMOS  image sensors for security camera applications providing high picture quality in the visible-light and near-infrared light regions.</p> <p>There are two versions STARVIS and STARVIS 2. STARVIS 2 is similar to STARVIS but it also has a wide dynamic range (AD12bit) of more than 8dB compared to STARVIS for the same pixel size in a single exposure and achieves high picture quality in the visible-light and near-infrared light regions.</p> <p></p>"},{"location":"CCTV/starvis.html#what-is-a-back-illuminated-cmos-sensor","title":"What is a back-illuminated CMOS sensor?","text":"<p>With a back-illuminated sensor, the light is collected by the backside where the obstacle like wires are minimum all the photo-diode receive a wider range of light which translate in high sensitivity</p> <p></p> <p>From Sony official documentation</p> <p></p> <p>From Sony official documentation</p>"},{"location":"CCTV/starvis.html#what-is-dol-hdr","title":"What is DOL-HDR?","text":"<p>The DOL-HDR or Digital Overlap High Dynamic Range is a technology for image processing of subjects with high contrast. It synthesizes different exposure conditions into a single image so that both dark and bright data can be seen at the same time.</p> <p></p> <p>From Sony official documentation</p>"},{"location":"CCTV/windows_error.html","title":"Windows error 0x800f0908","text":"<p>When downloading or changing the system language we might see an error <code>0x800f0908</code></p> <p>This is due to an error or limitation in the internet connection, it often happens if the network used is a metered network.</p> <p>A way to solve it is by unchecked the option for metered connection on the network configuration options.</p>"},{"location":"CCTV/wireshark.html","title":"WireShark","text":"<p>Wireshark displays hundreds of protocols on all major networks. Data packets can be viewed in real-time or analyzed offline.</p>"},{"location":"CCTV/wireshark.html#how-to-capture-data-packets","title":"How to capture Data Packets","text":"<p>Upon opening or launch, Wireshark will display a screen with the different available networks next to a graph ( EKG-Style) that represents the live traffic.</p> <p></p> <p>We can either start the analysis by selecting the network we want to check</p> <p></p> <p>To stop the analysis, we can click on the red square button on the top</p>"},{"location":"CCTV/wireshark.html#panels","title":"Panels","text":"<p>When the analysis starts, we will see 3 different panels, top middle, and bottom.</p> <p>To stop the analysis we can click on the red square button on the top.</p> <p></p> <p>The session:</p> <ul> <li>The packet list pane (the top section).</li> <li>The packet details pane (the middle section).</li> <li>The packet bytes pane (the bottom section).</li> </ul>"},{"location":"CCTV/wireshark.html#packet-list","title":"Packet list","text":"<p>It displays all the packages captured.</p> <ul> <li>No: This field indicates which packets are part of the same conversation. It remains blank until you select a packet.</li> <li>Time: The timestamp of when the packet was captured is displayed in this column. The default format is the number of seconds or partial seconds since this specific capture file was first created.</li> <li>Source: This column contains the address (IP or other) where the packet originated.</li> <li>Destination: This column contains the address that the packet is being sent to.</li> <li>Protocol: The packet's protocol name, such as TCP, can be found in this column.</li> <li>Length: The packet length, in bytes, is displayed in this column.</li> <li>Info: Additional details about the packet are presented here. The contents of this column can vary greatly depending on packet contents.</li> </ul> <p></p>"},{"location":"CCTV/wireshark.html#packet-details","title":"Packet Details","text":"<p>The details pane, found in the middle, presents the protocols and protocol fields of the selected packet in a collapsible format.</p> <p></p>"},{"location":"CCTV/wireshark.html#packet-bytes","title":"Packet Bytes","text":"<p>At the bottom is the packet bytes pane, which displays the raw data of the selected packet in a hexadecimal view. This hex dump contains 16 hexadecimal bytes and 16 ASCII bytes alongside the data offset.</p> <p></p>"},{"location":"CCTV/wireshark.html#how-to-use-filters","title":"How to use filters","text":"<p>On the top of the top panel, we will have a field. We can input some filters in this panel, filters will help us to find a specific message between two IPs or a specific message that uses a specific protocol.</p> <p></p>"},{"location":"CCTV/wireshark.html#common-filters","title":"Common filters","text":"Usage Filter syntax Wireshark Filter by IP ip.addr == 10.10.50.1 Filter by Destination IP ip.dest == 10.10.50.1 Filter by Source Ips ip.src == 10.10.50.1 Filter by IP range ip.addr &gt;= 10.10.50.1 and ip.addr &lt;= 10.10.50.100 Filter by Multiple Ips ip.addr == 10.10.50.1 and ip.addr == 10.10.50.100 Filter out/ Exclude IP address !(ip.addr == 10.10.50.1) Filter IP subnet ip.addr == 10.10.50.1/24 Filter by multiple specified IP subnets ip.addr == 10.10.50.1/24 and ip.addr == 10.10.51.1/24 Filter by Protocol dns http ftp ssh arp telnet icmp Filter by port (TCP) tcp.port == 25 Filter by destination port (TCP) tcp.dstport == 23 Filter by ip address and port ip.addr == 10.10.50.1 and Tcp.port == 25 Filter by URL http.host == \u201chost name\u201d Filter by time stamp frame.time &gt;= \u201cJune 02, 2019 18:04:00\u201d WiresharkMulticast filter (eth.dst[0] &amp; 1) Host name filter ip.host = hostname MAC address filter eth.addr == 00:70:f4:23:18:c4"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html","title":"ACTi URL Commands","text":""},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#description-of-url","title":"Description of URL","text":"<p>All URL is going to use the HTTP method GET, there will be two types of URLs the Type 1 URL will contain the password and user as part of the URL command, the type 2 URL won't contain the password and user, therefore it will need a different method of authentication first.</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#cgi-path","title":"CGI path","text":"<p>The two types of URLs will have different CGI format, these are defined in the firmware and cannot be changed, the Type 1 URL will have <code>/cgi-bin/</code> and Type 2 will have <code>/cgi-bin/cmd/</code>.</p> <p>Type 1 URL: <pre><code>http://ip:port/cgi-bin/system?USER=xxxx&amp;PWD=xxxx&amp;CMD\n</code></pre> Type 2 URL: <pre><code>http://ip:port/cgi-bin/cmd/system?CMD\n</code></pre></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#format-of-url","title":"Format of URL","text":"<p>Type 1 URL is considered not secure, although they are very simple and every CGI will support them <pre><code>http://ip:port/cgi-bin/CGI?USER=admin&amp;PWD=123456&amp;CMD1=VALUE1&amp;CMD2\n</code></pre> where</p> <ul> <li><code>IP</code>: the device IPv4 address.</li> <li><code>port</code>: the device's HTTP port. If it is 80, the port could be omitted.</li> <li><code>CGI</code>: CGI Program like system, mpeg4, encoder, update,...</li> <li><code>CMD1=VALUE1</code>: write command to set the VALUE1 to device's configuration associated with CMD1.</li> <li><code>CMD2</code>: a read command to get the device's configuration associated with CMD2.</li> </ul> <p>Type 2 URL is more secure than Type 1 since the password and user are encrypted int he HTTP transaction, but not all CGI support this type or URL <pre><code>http://ip:port/cgi-bin/cmd/CGI?CMD1=VALUE1&amp;CMD2\n</code></pre> The structure is pretty much the same, the only difference is in the CGI path in this case we use <code>/cgi-bin/cmd/</code> instead of <code>/cgi-bin/</code></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#multi-channel-encoders","title":"Multi-channel encoders","text":"<p>In this case, we have two different URLs, one will be the Router URL and the other will be the Video server URL, the visual difference is that the Video server URL will have a parameter <code>CHANNEL</code> right after the user and password and it is used to identify the channel we are targeting. The router URL will look just like the URLs we mentioned before</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#format-of-the-router-url","title":"Format of the Router URL","text":"<p><pre><code>http://ip:port/cgi-bin/CGI?USER=Admin&amp;PWD=123456&amp;CMD1=VALUE1&amp;CMD2\n</code></pre> or <pre><code>http://ip:port/cgi-bin/cmd/CGI?CMD1=VALUE1&amp;CMD2\n</code></pre></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#format-of-the-video-server-url","title":"Format of the Video Server URL","text":"<p><pre><code>http://ip:port/cgi-bin/CGI?USER=Admin&amp;PWD=123456&amp;CHANNEL=n&amp;CMD1=VALUE1&amp;CMD2\n</code></pre> or <pre><code>http://ip:port/cgi-bin/cmd/CGI?CHANNEL=n&amp;CMD1=VALUE1&amp;CMD2\n</code></pre> Where the <code>n</code> in the parameter <code>CHANNEL</code> will be the channel ID</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#quard-encoder-or-2ch-video-server","title":"Quard encoder or 2CH video server","text":"<p>These commands are the same as the Multi-channel encoder, but instead of the router URL we will call it the Global URL, the Global URL won't have the parameter <code>CHANNEL</code> on it, but the video server URL will have that parameter and will behave as the multi-channel encoder.</p> <p>most of quard encoders and 2CH video server are EOL by now 2020.</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#url-return-message","title":"URL Return message","text":"<p>The return message follows the HTTP standard, there are two parts to the message, these two parts are sent in one or two TCP packets  ( depending on the firmware implementation). The first par is the HTTP status header and the second part is the return message.</p> HTTP 1.0 header HTTP 1.1 header HTTP/1.0 200 OK\\r\\n HTTP/1.1 200 OK\\r\\n Content-type: text/plain\\n\\n Content-Type: text/plain\\r\\n WAN_TYPE='1'\\n Content-Length: 13\\r\\n \\r\\n WAN_TYPE='1'\\n"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#http-status-header","title":"HTTP Status Header","text":"<p>The format of the HTTP status code</p> <pre><code>HTTP/1.0 &lt;HTTP_CODE&gt; &lt;HTTP_TEXT&gt;\\r\\n\n</code></pre> <p>the most common codes will be:</p> HTTP code HTTP Text Description 200 OK Valid URL Command 400 Unauthorized Error in authentication 401 Not Found General Error"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#return-message","title":"Return message","text":"<p>There are five types of return message:</p> <ol> <li>CMD='VALUE'</li> <li>OK: CMD='VALUE'</li> <li>OK</li> <li>ERROR: CMD='VALUE'</li> <li>ERROR: Descriptions of Error</li> </ol> <p>the HTTP 200 code will be return in type 4 and 5 messages, but they are an error message, so it is important to keep that in mind and not use the HTTP code as a validator.</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#1-cmdvalue","title":"1. <code>CMD='VALUE'</code>","text":"<p>Used in the READ type of commands, the response will be the CMD value  on the request URL and a given value withing ' ', if the request contains more than one CMD the answer will list all the CMD</p> <p>Return Message for <code>URL WAN_TYPE&amp;WAN_IP</code> is: <pre><code>WAN_TYPE='1'\nWAN_IP='192.168.0.100'\n</code></pre></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#2-ok-cmdvalue","title":"2. <code>OK: CMD='VALUE'</code>","text":"<p>Used in the WRITE URL command. If the VALUE is correct, the command will be echoed back with OK: tag, follow by the CMD send and the given value within ' '. If more than one value is given the return message of every URL will be displayed.</p> <p>Return Message for <code>URL WAN_TYPE=1&amp;WAN_IP=192.168.1.100</code> is <pre><code>OK: WAN_TYPE='1'\nOK: WAN_IP='192.168.0.100'\n</code></pre></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#3-ok","title":"3. <code>OK</code>","text":"<p>Used in the ACTION URL command like <code>SAVE</code>, <code>REBOOT</code>, <code>FACTORY_DEFAULT</code>, etc. There is no value returned for this command.</p> <p>Return Message for <code>URL REBOOT</code> is <pre><code>OK\n</code></pre></p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#4-error-cmdvalue","title":"4. <code>ERROR: CMD='VALUE'</code>","text":"<p>Used in the WRITE URL command when the input argument is incorrect. the device will echo the URL command and incorrect given value. If there is more than one URL in the URL command, the return message will display all the commands, and values.</p> <p>Return Message of the URL <code>WAN_TYPE=0</code> where the range of <code>WAN_TYPE</code> is <code>1~3</code>: <pre><code>ERROR: WAN_TYPE='1'\n</code></pre> It shows the current WAN_TYPE setting in the device is 1. Return Message for <code>URL WAN_TYPE=0&amp;WAN_IP=192.168.1.100</code> is: <pre><code>ERROR: WAN_TYPE='1'\nOK: WAN_IP='192.168.0.100'\n</code></pre> The <code>WAN_TYPE</code> setting is incorrect so <code>WAN_TYPE</code> configuration is not updated, however, the <code>WAN_IP</code> setting is updated successfully.</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#5-error-description-of-error","title":"5. ERROR: Description of error","text":"<p>This is an error message display when the type 4 ERROR: CMD='VALUE' is not enough, bellow some of the most common errors:</p> Description of Error Description missing <code>USER/PWD</code> The USER or PWD command was not found in the Type1 URL bad account/password The user account name or password is incorrect in the Type1 URL. missing <code>CHANNEL</code> The CHANNEL command was not found bad <code>CHANNEL=n</code> The channel n Video Server is not active in the Multi-Channel Encoder device or the channel n is out of range in the Multi-Channel Encoder device. CMD not found The device does not support this CMD CMD is write-only The CMD is write only in the device CMD is read-only The CMD is read-only in the device not authorized The CMD is not allowed to be executed because of the lower login level. invalid parameters The input argument is incorrect in the Write-Only Command and Write Operation with a list index, like MOTION_CONFIG in ENCODER CGI no command There is no URL command in the URI. firmware image Firmware image file is corrupted or MD5 check error in firmware upgrade URLs firmware version Firmware version mismatches in firmware upgrade URLs firmware type Firmware Type error (AC/NB mismatches) in firmware upgrade URLs config image Configuration file is corrupted oem image OEM image file is corrupted profile image Camera Profile image file is corrupted profile ID Profile ID mismatches in profile upgrade URLs PTZ Image PTZ image file is corrupted 8051DNX Image 8051DNX image file is corrupted 8051THX Image 8051THX image file is corrupted internal error  There is an error internally. There might be more description of the error"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#valid-character-in-the-url-commands","title":"Valid Character in the URL Commands","text":"<p>The valid characters will depend on which part of the URL are they.</p>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#valid-characters-in-the-login-name","title":"Valid Characters in the Login Name","text":"<ol> <li>Only A~Z, a~z, 0~9, minus sign (-), underscore (_), period (.), $ and @ are allowed.</li> <li>The first character is allowed to A~Z or a~z.</li> </ol>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#valid-characters-in-login-password","title":"Valid Characters in Login Password","text":"<ol> <li>Printable characters: Started from ASCII code \\(0x21\\) to \\(0x7E\\), with the exception of these 10 reserved characters which are not allowed  <code>':', '#', '?', '/', '\\', '%', '&amp;', ''', '\"', ','</code></li> </ol>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#valid-characters-in-network-name","title":"Valid Characters in Network Name","text":"<ol> <li>Only ASCII A~Z, a~z, 0~9, minus sign (-), underscore (_), and period (.) are allowed.</li> <li>No blank or space characters are permitted as part of a name.</li> <li>The last character must not be a minus sign, underscore, or period.</li> <li>The first character is allowed to either a letter or a digit.</li> <li>No NULL string is allowed.</li> </ol>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#general-rule-of-valid-characters-in-uri","title":"General  rule of Valid Characters in URI","text":"<ol> <li>Only ASCII A~Z, a~z, 0~9, minus sign (-), underscore (_), period (.), and space ( ) characters are allowed.</li> <li>The last character must not be a minus sign, underscore, period, or space.</li> <li>The first character is allowed to either a letter or a digit.</li> <li>NULL string is allowed.</li> </ol>"},{"location":"CCTV/ACTi/ACTi_URL_Commands.html#list-of-cgi","title":"List of CGI","text":"<ul> <li>SYSTEM CGI</li> <li>ENCODER CGI</li> <li>UPDATE CGI</li> </ul>"},{"location":"Machine%20Learning/Other_key_Terminology.html","title":"Other Key Terminology (TensorFlow)","text":""},{"location":"Machine%20Learning/Other_key_Terminology.html#key-concepts-about-dataset","title":"Key concepts about dataset","text":"<p>Feature: The input(s) to our model. Examples: An input/output pair used for training (Output, are the labels we mentioned in other notes). Labels: the output of the model. Layer: A collection of nodes connected together within a neural network.</p>"},{"location":"Machine%20Learning/Other_key_Terminology.html#key-concept-about-the-model","title":"Key concept about the model","text":"<p>Model: The representation of your neural network. Dense and Fully Connected (FC): Each node in one layer is connected to each node in the previous layer. Weights and Biases: the internal variable of model. Loss: The discrepancy between the desired output and the actual output. MSE: Mean squared error, a type of loss function that counts a small number of large discrepancies as worse than a large number of small ones. Gradient Descent: An algorithm that changes the internal variables a bit at a time to gradually reduce the loss function. Optimizer: A specific implementation of the gradient descent algorithm.( There are many algorithms for this. in this course we will only use the \"Adam\" Optimizer, which stands for ADAptive with Momentum it is considered the best-practice optimizer. Learning rate: The 'step size\" for loss improvement during gradient descent. Batch: The set of examples used during training of the neural network. Epoch: A full pass over the entire training dataset. Forward pass: The computation of output values from input. Backward pass (back-propagation): The calculation of internal variable adjustments according to the optimizer algorithm, starting from the output layer and working back through each layer to the input. (it is the tunning process)</p>"},{"location":"Machine%20Learning/Other_key_Terminology.html#different-type-of-models","title":"Different type of models","text":"<p>Regression: A model that outputs a single value. For example, an estimate of a house's value. Classification: A model that outputs a probability distribution across several categories. For example, in Fashion MNIST, the output was 10 probabilities, one for each of the different types of clothing. Remember, we use Softmax as the activation function in our last Dense layer to create this probability Distribution.</p> + Classification Regression Output List of numbers that represent probabilities for each class Single Number Example Fashion MNIST Celsius to Fahrenheit Loss Spare categorical cross-entropy Mean squared error Last Layer Activation Function Softmax None"},{"location":"Machine%20Learning/Other_key_Terminology.html#key-concepts-in-the-model-and-the-dense-function","title":"Key concepts in the model and the Dense function","text":"<p>Flattening: The process of converting a 2d image into 1d vector. ReLU: An activation function that allows a model to solve nonlinear problems. Softmax: A function that provides probabilities for each possible output class. Classification: A machine learning model used for distinguishing among two or more output categories.</p> <p>A convolution is the process of applying a filter (\"kernel\") to an image. Max pooling is the process of reducing the size of the image through downsampling.</p>"},{"location":"Machine%20Learning/Other_key_Terminology.html#key-concept-about-convolutional-networks","title":"Key concept about convolutional networks","text":"<p>CNNs: Convolutional neural network, that is, a network which has at least one convolutional layer. A typical CNN also includes other types of Layers, such as pooling layers and dense layers. Convolution: The process of applying a kernel (filter) to an image. Kernel / Filter: A matrix which is smaller than the input, used to transform the input into chunks. Padding: adding pixels of some value usually 0, around the input image. Pooling: The process of reducing the size of an image through downsampling. There are several types of pooling layers. For example, average pooling converts many values into a single value by talking the average. However, maxpooling is the most common. Maxpooling: A pooling process in which many values are converted into a single value by talking the maximum value from among them. Stride:**the number of pixels to slide the kernel (filter) across the image. **Downsampling: The act of reducing the size of an image.</p>"},{"location":"Machine%20Learning/Other_key_Terminology.html#example-of-a-script-with-convolutional-and-fashion-mnist-data-set","title":"Example of  a script with convolutional and fashion MNIST data set","text":"<pre><code>#Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#import dataset\n\nfashion_mnist = keras.datasets.fashion_mnist\n(train_image, train_label), (test_image, test_labels) = fashion_mnist.load_data()\n\n#classes name ( name of the classes of clothes)\nclass_name = ['t-shirt/top','trouser','pullover','dress','coat','sandal','shirt','sneakers','bag','Ankle boot']\n\n#Explore data/ process data\ntrain_image = train_image / 255\ntest_image = test_image / 255\n\n#build a model\n#setup layer\n\nmodel = keras.Sequencial([keras.layers.Flatten(input_shape(28,28)),\n    keras.layers.Dense(128, activation=tf.np.relu),\n    keras.layers.Dense(10,activation=tf.np.softmax)\n    ])\n\n#compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\n#train the model\nmodel.fit(train_image,train_label, epochs = 5)\n\n#Evaluate accuracy\ntest_loss, test_acc = model.evaluate(test_image,test_labels)\nprint('Test accuracy: ', test_acc)\n\n#make predictions\npredictions = model.predict(test_image)\npredictions[0]\nnp.argmax(predictions[0])\ntest_labels[0]\n</code></pre>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html","title":"AI for Everyone","text":""},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#starting-an-ai-projects","title":"Starting an AI projects","text":"<ul> <li>Workflow of a project.</li> <li>Select AI project (Framework).</li> <li>Organizing data and teams for the project.</li> </ul>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#workflow-of-a-machine-learning-project","title":"Workflow of a Machine Learning project","text":"<ol> <li>Collect data.</li> <li>Train the model. (Iterate many times until achieve the result.)</li> <li>Deploy model. (Get back maintain and update.)</li> </ol>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#workflow-of-a-data-science-project","title":"Workflow of a Data Science project.","text":"<p>Unlike a machine learning project, the output of a data science project is often a set of actionable insights, a set of insights that may cause you to do things differently.</p> <ol> <li>Collect Data.</li> <li>Analyze Data. (Iterate many times to get good insights)</li> <li>Suggest Hypotheses/actions (Deploy changes, re-analyze new data)</li> </ol>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#build-a-ai-company","title":"Build a AI company","text":"<p>Case Study: Smart speaker To get a better idea about what is need it to build a AI company it is important to get and idea of what is need it in an AI system.</p> <p>Steps to process a command 1. Trigger word/wakeword detection (\"Hello Device\"). 2. Speech recognition. 3. Intent recognition. 4. Execute joke.</p> <p></p> <p>Case study: Self-driving car</p> <p>the key steps: 1. Car detection. 2. Pedestrian detection. 3. Motion Planning.</p> <p></p> <p>Example roles of a AI team</p> <p>This roles might have other titles but the task that they perform will be similar:</p> <ul> <li>Software Engineer:  those who develop the business logic, like the joke execution or those to ensure self-driving reliability.</li> <li>Machine Learning Engineer: those that create the model, that take data A and produce result B.</li> <li>Machine Learning Researcher: extend state-of the art in ML.</li> </ul> <p>Note: the last two roles can be, in some cases, just one and it is called \"Applied ML Scientist\"</p> <ul> <li>Data Scientist: Examine data and provide insights, make presentation to team and executives.</li> <li>Data Engineer: Organize data, make sure data is  saved in a easily accessible, secure and cost effective way.</li> <li>AI Product Manager: Help decide what to build; what's feasible and valuable.</li> </ul>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#ai-transformation-playbook","title":"AI transformation Playbook","text":"<p>to create or move towards AI the company might need to restructure itself.</p> <p>1. Execute pilot projects to gain momentum. * More important for the initial project to succeed rather than be the most valuable. * Show traction within 6-12 months. * Can be in-house or outsourced.</p> <p>2. Build an in-house AI team</p> <p></p> <p>It is better have a dedicated unit to work in this projects that a Business unit aside.</p> <p>3. Provide broad AI Training</p> Role What They Should learn Executives and senior business leaders 1. What AI can do for your enterprise. 2. AI strategy. 3. Resource allocation. Leaders of devisions working on AI projects 1. Set project direction (technical and business diligence) 2. Resource allocation. 3.Monitor Progress AI engineer trainees 1. Build and ship AI software. 2.Gather data. 3. Execute on specific AI projects <p>4 Develop an AI strategy</p> <ul> <li>Leverage AI to create an advantage specific to your industry sector.</li> <li>Design strategy aligned with the  \"Virtuous Cycle of AI\".</li> </ul> <p></p> <ul> <li>Consider Creating a data strategy ( strategic data acquisition, unified data warehouse).</li> </ul> <p>5. Develop internal and external communications</p> <ul> <li>Investor relations.</li> <li>Government relations.</li> <li>Consumer/user education.</li> <li>Talent/recruitment.</li> <li>Internal Communications.</li> </ul>"},{"location":"Machine%20Learning/AI%20for%20Everyone/AI_for_Everyone.html#some-application-of-ai","title":"Some application of AI","text":"<p>watch the video here Video about AI application</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html","title":"Problem Framing","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#common-ml-problem","title":"Common ML Problem","text":"<p>In basic terms, ML is the process of training a piece of software, called a model, to make useful predictions using a data set.</p> <p>There are two common paradigms mentioned in ML, Supervised and Unsupervised training.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#what-is-supervised-learning","title":"What is Supervised Learning?","text":"<p>Supervised learning is a type of ML where the model is provided with labeled training data, this means that we feed the model with features ( \\(x\\) If you want) and the answer or so call label (\\(y\\)) and it will learn the relationship between these two.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#what-is-unsupervised-learning","title":"What is Unsupervised Learning?","text":"<p>In unsupervised learning, the goal is to identify meaningful patterns in the data. To accomplish this, the machine must learn from an unlabeled data set. In other words, the model has no hints how to categorize each piece of data and must infer its own rules for doing so.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#types-of-ml-problems","title":"Types of ML Problems","text":"<p>There are several subclass of ML, depending of the prediction task</p> type of ML Problem Description Example Classification Pick one of N labels Cat, dog, horse, or bear Regression Predict numerical values Click-through rate Clustering Group similar examples Most relevant documents (unsupervised) Association rule learning Infer likely association patterns in data If you buy hamburger buns, you're likely to buy hamburgers (unsupervised) Structured output Create complex output Natural language parse trees, image recognition bounding boxes Ranking Identify position on a scale or status Search result ranking"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#the-ml-mindset","title":"The ML Mindset","text":"<p>In traditional software, you can trick, tune and reason to find the design that fit the requirements, but in machine learning, more often than not, it will be necessary to experiment to find the correct or rather the workable model.</p> <p>ML produce models that interpret signals in a different way ( compare with humans), for example a Neural network might interpret the words \"tree\" liek something like this <code>[0.37,0.24,0.2]</code> and \"car\" as <code>[0.1,0.78, 0.9]</code> the Neural network might use this interpretation to do an accurate translation or a sentiment analysis, but humans looking to this embeddings would find them very hard to understand, this can make machine learning difficult but not impossible for humans to evaluate and understand.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#experimental-design-prime","title":"Experimental Design Prime","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#get-comfortable-with-some-uncertainty","title":"Get Comfortable with Some Uncertainty","text":"<p>One of the difference between ML and the traditional programming, is that in traditional programming you will end with a set of parameters that you understand and you know how they should behave, but with ML, the non-coding work can be very complicated, but the code usually far less code. you might get the code correctly and expect a result, but the result you will find suitable might be obtain after several changes and tunning that you might not fully understand.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#scientific-method","title":"Scientific Method","text":"<p>It is useful to think ML process as an experiment where we run test after test to converge on a workable model.</p> Step Example 1. Set the research goal. I want to predict how heavy traffic will be on a given day 2. Make a hypothesis. I think the weather forecast is an informative signal. 3. Collect the data. Collect historical traffic data and weather on each day. 4. Test your hypothesis. Train a model using this data. 5. Analyze your results. Is this model better than existing systems? 6. Reach a conclusion. I should (not) use this model to make predictions, because of X, Y, and Z. 7. Refine hypothesis and repeat. Time of year could be a helpful signal."},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#identifying-good-problems-for-ml","title":"Identifying Good Problems for ML","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#clear-use-case","title":"Clear Use Case","text":"<p>Start with the problem, not the solution. Make sure you aren't treating ML as a hammer for your problems.</p> <p>Ask yourself the following question in order:</p> <ol> <li>What problem is my product facing?</li> <li>Would it be a good problem for ML?</li> </ol>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#know-the-problem-before-focusing-on-the-data","title":"Know the Problem Before Focusing on the Data","text":"<p>Be prepared to have your assumptions challenged.</p> <p>If you understand the problem clearly, you should be able to list some potential solutions to test in order to generate the best model. Understand that you will likely have to try out a few solutions before you land on a good working model.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#predictive-power","title":"Predictive Power","text":"<p>You should not try to make ML do the hard work of discovering which features are relevant for you. If you simply throw everything at the model and see what looks useful, your model will likely wind up overly complicated, expensive, and filled with unimportant features.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#predictions-vs-decisions","title":"Predictions vs. Decisions","text":"<p>Make sure your predictions allow you to take a useful action. For example, a model that predicts the likelihood of clicking certain videos could allow a system to prefetch the videos most likely to be clicked.</p> <p>Conversely, a model that predicts the probability that someone will click \"thumbs down\" for a specific YouTube video might be interesting, but we can't do anything useful with that knowledge.</p> Prediction Decision What video the learner wants to watch next. Show those videos in the recommendation bar. Probability someone will click on a search result. If P(click) &gt; 0.12, prefetch the web page. What fraction of a video ad the user will watch. If a small fraction, don't show the user the ad."},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#success-and-failure-metrics","title":"Success and Failure Metrics","text":"<p>How I will measure the success or failure of the model, the success or failure metric are different than metrics such as precision, recall, etc, rather the specific anticipated outcome. As an example, let say i want a video recommendations model, the success metric might be \"A success metric is the number of popular videos properly predicted by the model. Success means predicting 95% of the most popular videos as measured by watch time within 28 days of being uploaded.\" and the failure metric will be \"Failure means the number of popular videos properly predicted is no better than current heuristics\"</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#are-the-metrics-measurable","title":"Are the Metrics Measurable?","text":"<p>Ask the following:</p> <ul> <li>How will you measure your metrics?</li> <li>When can you measure your metrics?</li> <li>How long will it take to know whether your new ML system is a success or failure?</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#what-output-would-you-like-the-ml-model-to-produce","title":"What Output Would You like the ML Model to Produce?","text":"<p>Revisiting this table, which type of output are you looking for: a number, a label, a cluster, or something else?</p> Type of ML Problem Description Example Classification Pick one of N labels cat, dog, horse, or bear Regression Predict numerical values click-through rate Clustering Group similar examples most relevant documents (unsupervised) Association rule learning Infer likely association patterns in data If you buy hamburger buns, you're likely to buy hamburgers (unsupervised) Structured output Create complex output natural language parse trees, image recognition bounding boxes"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#heuristics","title":"Heuristics","text":"<p>How might you solve your problem without ML?</p> <p>Suppose you need to deliver a product tomorrow, and you have only time enough to hard-code the business logic. You could try a heuristic (non-ML solution) like the following:</p> <p>Example Consider people who uploaded popular videos in the past. Assume that new videos uploaded by these people will also become popular.</p> <p>The preceding heuristic might not be the world\u2019s greatest heuristic, but it does provide a baseline. Never launch a fancy ML model that can't beat a heuristic. The exercise of making a heuristic often will help you identify good signals in your ML model.</p> <p>Non-ML solutions can sometimes be simpler to maintain than ML solutions.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#formulate-yourproblem-as-an-ml-problem","title":"Formulate YourProblem as an ML Problem","text":"<p>We are to follow the suggested approach for framing the ML problem:</p> <ol> <li>Articulate your problem.</li> <li>Start simple.</li> <li>Identify Your Data Sources.</li> <li>Design your data for the model.</li> <li>Determine where data comes from.</li> <li>Determine easily obtain inputs.</li> <li>Ability to Learn.</li> <li>Think About Potential Bias.</li> </ol>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#articulate-your-problem","title":"Articulate Your Problem","text":"<p>There are several subtype of classification an regression, the following flowchart can give help to define which can be use.</p> <p></p> <p></p> <p>Our problem is best framed as:</p> <ul> <li>Binary classification</li> <li>Unidimensional regression</li> <li>Multi-class single-label classification</li> <li>Multi-class multi-label classification</li> <li>Multidimensional regression</li> <li>Clustering (unsupervised)</li> <li>Other (translation, parsing, bounding box id, etc.)</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#start-simple","title":"Start Simple","text":"<p>Can you simplify your problem?</p> <p>First, simplify your modeling task. State your given problem as a binary classification or a unidimensional regression problem</p> <p>Then, for that task, use the simplest model possible. A simple model is easier to implement and understand. Once you have a full ML pipeline, you can iterate on the simple model with greater ease.</p> <p></p> <p>The biggest gain from ML tends to be the first launch, since that's when you can first leverage your data. Further tuning still gives wins, but, generally, the biggest gain is at the start so it's good to pick well-tested methods to make the process easier.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#identify-your-data-sources","title":"Identify Your Data Sources","text":"<p>Provide answers to the following questions about your labels:</p> <ul> <li>How much labeled data do you have?</li> <li>What is the source of your label?</li> <li>Is your label closely connected to the decision you will be making?</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#design-your-data-for-the-model","title":"Design your Data for the Model","text":"<p>Identify the data that your ML system should use to make predictions (input -&gt; output), If an input is not a scalar or 1D list, consider whether that is the best representation for your data.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#determine-where-data-comes-from","title":"Determine Where Data Comes From","text":"<p>Assess how much work it will be to develop a data pipeline to construct each column for a row. When does the example output become available for training purposes?</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#determine-easily-obtained-inputs","title":"Determine Easily Obtained Inputs","text":"<p>Pick 1-3 inputs that are easy to obtain and that you believe would produce a reasonable, initial outcome.</p> <p>Which inputs would be useful for implementing heuristics mentioned previously?</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#ability-to-learn","title":"Ability to Learn","text":"<p>Will the ML model be able to learn? List aspects of your problem that might cause difficulty learning. For example:</p> <ul> <li>The data set doesn't contain enough positive labels.</li> <li>The training data doesn't contain enough examples.</li> <li>The labels are too noisy.</li> <li>The system memorizes the training data, but has difficulty generalizing to new cases</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/Problem_Framing.html#think-about-potential-bias","title":"Think About Potential Bias","text":"<p>Many dataset are biased in some way. These biases may adversely affect training and the predictions made.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/First_steps_TensorFlow.html","title":"First steps TensorFlow","text":"<p>TensorFlow provide different type of toolkits to construct models in a variety of levels of abstraction. It can be a lower_level  with mathematical operations or a higher level with predefine architectures.</p> <p></p> Tollkit Description Estimator (tf.estimator) High-level, OOP API. tf.layers/tf.losses/tf.metrics Libraries for common model components. TensorFlow Lower-level APIs <p>Similar to how Python has and interpreter that can run in multiple hardware to run python code, TensorFlow can run the graph on multiple hardware platforms, including CPU, GPU, and TPU.</p> <p>Here will be an example of pseudo code of a linear classification program using tf.estimator</p> <pre><code>import tensorflow as tf\n\n# Set up a linear classifier.\nclassifier = tf.estimator.LinearClassifier(feature_columns)\n\n# Train the model on some example data.\nclassifier.train(input_fn=train_input_fn, steps=2000)\n\n# Use it to predict.\npredictions = classifier.predict(input_fn=predict_input_fn)\n</code></pre> <p>Tensor: The primary data structure in TensorFlow programs. Tensors are N-dimensional (where N could be very large) data structures, most commonly scalars, vectors, or matrices. The elements of a Tensor can hold integer, floating-point, or string values.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/First_steps_TensorFlow.html#common-hyperparameter-in-machine-learning","title":"Common hyperparameter in Machine Learning","text":"<p>Many of the coding exercises contain the following hyperparameters:</p> <ul> <li>steps, which is the total number of training iterations. One step calculates the loss from one batch and uses that value to modify the model's weights once.</li> <li>batch size, which is the number of examples (chosen at random) for a single step. For example, the batch size for SGD is 1.</li> </ul> <p>The following formula applies:</p> \\[ total\\ number\\ of\\ trained\\ examples = batch\\ size * steps \\]"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html","title":"Framing","text":"<p>Supervised machine learning: ML systems learn how to combine input to produce useful predictions on never-before-seen data.</p> <p>the fundamental machine learning terminology</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#key-ml-terminology","title":"Key ML Terminology","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#label","title":"Label","text":"<p>It is the thing we're predicting, the \\(y\\) variable in a lineal regression. It can be the future price of the wheat, kind of animal shown in a picture, just about anything.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#features","title":"Features","text":"<p>A Feature is a input variable, the \\(x\\) in a simple linear regression. A ML project might have several \\(x\\) depending of the complexity of the project.</p> \\[ x_1, x_2,...,x_n \\] <p>Lets take a spam detector as an example, the features include the following:</p> <ul> <li>words in the email text</li> <li>sender's address</li> <li>time of day the email was sent</li> <li>email contains the phrase \"one weird trick\"</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#examples","title":"Examples","text":"<p>An Example  is a particular instance of Data, this data can be represented as x, ( were x can be a vector), we have to categories:</p> <ul> <li>Labeled examples</li> <li>Unlabeled examples</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#labeled-examples","title":"Labeled Examples","text":"<p><code>labeled examples: {features, labels}: (x,y)</code></p> <p>use label example to train the model, for the example of the spam detector , the label example will be those mails mark as \"spam\" or \"not spam\".</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#unlabeled-examples","title":"Unlabeled Examples","text":"<p><code>unlabeled examples: {features, ?}: (x,?)</code></p> <p>once the model is trained using the label examples, we can use the model to predict the labels of the unlabeled examples.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#models","title":"Models","text":"<p>It defines the relationship between features and labels. The main phases of the model's life are:</p> <ul> <li> <p>Training: means creating or learning the model, in this phase the label example are use to feed the model, so it  will learn the relationship between features and labels.</p> </li> <li> <p>Inference: means apply the trained model to the unlabeled example,  in other words, it is use the trained model to make a prediction, if the example are \\(x\\) the prediction will be \\(y\\).</p> </li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Framing.html#regressions-vs-classifications","title":"Regressions vs Classifications","text":"<p>Regression models are used to predict continues values, for example, given a temperature in Celsius what is the equivalent in Fahrenheit, or:</p> <ul> <li>What is the value of a house in California?</li> <li>What is the probability that a  user click on this ad?</li> </ul> <p>Classification models are used to predict discrete values, for example:</p> <ul> <li>Is a given email message Spam or not Spam?</li> <li>Is this an image of a dog, a cat or a hamster?</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Intro_to_pandas.html","title":"Intro to pandas","text":"<p>pandas is a column-oriented data analysis API</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Intro_to_pandas.html#basic-concepts","title":"Basic Concepts","text":"<p>first we need to import it</p> <pre><code>from __future__ import print_function\n\nimport pandas as pd\npd.__version__\n</code></pre> <p>The primary data structure in pandas are inmplemented in two classes:</p> <ul> <li>DataFrame, similar to a relational data table, row and columns</li> <li>Series, single column, DataFrame contains one or more Series and a name for each Series.</li> </ul> <p>for example a Series will be:</p> <pre><code>pd.Series(['San Fransisco','San Jose', 'Sacramento'])\n</code></pre> <p>And DataFrame can be created similar to <code>dict</code> in this case we will have the key, a <code>String</code> that serve as column name, and the series that will be the content, if we have more than one series  and this series dont mach the length, missing values are filled with special <code>NA/NaN</code></p> <pre><code>city_names = pd.Series(['San Fransisco','San Jose', 'Sacramento'])\npopulation = pd.Series([852469, 1015785, 485199])\n\npd.DataFrame({'City name': city_names, 'Population': population})\n</code></pre> <p></p> <p>we can load information from a file directly to a DataFrame</p> <p><pre><code>california_housing_dataframe = pd.read.csv(\"https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv\", sep = ',')\n</code></pre> Now to display this information we can use different ways:</p> <pre><code>california_housing_dataframe.describe()\ncalifornia_housing_dataframe.head()\n</code></pre> <p><code>describe()</code> will display some statistics about this DataFrame, and <code>head()</code>display few of the first records, here is what we see with <code>head()</code></p> <p></p> <p>now we can use the information that we load to the DataFrame to create a graph, we are going to use <code>hist()</code>:</p> <pre><code>california_housing_dataframe.hist('housing_median_age')\n</code></pre> <p></p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Intro_to_pandas.html#accessing-data","title":"Accessing Data","text":"<p>To access the data on the DataFrame we can use familiar dict/list operations:</p> <pre><code>cities = pd.DataFrame({'City name': city_names, 'Population': population})\nprint(type(cities['City name']))\n# &lt;class 'pandas.core.series.Series'&gt;\ncities['Ciy name']\n# 0    San Francisco\n# 1         San Jose\n# 2       Sacramento\n# Name: City name, dtype: object\n</code></pre> <p>in the code above we access the entire Series, now we can access a single item of that series</p> <pre><code>print(type(cities['city name'][1]))\n# &lt;type 'str'&gt;\ncities['city name'][1]\n# 'San Jose'\n</code></pre> <p>or</p> <pre><code>print(type(cities[0:2]))\n# &lt;class 'pandas.core.frame.DataFrame&gt;\ncities[0:2]\n#'  City name   Population\n# 0 San Francisco   852469\n# 1 San Jose    1015785\n</code></pre>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Intro_to_pandas.html#manipulating-data","title":"Manipulating Data","text":"<p>We can use the python arithmetics to interact with the pandas data types</p> <pre><code>population / 1000.\n</code></pre> <p>we can use series as arguments of a Numpy function</p> <pre><code>import numpy as np\n\nnp.log(population)\n</code></pre> <p></p> <p>In similar to how in python we use <code>map()</code> to perform a transformation of a set of data, we can use <code>Series.apply()</code> and <code>lambda</code> as arguments</p> <p><pre><code>population.apply(lambda val:val&gt; 1000000)\n</code></pre> in this case we will get back true or false if the population value of a city is bigger than \\(1000000\\)</p> <p></p> <p>to modify DataFrames we can do it in a easy way</p> <pre><code>cities['Area square miles'] = pd.Series([46.87, 176.53, 97.92])\ncities['Population density'] = cities['Population'] / cities['Area square miles']\ncities\n#    City name  Population  Area square miles   Population density\n# 0 San Francisco   852469  46.87                18187.945381\n# 1 San Jose        1015785 176.53               5754.177760\n# 2 Sacramento      485199  97.92                4955.055147\n</code></pre>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Intro_to_pandas.html#indexes","title":"Indexes","text":"<p>Both Series and DataFrame objects also define an index property that assigns an identifier value to each Series item or DataFrame row.</p> <p>By default, at construction, pandas assigns index values that reflect the ordering of the source data. Once created, the index values are stable; that is, they do not change when data is reordered.</p> <pre><code>city_names.index\n# RangeIndex(start=0, stop=3, step=1)\ncities.index\n# RangeIndex(start=0, stop=3, step=1)\n</code></pre> <p>Call DataFrame.reindex to manually reorder the rows. For example, the following has the same effect as sorting by city name:</p> <p><pre><code>cities.reindex([2, 0, 1])\n</code></pre> </p> <p>Reindexing is a great way to shuffle (randomize) a DataFrame. In the example below, we take the index, which is array-like, and pass it to NumPy's random.permutation function, which shuffles its values in place.</p> <pre><code>cities.reindex(np.random.permutation(cities.index))\n</code></pre> <p></p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html","title":"Linear Regression, Training and loss","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#lineal-regression","title":"Lineal Regression","text":"<p>Linear regression is a method for finding the straight line or hyperplane that best fits a set of points.</p> <p>As an example, we can use the relationship between the temperature and the cripts-per-minutes of crickets</p> <p></p> <p>As expected, the plot shows the temperature rising with the number of chirps. the relationship between chirps and temperature is linear, you could draw a single straight line like the following to approximate this relationship:</p> <p></p> <p>the line doesn't pass through every dot, but the line does clearly show the relationship between chirps and temperature. Using the equation for a line:</p> \\[  y = mx + b \\] <p>where:</p> <ul> <li>\\(y\\) is the temperature Celsius - the vale the model need to predict</li> <li>\\(m\\) is the slope of the line</li> <li>\\(x\\) is the number of chirp per minute</li> <li>\\(b\\) is the y-intercept</li> </ul> <p>in the field of machine learning the lineal regression formula change to:</p> \\[  y' = b_1 + w_1x_1 \\] <p>where:</p> <ul> <li>\\(y'\\) is the predicted label (the desired output)</li> <li>\\(b\\) is the bias, the y-intercept (sometimes refer as \\(w_0\\))</li> <li>\\(w_1\\) is the weight of feature 1.</li> <li>\\(x_1\\) is a feature (a known input)</li> </ul> <p>To infer (predict) the temperature \\(y'\\) for a new chirps-per-minute \\(x_1\\) value, just substitute the \\(x_1\\) value into this model.</p> <p>Although this model uses only one feature, a more advance model might rely on multiple features, each having a separate weight (\\(w_2\\),\\(w_3\\), etc.). so a model that relies on three features might look as follows:</p> \\[  y' = b_1 + w_1x_1 + w_2x_2 + w_3x_3 \\]"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#training-and-loss","title":"Training and Loss","text":"<p>Training a model simply means learning good values for all the weights and the bias from labeled examples, in this case we talk about supervised learning in this case we want to find a model that minimize loss, this is call empirical risk minimization.</p> <p>We can see loss like a penalty for a bad prediction, this number indicate  how bad the model's prediction was on a single example.</p> <p>Here:</p> <ul> <li>the arrows represent loss.</li> <li>the blue line represent prediction.</li> </ul> <p></p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#squared-loss-a-popular-loss-function","title":"Squared loss: a popular loss function","text":"<p>Most of the Lineal regression models will use the loss function called squared loss (\\(L_2 loss\\)), for the example above (the two lineal function side by side) the squared loss will be</p> \\[ = (observation - prediction(x))^2 \\] \\[ = ( y - y' )^2 \\] <p>Mean square error (MSE) is the average squared loss per example over the whole dataset.</p> \\[ MSE = \\frac{1}{N} \\sum_{(x,y)\\in D} (y - prediction(x))^2 \\] <p>Where:</p> <ul> <li>\\((x,y)\\) is an example in which:<ul> <li>\\(x\\) is the set of features that the model used to make prediction</li> <li>\\(y\\) is the example's label</li> </ul> </li> <li>\\(prediction(x)\\) is a function of the weights and bias in combination with the set of features \\(x\\)</li> <li>\\(D\\) is a dataset containing many examples and labels, which are \\((x,y)\\) pairs.</li> <li>\\(N\\) is the number of examples in \\(D\\)</li> </ul>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#important-concepts","title":"Important Concepts","text":""},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#bias","title":"Bias","text":"<p>An intercept or offset from an origin. Bias (also known as the bias term) is referred to as b or w0 in machine learning models. For example, bias is the b in the following formula:</p> \\[ y' = b + w_1x_1 + w_2x_2 + ... + w_nx_n \\]"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#inference","title":"Inference","text":"<p>In machine learning, often refers to the process of making predictions by applying the trained model to unlabeled examples. In statistics, inference refers to the process of fitting the parameters of a distribution conditioned on some observed data.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#weight","title":"Weight","text":"<p>A coefficient for a feature in a linear model, or an edge in a deep network. The goal of training a linear model is to determine the ideal weight for each feature. If a weight is \\(0\\), then its corresponding feature does not contribute to the model.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Linear%20regression.html#loss","title":"Loss","text":"<p>A measure of how far a model's predictions are from its label. Or, to phrase it more pessimistically, a measure of how bad the model is. To determine this value, a model must define a loss function. For example, linear regression models typically use mean squared error for a loss function, while logistic regression models use Log Loss.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Reducing_Loss.html","title":"Reducing Loss","text":"<p>Previously, we mentioned the concept of loss, now we are going to see how ML model iteratively reduce the loss.</p> <p>the figure suggest the iterative trial-and-error process that machine learning algorithms use to train a model:</p> <p></p> <p>This iterative approach is use in ML, and basically will work as a Trial and Error, the machine will guess a number, it will calculate the loss and will make adjustment to the wight and bias accordingly. This iterative strategy prevalent in machine learning, primary because they scale so well to large data sets.</p> <p>The \"model\" take one or more feature as input and return one prediction \\(y'\\) as output:</p> \\[ y' = b + w_1x_1 \\] <p>For lineal regression problems the values to start are not important, in this example we can pick, \\(b = 0\\), \\(w_1 = 0\\), and assuming the first feature value is 10, the prediction yields:</p> \\[ y' = 0 + 0(10) y' = 0 \\] <p>So \\(y'\\) will be the prediction. The \"Compute Loss\" part of the diagram is the loss function that the model use. Suppose we use the squared loss function. The loss function takes in two inputs values:</p> <ul> <li>\\(y'\\): The model's prediction for feature x.</li> <li>\\(y\\): The correct label corresponding to feature x.</li> </ul> <p>Finally the last part of the diagram the \"Compute parameter updates\" is here where the ML system examines the value of the loss function and generate new values for \\(b\\) and \\(w_1\\), for the moment less assume that the job of this box is to provide new values for the next iteration, and the learning continue iterating until the algorithm discovers the model parameters with the lowest possible loss. Usually, we will iterate until the loss stop changing or at least changes extremely slowly. when that happen, we say that the model has converged.</p> <p>A Machine Learning model is trained by starting with an initial guess for the weights and bias and iteratively adjusting those guesses until learning the weights and bias with the lowest possible loss.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Reducing_Loss.html#gradient-descent","title":"Gradient Descent","text":"<p>in the first diagram we have a box called \"Compute parameter updates\", lets suppose we have the time to calculate all the possible values of \\(w_1\\) for the type of regression exercises mentioned until now, the resulting plot of loss vs \\(w_1\\) will be:</p> <p></p> <p>For this type of bowl-shape problems is easier to find the minimum loss, in order to make efficient the process we can use a mechanism called gradient descent instead of calculate the loss function for every single \\(w_1\\) point.</p> <p>The first step will be to pick a starting value, the starting value is not important at this point, then the algorithm calculate the gradient of the loss at that point, the result will be a derivative(slope) of the curve that will tell you how close or far is this point from the minimum loss point (or the converge point).</p> <p>The gradient is a vector, thus has \"a direction\", and \" a Magnitude\", the gradient points in the direction where the loss increase, so the gradient descent algorithm points to the direction where the loss is reduce.</p> <p></p> <p>To determine the next point along the loss function curve, the gradient descent algorithm adds some fractions of the gradient's magnitude to the stating point.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Reducing_Loss.html#learning-rate","title":"Learning Rate","text":"<p>The Gradient descent algorithm multiply the gradient by a scalar knows as the Learning Rate or Step size  to determinate the next point, For example, if the gradient magnitude is 2.5 and the learning rate is 0.01, then the gradient descent algorithm will pick the next point 0.025 away from the previous point.</p> <p>it is important to find the right Learning rate to don't overshot the minimum or a so small learning rate that will take for ever reach the converge point.</p> <p></p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Reducing_Loss.html#stochastic-gradient-descent","title":"Stochastic Gradient Descent","text":"<p>a batch is the total number of examples you use to calculate the gradient in a single iteration, A large data set with randomly sampled examples probably contains redundant data. In fact, redundancy becomes more likely as the batch size grows. Some redundancy can be useful to smooth out noisy gradients, but enormous batches tend not to carry much more predictive value than large batches.</p> <p>By choosing examples at random from our data set, we could estimate a big average from a much smaller batch Stochastic gradient descent (SGD) takes this idea to the extreme--it uses only a single example (a batch size of 1) per iteration. Given enough iterations, SGD works but is very noisy. The term \"stochastic\" indicates that the one example comprising each batch is chosen at random.</p> <p>Mini-batch stochastic gradient descent (mini-batch SGD) is a compromise between full-batch iteration and SGD. A mini-batch is typically between 10 and 1,000 examples, chosen at random. Mini-batch SGD reduces the amount of noise in SGD but is still more efficient than full-batch.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Training_Test_sets.html","title":"Training Test sets","text":"<p>In most of the ML project we will have to deal with datasets, this dataset in an ideal situation will be divided or split in:</p> <ul> <li>training set: a subset to train a model</li> <li>test set: a subset to test the trained model</li> </ul> <p></p> <p>It is important to be sure that the test set meet the following criteria:</p> <ul> <li>Is large enough to wield statistically meaningful results.</li> <li>Is representative of the data set as a whole. do not pick a test set with different characteristics than the training set.</li> </ul> <p>Important to know that one never train on test data, otherwise we will get close to 100% accuracy  or surprisingly good results, that are not totally true.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Training_Test_sets.html#overfitting","title":"Overfitting","text":"<p>Creating a model that matches the training data so closely that the model fails to make a correct predictions on new data.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Training_Test_sets.html#training-set","title":"Training set","text":"<p>The subset pf the dataset used to train a model</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Training_Test_sets.html#test-set","title":"Test set","text":"<p>the subset of the dataset use to test your model after the model has gone through initial vetting by the validation set.</p>"},{"location":"Machine%20Learning/Google%20Crash%20Course/ML%20Concepts/Training_Test_sets.html#validation-set","title":"Validation set","text":"<p>A subset of the dataset -disjoin from the training g set- used in validation</p> <p>An approach of Training data and test data is certainly a good idea, although not the best in some situations, It will be better if the data can be spitted in 3 different sets, the Training set, Validation Set and Test set.</p> <p>Using the validation set to evaluate results from the training set. Then use the test set to double-check your evaluation after the model has \"passed\" the validation set will be a more efficient approach.</p> <p></p> <p>few things to take in count in this model:</p> <ol> <li>Pick the model that does best on the validation set</li> <li>Double-check that model against the test set.</li> </ol>"},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html","title":"Twitter Sentiment Analyzer","text":"<p>There are two sources for this project:</p> <ol> <li>Twitter Sentiment Analysis - Learn Python for Data Science #2 by Siraj Raval</li> <li>How to build a twitter sentiment Analyzer using TextBlob</li> </ol> <p>In this case we are going to use TextBlob</p> <p>Now, what is sentiment analysis, it is the process of determining whether a piece of writing is positive, negative or neutral, there are several ways to do this sentiment analysis, the two more common approaches will be:</p> <ol> <li>Lexicon-base model</li> <li>Machine Learning-based Method</li> </ol> <p>In a really shallow description/definition, Lexicon is a method that will list the worlds as positive and negative, e.g 'nice',+2, 'good',+1,'terrible',-1.5), The algorithm will find all the words and combine individual results and provide a result base in that value.</p>"},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html#twitter-api","title":"Twitter API","text":"<p>First, we will need to register the app in twitter in order to get the various keys associated with the API, there will be 4 keys:</p> <ul> <li><code>consumer_key</code></li> <li><code>consumer_key_secret</code></li> <li><code>access_token</code></li> <li><code>access_token_secret</code></li> </ul> <p>In order to continue we will need to install two packages, tweepy and textblob, we can do this using pip,</p> <p><pre><code>pip install tweepy\n</code></pre> with this package we will handle the Twitter API</p> <pre><code>pip install textblob\n</code></pre> <p>and with this will make the sentiment analysis. Once we have the packages we can start the code, first we need to import the packages</p> <pre><code>import tweepy\nfrom textblob import TextBlob\n</code></pre> <p>now, we assigned the keys to variable to pass it later in the code</p> <pre><code>consumer_key = \u2018[consumer_key]\u2019\nconsumer_key_secret = \u2018[consumer_key_secret]\u2019\naccess_token = \u2018[access_token]\u2019\naccess_token_secret = \u2018[access_token_secret]\u2019\n</code></pre>"},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html#tweepy","title":"Tweepy","text":"<p>Tweepy support OAuth authentication, this is handle by the class <code>tweepy.OAuthHandler</code>, An instance of <code>OAuthHandler</code> must be created passing the consumer token and the secret. Next, on this instance, we will call a function <code>set_access_token</code> by passing the <code>access_token</code> and <code>access_token_secret</code>. Finally we create and instance of the api with the tweepy function <code>API()</code></p> <p><pre><code>auth = tweepy.OAuthHandler(consumer_key,consumer_key_secret)\nauth.set_access_token(access_token,access_token_secret)\napi = tweepy.API(auth)\n</code></pre> the next step will be to find the public tweets related to a topic, in this case we use the method <code>search</code> of the API.</p> <pre><code>public_tweet = api.search('Dogs')\n</code></pre>"},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html#sentiment-analysis","title":"Sentiment Analysis","text":""},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html#textblob","title":"TextBlob","text":"<p>TextBlob is a library Natural Language Processing (NLP).</p>"},{"location":"Machine%20Learning/ML%20script%20or%20projects/Twitter_sentiment_Analyzer.html#sentiment-analysis_1","title":"Sentiment analysis","text":"<p>As a result of the sentiment analysis we will receive a tuple (polarity, subjectivity). The polarity score is a float within a range of [-1.0,1.0]. The subjectivity is a float within the range [0.0,1.0] where 0.0 is very objective and 1.0 is very subjective.</p> <p>so now we are going to check each tweeter in our <code>public_tweets</code> variable</p> <pre><code>for tweet in public_tweets:\n    print(tweet.text)\n    analysis = TextBlob(tweet.text)\n    print(analysis.sentiment)\n    if analysis.sentiment[0]&gt;0:\n        print('positive')\n    elif analysis.sentiment[0]&lt;0:\n        print('Negative')\n    else:\n        print('Neutral')\n</code></pre> <p>here the complite script:</p> <pre><code>import tweepy\nfrom textblob import TextBlob\n\nconsumer_key = 'xcrKGTL1FWhBB5si7xNrxpxVL'  # this is a place holder not the real key\nconsumer_key_secret = '8WrC0ukU0ejs9E5eblGlCtJTrLVMsLeXwj7cZCSMqiL3ke67SP' # this is a place holder not the real key\n\naccess_token = '90495695-UOx9C6Zl1l2U2xFjw2LitDLOXu6aylWwf0p4UDQDA' # this is a place holder not the real key\naccess_token_secret ='WXFqNV5Da8hwwh5oIfUXhsBKb9ouvE6gQCZ3fIgQLtdm2' # this is a place holder not the real key\n\n\n\n# set the OAuth authentication\n\nauth = tweepy.OAuthHandler(consumer_key,consumer_key_secret)\nauth.set_access_token(access_token,access_token_secret)\n\napi = tweepy.API(auth)\n\n\npublic_tweets = api.search('Taiwan')\nfor tweet in public_tweets:\n    print(tweet.text)\n    analysis = TextBlob(tweet.text)\n    print(analysis.sentiment)\n    if analysis.sentiment[0] &gt; 0:\n        print('Positive')\n    elif analysis.sentiment[0] &lt; 0:\n        print('Negative')\n    else:\n        print('Neutral')\n</code></pre> <p></p>"},{"location":"Miscellaneous/Aliases_in_Windows_command_prompt.html","title":"Aliases in Windows command prompt","text":""},{"location":"Miscellaneous/Aliases_in_Windows_command_prompt.html#windows","title":"Windows","text":"<p>you may make the alias(es) persistent with the following steps:</p> <ol> <li>Create a .bat or .cmd file with your <code>DOSKEY</code> commands.</li> <li>Run regedit and go to <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor</code></li> <li>Add String Value entry with the name AutoRun and the full path of your .bat/.cmd file.</li> </ol> <p>For example, <code>%USERPROFILE%\\alias.cmd</code>, replacing the initial segment of the path with <code>%USERPROFILE%</code> is useful for syncing among multiple machines.</p> <p>This way, every time cmd is run, the aliases are loaded.</p> <p>For completeness, here is a template to illustrate the kind of aliases one may find useful. <pre><code>@echo off\n\n:: Temporary system path at cmd startup\n\n:: set PATH=%PATH%;\"C:\\Program Files\\Sublime Text 2\\\"\n\n:: Add to path by command\n\n:: DOSKEY add_python26=set PATH=%PATH%;\"C:\\Python26\\\"\n:: DOSKEY add_python33=set PATH=%PATH%;\"C:\\Python33\\\"\n\n:: Commands\n\nDOSKEY ls=dir /B\nDOSKEY notes = cd Documents/Notes/notes\n:: DOSKEY sublime=sublime_text $*\n:: sublime_text.exe is name of the executable. By adding a temporary entry to system path, we don't have to write the whole directory anymore.\n:: DOSKEY gsp=\"C:\\Program Files (x86)\\Sketchpad5\\GSP505en.exe\"\n:: DOSKEY alias=notepad %USERPROFILE%\\Dropbox\\alias.cmd\n\n:: Common directories\n\n::DOSKEY dropbox=cd \"%USERPROFILE%\\Dropbox\\$*\"\n::DOSKEY research=cd %USERPROFILE%\\Dropbox\\Research\\\n</code></pre></p>"},{"location":"Miscellaneous/Aliases_in_Windows_command_prompt.html#on-mac","title":"On MAC","text":"<p>On mac the process is similar to a Linux system, I will add more step later for now i will leave the alias and configuration i want to do</p> <pre><code>export PATH=$PATH:/usr/local/bin/pip3\nexport PATH=$PATH:/usr/local/bin/pip3.7\nexport PATH=$PATH:/Users/name_of_the_user/Library/Python/3.7/bin\nexport PATH=$PATH:/usr/local/bin/\nalias ls='ls -GFh'\nexport PS1=\"\\w [\\u]\u27a4 \"\nexport CLICOLOR=1\nexport LSCOLORS=ExFxBxDxCxegedabagacad\nalias Documents='cd ~/Documents'\nalias notes='cd ~/Documents/001.My_notes'\n# ---------------------------------------------------------------------------\n# Git Aliases\n#----------------------------------------------------------------------------\n\nalias gall='git add .'\nalias gc='git commit -m'\nalias gpush='git push origin master'\nalias gpull='git pull origin master'\n</code></pre>"},{"location":"Miscellaneous/Create_kindle_dictionary.html","title":"Create my own Dictionary for kindle","text":"<p>Creating a hold dictionary is time-consuming. So, I will use an existing dictionary as a source file. With a mixture of a project called pyGlosassary, some modification of the source code, and Kindle preview, I will be able to create a compatible dictionary.</p> <p>There might be better ways to do this process but this is the way I did. The goal will be to obtain a .mobi file that will represent the dictionary.</p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#the-steps","title":"The Steps:","text":"<ol> <li>Get the dictionary source.</li> <li>Get the pyGlossary.</li> <li>Run and use <code>pyGlosassary</code> with the correct settings.</li> <li>Modify source code.</li> <li>Kindle Preview 3</li> <li>Upload with Calibre.</li> </ol>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#get-the-dictionary-source","title":"Get the dictionary source.","text":"<p>There are not many options for a dictionary of Spanish-traditional Chinese, and the format of those dictionaries is not always compatible with the Kindle system.</p> <p>I know the goal is to get a .mobi file, but I will need to start from a different extension.</p> <p>I found some Spanish-traditional Chinese on a page called freemdict.com\u00a0. These dictionaries are in .mdx and .mdd format.</p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#get-the-pyglossary","title":"Get the pyGlossary.","text":"<p>I have the dictionary, but it is in a format that the Kindle won't be able to read. So I need to convert this file to a supported extension. For this purpose, I will use\u00a0pyGlossary\u00a0.</p> <p>A tool for converting dictionary files aka glossaries. Mainly to help use our offline glossaries in any Open Source dictionary we like on any modern operating system / device.</p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#run-and-use-pyglosassary-with-the-correct-settings","title":"Run and use <code>pyGlosassary</code> with the correct settings.","text":"<p>pyGlossary will run in most of the Operative systems, Mac, Linux, and Windows, what is required is the following:</p> <ol> <li>Python is installed in version 3.8 or higher.</li> </ol> <p>There is a detailed description of how to install it on the Github repository.</p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#installed-on-windows","title":"installed on Windows","text":"<p>First, let's make sure I have python.</p> <p></p> <p>I can get pyGlossary from GitHub or just use the <code>pip</code> package manager for python to obtain it.</p> <p>I will check if <code>pip</code> is installed</p> <p></p> <p>If python is installed and pip is in the system I can proceed to get pyGlossary, like this</p> <p><code>pip install --upgrade pyglossary</code></p> <p>it is important to run the terminal as an administrator to avoid any permission issues.</p> <p>To launch by pyglossary, I can use <pre><code>pyglossary\n</code></pre></p> <p>but I need to make use of some options first. According to the documentation pyglossary have two modes, direct and indirect if I want to generate a:</p> <ul> <li>StarDict</li> <li>EPUB-2</li> <li>Mobipocket E-Book</li> </ul> <p>I need to run <code>pyglossary</code> in  indirect mode, for that, I need to use the flag <code>--indirect</code>, so I need to modify the command as follows:</p> <pre><code>pyglossary --indirect\n</code></pre>  Indirect mode means the input glossary is completely read and loaded into RAM, then converted into the output format.  <p></p> <p><code>pyglossary</code> use different graphical components. In some cases, those components won't be present in some OS. However, since <code>pyglossary</code> support several of them it won't be a problem, but this explains the error in the screenshot above. Here how <code>pyglossary</code> look in windows.</p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#convert-the-dictionary","title":"Convert the dictionary","text":"<p>Now I can proceed to convert the dictionary.</p> <ol> <li>select the dictionary file. PyGlossary in some cases will select the input format, most of the time this will be correct but is a good idea to double-check.</li> </ol> <p></p> <ol> <li>select the output format. in this case .mobi and select the location where to receive the new file.</li> </ol> <p></p> <p>Once the source is defined and the output file selected, I can proceed to use convert.</p> <p>In this example, I'm running into some errors. However, the file I need was created. What I'm looking for is to get <code>content.opf</code> file. In my case, it will be located on <code>C:\\Users\\Victo\\Desktop\\diccionario_espanol_chino\\OEBPS</code></p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#modify-source-code","title":"Modify source code.","text":"<p>If I try to import this generated file to the kindle preview 3, I will have some message error that will mention something related to the language targe. By modifying some parameters in the source code (<code>content.opf</code>) this error can be solved. Using sublime text ( or any enriched text editor) I can modify the <code>content.opf</code> files to add the required information</p> <p></p> <p>The tag \\ holds the information of the main language of the dictionary, in this case, is a dictionary Spanish to Chinese, so the language will be Spanish, so I use <code>es</code> to fill this tag</p> <p><code>\\&lt;dc:Language&gt;es&lt;/dc:Language&gt;</code></p> <p>The following two tags represent the <code>in language</code> <code>&lt;DictionaryInLanguage&gt;&lt;/DictionaryInLanguage&gt;</code>and <code>out language</code> <code>&lt;DictionaryOutLanguage&gt;&lt;/DictionaryOutLanguage&gt;</code> again, the dictionary is Spanish to Chinese so the <code>in language</code> will be Spanish and the <code>out language</code> will be Chinese.</p> <p><code>&lt;DictionaryInLanguage&gt;es&lt;/DictionaryInLanguage&gt; &lt;DictionaryOutLanguage&gt;zh&lt;/DictionaryOutLanguage&gt;</code></p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#kindle-preview-3","title":"Kindle Preview 3","text":"<p>This software will allow me to check if the Dictionary was created correctly.</p> <p>It can be downloaded  here</p> <p></p> <p>On Kindle Previewer I can preview the dictionary by uploading the <code>content.opf</code> file.</p> <p>Once the Dictionary is loaded I will use the export functions to get the .mobi file.</p> <p></p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#upload-with-calibre","title":"Upload with Calibre.","text":"<p>Here is a disclaimer, I m using open source free dictionaries therefore I doubt there is any legal consequence but it is better to check for any license, mention, or acknowledge required by the license which the source material is under.</p> <p>Once the .mobi is created, caliber can be used to upload the dictionary to the kindle.</p> <p></p>"},{"location":"Miscellaneous/Create_kindle_dictionary.html#how-it-looks-on-the-kindle","title":"How it looks on the Kindle","text":""},{"location":"Miscellaneous/Espanso.html","title":"Espanso ( shortcuts )","text":""},{"location":"Miscellaneous/Espanso.html#espanso","title":"Espanso","text":"<p>Espanso is \"A Privacy-first, Cross-platform Text Expander\" according to the official website espanso.org. In the nutshell Allow me to save pieces of text or code under a specific trigger, for example, let say i want to create a trigger that will give me as result the current date, so i will create a Match, the trigger will be <code>:now</code> and will be replace by the current time ( example <code>5/11/2021</code>).</p> <p></p> <ol> <li>Official Website.</li> <li>Documentation.</li> </ol> <p>Created by [Federico Terzi](https://federicoterzi.com/).</p>"},{"location":"Miscellaneous/Espanso.html#installation","title":"Installation","text":"<p>This section is copy directly from the website, there are instructions to install in Windows, Linux and Mac.</p> <p>How to install</p>"},{"location":"Miscellaneous/Espanso.html#getting-start","title":"Getting start","text":"<p>This are some of the CMD or terminal command that will be useful with Espanso</p> <ol> <li><code>espanso status</code>.</li> <li><code>espanso start</code> and <code>espanso stop</code>.</li> <li><code>espanso restart</code>.</li> </ol> <p>By Default we can enable or disable Espanso by double tap alt (for windows)  </p>"},{"location":"Miscellaneous/Espanso.html#initial-and-basic-configuration","title":"Initial and Basic Configuration","text":"<p>The configuration is file_based here the common paths to the configuration file:</p> <ul> <li>Linux: <code>$XDG_CONFIG_HOME/espanso</code> (e.g. <code>/home/user/.config/espanso</code>).</li> <li>macOS: <code>$HOME/Library/Preferences/espanso</code> (e.g. <code>/Users/user/Library/Preferences/espanso</code>).</li> <li>Windows: <code>{FOLDERID_RoamingAppData}\\espanso</code> (e.g. <code>C:\\Users\\user\\AppData\\Roaming\\espanso</code>).</li> </ul> <p>The qucik way to find the files is recommended by the documentation.</p> <p><pre><code>espanso path\n</code></pre> The result will be something like: </p> <p>The folder mentioned might have several other folders or other documents but the main document will be <code>default.yml</code>, this file contain all the main configuration, it use YAML  syntax, and here we can add several Matches. Later we will see that we can even create different files to store matches specific for a software or or oriented to specific purpose.</p> <p>More details on the official documentation Getting started</p>"},{"location":"Miscellaneous/Espanso.html#basic-matches","title":"Basic Matches","text":"<p>Later i will dig deeper in the different matches but here an example of a matches file:</p> <p></p> <p>The basics here is that <code>trigger</code> will be the word to type and <code>replace</code> with be the string that will be expanded or appear instead</p> <ol> <li>Simple Text replace: Those will be replacing just text</li> <li>Dates: this case it will replace using variables and will be a dynamic match</li> <li>Advance matches: these will involve more things and will be more complex to set up.</li> </ol>"},{"location":"Miscellaneous/Espanso.html#installing-packages","title":"Installing packages","text":"<p>We can add some emojis or some extras to espanso, for that we can use the packages, we can find them on espanso hub</p> <p>To installed it:</p> <p><pre><code>espanso install basic-emojis\n</code></pre> adn later restart espanso</p> <pre><code>espanso restart\n</code></pre> <p>If we install the package all emoji <code>espanso install all-emojis</code> here is a cheatsheet for those emojis</p>"},{"location":"Miscellaneous/Espanso.html#backspace-undo","title":"Backspace Undo","text":"<p>If the expansion was trigger by mistake we can use BACKSPACE to reverted the action, for that we need to add the line</p> <pre><code>undo_backspace: false\n</code></pre> <p>to the default.yml file.</p>"},{"location":"Miscellaneous/Espanso.html#matches","title":"Matches","text":"<p>The exact documentation about the matches can be find here Matches</p> <p>In the official documentation words \"Matches are pairs that associate a trigger with a replaced text.\"</p>"},{"location":"Miscellaneous/Espanso.html#static-matches","title":"Static Matches","text":"<p>These are the most basic,. it will consist of: * trigger: the word that will trigger the expansion. * replace: Expression or word that will be place instead of the trigger.</p> <pre><code>- trigger: \":Hola\"\n  replace: \"Hello  world\"\n</code></pre>"},{"location":"Miscellaneous/Espanso.html#multi-line-expansions","title":"Multi-line expansions","text":"<p>To replace the original text with a multi-line message we can use <code>\\n</code> the line terminator to jump to the next line.</p> <pre><code>- trigger: \":hello\"\n  replace: \"Hello\\nWorld!\"\n</code></pre> <p>or we can use (From the official documentation) :</p> <p>Literal Block Scalar It will include any line or trailing spaces added on the replaces section.</p> <p></p> <p>Folded Block Scalar It will fold the newlines to spaces, so no matter if the replace section contain new lines they will be fold to spaces.</p> <p></p>"},{"location":"Miscellaneous/Espanso.html#dynamic-matches","title":"Dynamic Matches","text":"<p>For this type of Matches  there will be two additional concepts variable and extensions.</p> <ul> <li>Variable: it is use on the replace clause to include the output of a dynamic component.</li> <li>Extension:  It is the dynamic component that will produce an output that will be take place of the variable on the replace clause.</li> </ul> <p>Example:</p> <pre><code>- trigger: \":now\"\n  replace: \"It's {{mytime}}\"\n  vars:\n    - name: mytime\n      type: date\n      params:\n        format: \"%H:%M\"\n</code></pre> <ol> <li>The Trigger is <code>:now</code>.</li> <li>Te replace close <code>\"It's {{mytime}}\"</code> contain the variable <code>{{mytime}}</code>.</li> <li>now the dynamic component will be on the next part that start with <code>vars</code>.</li> </ol> <pre><code>vars:\n    - name: mytime\n      type: date\n</code></pre> <p>In these lines we define the variable <code>mytime</code> as a <code>date</code> type. In this example the Date Extension is use</p> <p>The most important part of this extension is the <code>format</code> parameter <pre><code>      params:\n        format: \"%H:%M\"\n</code></pre></p> <p>A list of all the possible options can be found in the official chrono documentation.</p>"},{"location":"Miscellaneous/Espanso.html#cursor-hints","title":"Cursor Hints","text":"<p>In some cases we want to set the cursor in the middle of the expression expanded, in that case we use the the cursor hint <code>$|$</code> so for example:</p> <pre><code>  - trigger: \":div\"\n    replace: \"&lt;div&gt;$|$&lt;/div&gt;\"\n</code></pre>"},{"location":"Miscellaneous/Espanso.html#multi-trigger","title":"Multi-trigger","text":"<p>In some cases we want to have more than one trigger, in that case we can list the triggers like a list.</p> <pre><code>    - triggers: [\"hello\", \"hi\"]\n      replace: \"world\"\n</code></pre>"},{"location":"Miscellaneous/Espanso.html#script-expansion","title":"Script Expansion","text":"<p>In this case we will use espanso to execute a external script, in this case we will run a python script</p> <p>script.py <pre><code>print(\"Hello from python\")\n</code></pre></p> <p>now the match will look like:</p> <pre><code>- trigger: \":pyscript\"\n  replace: \"{{output}}\"\n  vars:\n    - name: output\n      type: script\n      params:\n        args:\n          - python\n          - /path/to/your/script.py\n</code></pre> <p><code>args</code> must change depending of the programming language and the location of the script.</p> <p>There is a good practice mentioned in the official documentation</p>"},{"location":"Miscellaneous/Espanso.html#script-placement","title":"Script Placement","text":"<p>The best-practice is to create a folder called <code>scripts</code> inside the directory <code>espanso</code> to store all the scripts to be use.</p> <p>Now, we use the <code>%CONFIG%</code> wildcard to automatically replace the configuration directory</p> <pre><code>- trigger: \":pyscript\"\n  replace: \"{{output}}\"\n  vars:\n    - name: output\n      type: script\n      params:\n        args:\n          - python\n          - \"%CONFIG%/scripts/script.py\"\n</code></pre>"},{"location":"Miscellaneous/Espanso.html#shell-extension","title":"Shell Extension","text":"<p>Similar to the Script Expansion, this is use to execute a script, in this case will be a shell command.</p> <pre><code>- trigger: \":ip\"\n  replace: \"{{output}}\"\n  vars:\n    - name: output\n      type: shell\n      params:\n        cmd: \"curl 'https://api.ipify.org'\"\n</code></pre> <p>this will get the IP address with ipify.</p> <p>We can choose the Shell:</p> <ul> <li>On Windows: <code>cmd</code>, <code>powershell</code>, <code>wsl</code>.</li> <li>On macOS: <code>sh</code>, <code>bash</code>.</li> <li>On Linux: <code>sh</code>, <code>bash</code>.</li> </ul>"},{"location":"Miscellaneous/Espanso.html#clipboard","title":"Clipboard","text":"<p>In some cases we want to add the content of the clipboard as part of the expansion.</p> <pre><code>  - trigger: \":a\"\n    replace: \"&lt;a href='{{clipboard}}' /&gt;$|$&lt;/a&gt;\"\n    vars:\n      - name: \"clipboard\"\n        type: \"clipboard\"\n</code></pre> <p>so if we copy a link and later use the trigger <code>:a</code> the content of the clipboard will be paste on the location of the variable <code>{{clipboard}}</code>.</p>"},{"location":"Miscellaneous/Espanso.html#configuration","title":"Configuration","text":"<p>Espanso uses files to manage its configuration, so this can be add to git or dropbox/Google drive (more about synchronization).</p> <p>We can organize the triggers and expansion can be organize in different files, those files will be on the directory <code>user/</code>.</p> <p>for example for a file that will contain expansion for emails we will:</p> <ol> <li>create a new file inside <code>user/</code> by <code>espanso edit emails</code> command.</li> <li>Inside the file <code>user/emails.yml</code>we add.</li> </ol> <p><pre><code>name: emails\nparent: default\n\nmatches:\n  - trigger: \":sig\"\n    replace: |\n      Best regards,\n      Victor.\n</code></pre> The connection of this child file with the parent is with the line <code>parent: default</code> instruction.</p>"},{"location":"Miscellaneous/Espanso.html#filters","title":"Filters","text":"<p>In some cases we want to espanso behave different depending of the application or the program, in that case we use filters.</p> <ul> <li><code>filter_title</code>.</li> <li><code>filter_exec</code>.</li> <li><code>filter_class</code>.</li> </ul> <p>The filter will request some information, in that case we can use <code>espanso detect</code>  which will provide information need it for the filters, see official documentation.</p> <p>For example in a different document title <code>telegram.yml</code> on the folder <code>user/</code></p> <pre><code>filter_title: \"Telegram\"\n\nmatches:\n  - trigger: \":ok\"\n    replace: \"\ud83d\udc4d\"\n</code></pre>"},{"location":"Miscellaneous/Helpers.html","title":"Installing mkdocs","text":"<p>Install using pip:</p> <pre><code>pip install mkdocs\n</code></pre> <p>and to check the installation</p> <pre><code>$ mkdocs --version\nmkdocs, version 0.15.3\n</code></pre>"},{"location":"Miscellaneous/Helpers.html#installing-material-for-mkdocs","title":"Installing Material for mkdocs","text":"<p>Install using pip:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>and int the project's mkdocs.yml we need to add:</p> <pre><code>theme:\n  name: 'material'\n</code></pre>"},{"location":"Miscellaneous/Helpers.html#useful-mkdocs-commands","title":"Useful MkDocs Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"Miscellaneous/Helpers.html#useful-commands","title":"Useful commands","text":"<ul> <li><code>![Name of the image](/images/nameImage.png)</code> -  to add an image</li> <li><code>[text](URL)</code> to add a link to a text</li> </ul>"},{"location":"Miscellaneous/Helpers.html#launch-mkdocs-in-specific-ip","title":"Launch Mkdocs in specific ip","text":"<pre><code>mkdocs serve --dev-addr=[IP_Address:Port]\n</code></pre>"},{"location":"Miscellaneous/Helpers.html#deploy-the-mkdocs","title":"Deploy the MKDocs","text":"<p>The project pages site will be deploy in other branch called 'gh-deploy', run the following command:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>That's it! Behind the scenes, MkDocs will build your docs and use the ghp-import tool to commit them to the gh-pages branch and push the gh-pages branch to GitHub.</p>"},{"location":"Miscellaneous/Helpers.html#math","title":"Math","text":"<ul> <li>To add inline math you can use <code>$</code> and close it <code>$</code>, like <code>$...$</code></li> <li>To add a block of math we use <code>$$$</code> and close with <code>$$$</code></li> <li>In case that you need to add a white space inside this blocks you will need to escape it, example <code>training\\ batch</code></li> </ul>"},{"location":"Miscellaneous/Helpers.html#extracss","title":"extra.css","text":"<p>This is a file to customize the theme without modify the original files, I modify the following:</p>"},{"location":"Miscellaneous/Helpers.html#1-center-the-image","title":"1. Center the image","text":"<p>To center the images first, I added the <code>markdown extension</code> called <code>attr_list</code>, later create the following modification on the <code>extra.css</code></p> <pre><code>/*\n///////////////////////\n// To center images////\n///////////////////////\n*/\n\n.center {\n    display: block;\n    margin: 0 auto;\n}\n</code></pre> <p>now to center the image I just need to add \"{: .center}\" at the end of the statement, for example:</p> <p><code>![Name of the image](/images/nameImage.png).{: .center}</code></p>"},{"location":"Miscellaneous/Helpers.html#modification-to-footnote-strings-color","title":"Modification to footnote strings color","text":"<p>To change the color of the footnotes i made a change in the css</p> <pre><code>.md-typeset div.footnote {\n  color: #808080;\n}\n</code></pre>"},{"location":"Miscellaneous/Helpers.html#callout","title":"Callout","text":"<p>To create a callout put the content in between <code>&lt;aside&gt;</code> tags.</p> <pre><code>&lt;aside&gt;\n    This is a Callout\n&lt;/aside&gt;\n</code></pre>      This is a Callout  <p>\"To every man upon this earth, death cometh soon or late, And how can man die better, Than facing fearful odds, for the ashes of his fathers, And the temples of his gods.\"</p>"},{"location":"Miscellaneous/OAuth_2.html","title":"OAuth 2","text":"<ul> <li>TODO: Introduction and a better description</li> </ul> <p>Now and example of how the OAuth 2 interation look like:</p> <ol> <li> <p>Get (ussually) Manually  <code>client_id</code> <code>client_secret</code></p> </li> <li> <p>Sent User over OAuth Client: <code>GET: provider.com/oauth/authorize?</code> <code>client_id</code> <code>redirect_uri</code></p> </li> <li> <p>Web ask for permission    \\(yes\\)   or    \\(no\\)</p> </li> <li> <p>Re-direct to the uri: <code>GET: clietn.com/oauth_accept?</code> <code>code: foobahz</code></p> </li> <li> <p>Issue access token <code>POST: provider.com/oauth/access_token</code> <code>code: foobahz</code> <code>client_id: foo</code> <code>client_secret: bar</code></p> </li> <li> <p>Get access token \\(Result:\\) <code>{'access_token' : 'bazfoobahz'}</code></p> </li> <li> <p>Can do alll user will do <code>GET: /user/me/friends</code> <code>access_token: bazfoobahz</code></p> </li> <li> <p>Response \\(Result:\\) <code>{'friends': [{'name': ....}]}</code></p> </li> </ol>"},{"location":"Miscellaneous/Random%20Link.html","title":"Random","text":"<p>link to the tutorial of fader</p> <ol> <li>Lightroom Quick Tips - The Fader</li> <li>lightroom Preset</li> <li>Django tutorial</li> <li>Django documentation</li> </ol>"},{"location":"Miscellaneous/Sublime_text.html","title":"Configuration for Sublime Text 3","text":"<p>Some configuration for sublime text</p>"},{"location":"Miscellaneous/Sublime_text.html#end-key-of-the-keyboard-not-working-on-sublime-text-3-mac","title":"'End' Key of the keyboard not working on sublime text 3 MAC","text":"<p>Go to preference -&gt; Key Bindings - User add <pre><code>{ \"keys\": [\"end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eol\"} },\n{ \"keys\": [\"home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bol\"} }\n</code></pre></p>"},{"location":"Miscellaneous/mkdocs_extensions.html","title":"Mkdocs & Material Mkdocs extensions","text":"<p>Here some notes about the material Mkdocs extensions more information in the documentation</p>"},{"location":"Miscellaneous/mkdocs_extensions.html#icons","title":"Icons","text":"<p>To add custom Icons we need to use Icons+Emojis We star with the configuration that give use access to some basic icons and emojies, later we explore the addition of customized icons.</p>"},{"location":"Miscellaneous/mkdocs_extensions.html#configuration","title":"Configuration","text":"<p>add the following lines to <code>mkdocs.yml</code> <pre><code>markdown_extensions:\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre></p>"},{"location":"Miscellaneous/mkdocs_extensions.html#emojis","title":"emojis","text":"<p>it is recommended to use the shortcodes at Emojipedia we have the example of <pre><code>:smile:\n</code></pre> </p>"},{"location":"Miscellaneous/mkdocs_extensions.html#using-icons","title":"Using icons","text":"<p>We can use icons too, in some case we need to make some extra modifications to the <code>mkdocs.yml</code> <pre><code>markdown_extensions:\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n      options:\n        custom_icons:\n          - overrides/.icons\n</code></pre> and in the root directory next to <code>mkdocs.yml</code> we create a new folder called <code>overrides</code> and inside other call <code>.icons</code> and inside we put the svg of the icons.</p> <p>Now to call that icons we replace the <code>/</code> of the path for <code>-</code> like <pre><code>:faces-guy-fawkes-mask:\n</code></pre> </p> <p>We can find more icons here materialdesignicons</p> <p>Color can be added to the icons, we will need to add some CSS rules to later reference next to the icon, like this <pre><code>.purple{\n    color: #512DA8;\n}\n</code></pre> <pre><code>:faces-panda:{ .purple }\n</code></pre> </p> colors for icons <p>.purple: #6745c2 .dark-purple: #6745c2 .royal-blue: #000062 .orange: #E66C10 .light-green: #629749 .dark-green: #003d00 .green: #32681</p>"},{"location":"Miscellaneous/mkdocs_extensions.html#admonitions","title":"Admonitions","text":"<p>These are basically call-outs.</p>"},{"location":"Miscellaneous/mkdocs_extensions.html#configuration_1","title":"Configuration","text":"<pre><code>markdown_extensions:\n  - admonition\n</code></pre> <p>They are enabled by putting <code>!!!</code> later a key word and bellow indented the content, like this</p> <pre><code>!!!note\n    this is an admonition\n</code></pre> <p>Note</p> <p>this is an admonition</p> <p>We can modify the name by putting a different key word ( see admonitions documentation) or by adding the title in <code>\"</code>.</p> <pre><code>!!!note \"this is the title\"\n    this is an admonition\n</code></pre> <p>This is the title</p> <p>this is an admonition</p> <p>we can make a dropdown close by default</p> <pre><code>???note \"This is az dropdown admonition\"\n    this is an admonition\n</code></pre> This is a dropdown admonition <p>this is an admonition</p> <p>and open by adding \"+\"</p> <pre><code>???+ note \"This is a dropdown call-out\"\n    this is an admonition\n</code></pre> This is a dropdown call-out <p>this is an admonition</p> <p>Here some example of other admonitions</p> <pre><code>!!! warning\n    This is a warning\n</code></pre> <p>Warning</p> <p>This is a warning</p>"},{"location":"Miscellaneous/mkdocs_extensions.html#definition-list","title":"Definition List","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#footnotes","title":"Footnotes","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#metadata","title":"Metadata","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#pymdownxdetails","title":"pymdownx.details","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#attr_list","title":"attr_list","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#smarty","title":"smarty","text":""},{"location":"Miscellaneous/mkdocs_extensions.html#md_in_html","title":"md_in_html","text":""},{"location":"Miscellaneous/potential%20activities.html","title":"Potential activities","text":""},{"location":"Miscellaneous/potential%20activities.html#potential-activities-outside-taipei","title":"Potential activities Outside Taipei","text":"<ol> <li>Paragliding</li> <li>Flight Experience - 2 days course</li> <li>The Adventure of River Trekking in Hualien</li> <li>Taipei Scuba Diving Experience at Longdong Bay</li> <li>Tree Climbing Experience at Sky Peak Valley</li> <li>Taiwan Wuyanjiao Kayak Experience</li> <li>Penghu Taiwan Parasailing Experience</li> <li>Driving ATV at South bay beach, Kenting</li> </ol>"},{"location":"Miscellaneous/potential%20activities.html#potential-activities-inside-taipei","title":"Potential activities Inside Taipei","text":"<ol> <li>Taipei The Shu's Pottery DIY Class</li> <li>(Hubox) Handmade vintage LOFT lamp</li> </ol>"},{"location":"Miscellaneous/potential%20activities.html#potential-activities-overseas","title":"Potential activities Overseas","text":""},{"location":"Miscellaneous/useful_windows_commands.html","title":"Useful windows commands","text":"<p>These are useful windows commands, these commands are to be executed on the CMD terminal</p>"},{"location":"Miscellaneous/useful_windows_commands.html#display-information","title":"Display information","text":""},{"location":"Miscellaneous/useful_windows_commands.html#display-content-current-directory","title":"Display content current directory","text":"<p>To display the content of a directory use the  command <code>dir</code></p> <pre><code>dir\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#tree-style-display","title":"Tree style display","text":"<p>To display folder content we can use the <code>tree</code> command</p> <pre><code>tree &lt;foldername&gt;\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#delete","title":"Delete","text":""},{"location":"Miscellaneous/useful_windows_commands.html#how-to-delete-files","title":"How to delete files","text":"<p>To delete a file we use the command <code>del</code></p> <pre><code>del &lt;filename.extension&gt;\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#using-flag-f-to-force-delete-a-file","title":"Using flag <code>/f</code> to force delete a file","text":"<pre><code>del /f &lt;filename.extension&gt;\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#how-to-delete-a-folder","title":"How to delete a folder","text":"<p>The command to be used is <code>rmdir</code> there is another option <code>rd</code> but I will stay with <code>rmdir</code> since is more descriptive and common in other OS.</p> <pre><code>rmdir &lt;name of directory/folder&gt;\n</code></pre> <p>This process will fail if there are subdirectories, for that we need to add a flag</p>"},{"location":"Miscellaneous/useful_windows_commands.html#use-flag-s-with-rmdir","title":"Use flag <code>/s</code> with <code>rmdir</code>","text":"<p>A flag can be added to delete a folder with sub-folders <code>/s</code>.</p> <pre><code>rmdir /s &lt;name root directory&gt;\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#check-report-or-performance-of-pc","title":"Check report or performance of PC","text":""},{"location":"Miscellaneous/useful_windows_commands.html#check-performance-and-report","title":"Check performance and report","text":"<pre><code>perfmon /report\n</code></pre>"},{"location":"Miscellaneous/useful_windows_commands.html#system-file-checker-used-to-fix-corrupt-or-missing-files","title":"System file checker used to fix corrupt or missing files","text":"<pre><code>sfc /scannow\n</code></pre>  \u261d\ud83c\udffe This might take several minutes"},{"location":"Miscellaneous/useful_windows_commands.html#get-network-information","title":"Get network information","text":""},{"location":"Miscellaneous/useful_windows_commands.html#get-all-macs","title":"Get all macs","text":"<pre><code>getmac\n</code></pre>"},{"location":"Miscellaneous/3D%20Printing/Concepts.html","title":"Concepts","text":"<p>Here some concepts related with 3D printing, this can be concepts from a specific board, firmware, etc The idea is have a place to refresh memory when reading other articles.</p>"},{"location":"Miscellaneous/3D%20Printing/Concepts.html#sensorless-homing","title":"Sensorless Homing","text":"<p>Sensorless homing allows to home an axis without the need for a physical limit switch. Instead, the carriage on the axis is moved into the mechanical limit making the stepper motor lose steps. Then the firmware will trigger stop for the axis.</p> <p>SKR mini  E3 v1.2 for this specific one we will need to use cables jumpers </p>"},{"location":"Miscellaneous/3D%20Printing/about%20design.html","title":"About design","text":"<p>This are some notes about design, mostly take it from the Sketch class in instructable</p>"},{"location":"Miscellaneous/3D%20Printing/about%20design.html#drawing-2d","title":"Drawing 2D","text":"<p>It is a good idea start with 2D and separate the object in \"orthographic\" views. this will help to understand the proportions , scale and relationship that are difficult to see in 3D.</p> <p></p> <p>For this we can start by drawing the Construction lines, sort of a cage around the object.</p> <p></p> <p>Draw the lines that define the shape of the object, just the general shape, start but the horizontal or vertical lines and later make the curve lines.</p> <p></p> <p>Later make construction lines for the other details</p> <p></p> <p>This extra line can help to center the details and see what is the position of this extra details in the other faces</p> <p></p> <p>Finally we can proceed to draw the upper and lower parts, using the construction lines to keep the size consistent.</p> <p></p>"},{"location":"Miscellaneous/3D%20Printing/about%20design.html#using-different-line-weight","title":"Using different line weight","text":"<p>In order to give more details about the object we can use different line weights</p> <p></p> <p>This is a direct copy of the information in this class, this describe where each line weight its been use</p> <p>1. Extra Light (pencil or light weight pen): This weight is used for aspects that should either be secondary to the overall form of the object or almost disappear entirely. It's good for construction lines, surface features like textures or patterns, and seams between parts that don't have much depth (like the edge where a fender touches a hood on a car, for example). 2. Light (\u00b1 0.3mm): This weight is most often used for contour lines (lines that follow a surface to express its 3D shape) and planar corners (edges between two planes in which you can see both planes in the view). 3. Medium (\u00b1 0.5mm): This weight is generally used for spatial edges (the edges of surfaces where only one surface is seen in the view). 4. Heavy (0.7mm+): Heavy lines are reserved for the perimeter edges of an object and for the cut edges of a cross-section drawing.</p>"},{"location":"Miscellaneous/3D%20Printing/about%20design.html#drawing-3d","title":"Drawing 3D","text":"<p>Once we have clear the relationship of the different size or faces of the object, we can move to 3D in order to understand the object, after all we see in 3D, now, in this case we are no going to use perspective, we are going to use something call Isometric.</p> <p></p> <p>We start in a similar way than 2D, we start making a cage for the object, we can start drawing 3 parallel lines, notice that line 1 and 2 from left to right represent how thick is the object, this can be different to different objects.</p> <p></p> <p>Now we can draw the last vertical line, this will be the back each of the object, and will be (most of the time) be aware that the distance between this last line and line 3 should be same line 1 and 2, since the object has the same thickness.</p> <p></p> <p>Now, we will use the angles of the bottom lines to emphasis the side, explained in other way will be, if the viewer is at the lower angle the focus will be in the side of the cube.</p> <p></p> <p>if the viewer is looking from a higher place the focus will be the top.</p> <p></p> <p>Angles that are more acute to the horizon will show less of the top of the object, emphasizing the sides. Angles that are more oblique to the horizon will show more of the top.</p> <p></p> <p>Both faces the lower and the upper will be parallel to each other</p> <p></p> <p>Similar what we did with the 2D we can continue making construction lines for the other features of the objects, for example in this case we need some lines for the circles on top of the object.</p> <p></p> <p>In order to draw the circles we need to have an idea of how the look like at different angles</p> <p></p> <p>According to the instructor in the class</p> <p>A Rule of thumb will be:</p> <ol> <li>A circle will hit the construction lines at the same points in 3D as they will in 2D.</li> <li>The curve along the obtuse corners of the box get longer and flatter.</li> <li>The curve along the acute corners of the box shorter and deeper.</li> </ol> <p></p> <p>here will be a big jump in the instruction, but basically we need to follow similar instruction that we did until now, just that this time we will focus in the details</p> <p></p> <p>in each step we increase the amount of details</p> <p></p> <p>finally we use the different line weights</p> <p></p> <ul> <li>Extra Light: surface details.</li> <li>Light: corner edges.</li> <li>Medium: edges with background surfaces.</li> <li>Heavy: perimeter outline.</li> </ul>"},{"location":"Miscellaneous/3D%20Printing/about%20design.html#shadows-and-light","title":"Shadows and Light","text":"<p>Taken directly and literally from the class</p> <p></p> <p>There are 5 basic parts of a shadow.</p> <p>1. Cast Shadow: Just like your own shadow on the sidewalk on a sunny day, a cast shadow is a -distorted- projection of the shape of the object. The length of the shadow and its direction depend on the direction of the light. On the Copic Marker scale, this would be N8.</p> <p>2. Core Shadow: This is the shaded part on the opposite side of an object from the direction of the light. This part is especially useful in defining geometry. On the Copic Marker scale, this would be N6.</p> <p>3. Reflected Highlight: This is ambient light bounced off of the ground to brighten part of an object that would otherwise be in core shadow. It's often okay to leave this part out if you want to make a quick drawing. On the Copic Marker scale, this would be N4.</p> <p>4. Mid Tone: This is the part of the shadow that transitions from the core shadow to the highlight on a curved surface. Think of it as a blurred edge of the core shadow / highlight. The mid tone also shows up on flat faces that aren't directly in the line of the light direction. On the Copic Marker scale, this would be N2.</p> <p>5. Highlight: This is the part of the object that reflects the most light. The highlight is directly in line with the direction of the light. This will remain white.</p> <p>In the class the had a video where the instructor explain how to make the different shadows</p> <p>The suggestion is start with the cast shadows, since this will gave us the sense of what surface will have the level of shadows.</p> <p>Choose a light direction: imagine the rays of light are parallel, like sunlight, and project the top of the object onto the floor. The lines this projection follows should be parallel to each other.</p> <p></p> <p>Notice that the Shadow is parallel to the top edge of the object</p> <p></p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html","title":"G-code","text":""},{"location":"Miscellaneous/3D%20Printing/gcode.html#what-are-g-code-commands","title":"What are G-code Commands?","text":"<p>G-code stands for \"Geometric code\", it is a rudimentary programing language, a numerical control programing language, that lacks of data structure such as variable, control blocks as conditionals and loops, its main function is to provide instruction to the machine  of how to move in the 3 geometrical dimension, how ever it can send non-geometric instruction, like  heat the bed, extrude specific amount of material at a specific extrusion rate, etc.</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#how-to-read-g-code-commands","title":"How to read G-code Commands?","text":"<p>A typical G-code line will look like:</p> <pre><code>G1 X-10 Y4.5 Z0.5 F30000.0 E 0.0377\n</code></pre> <p>This line tell the machine to move in a straight line toward the coordinates <code>X-10</code>, <code>Y4.5</code>, <code>Z0.5</code> at a feed rate of <code>3000.0</code> and extrude <code>0.0377mm</code> of material while moving.</p> <p>But how to read it, well each line start with a specific code, in this case the code is <code>G1</code>, which it means \"move in a straight line in a controlled fashion\".</p> <pre><code>G1 X-10 Y4.5 Z0.5 F30000.0 E 0.0377\n</code></pre> <p>The values after the code are the arguments, it start with a English letter and then the value:</p> <ul> <li><code>XYZ</code> Are values for the Cartesian coordinates</li> <li><code>F</code> is the Feed rate</li> <li><code>E</code>  is the Extrusion</li> </ul> <p>So the code: <pre><code>G1 X2 Y4 Z0 F30000.0 E 0.02\n</code></pre></p> <p>Reads \"Move towards X=2,Y=4, Z=0 in a straight line in a control fashion at a feed rate 3000.00 while extruding 0.02mm of material\".</p> <p>SOmething that help use to understand the code faster, is the fact that all g-code that start with G is code related with geometric commands. But a machine do more that geometric movements, there fore we have another type of commands, Non-geometroc and those command start with M.</p> <p>Each English letter in a G-code has an specific meaning here a reference table from reprap, for example G for Geometric commands, M for Non-geometric, X means \\(x\\) coordinate, Y \\(y\\) coordinate, Z  \\(z\\) coordinate, F means feed rate, E Extruder, etc</p> <p><code>G1</code> command means \u201cmove the nozzle in a controlled fashion in a straight line\u201d</p> <p>Following will be a description of the most common command, i will use the same graphic use in the document g-code tutorial 3D printer gcode-commands</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#the-most-common-g-code","title":"The most common G-code","text":""},{"location":"Miscellaneous/3D%20Printing/gcode.html#g00-rapid-motion","title":"<code>G00</code> \"Rapid Motion\"","text":"<p>This command ask the printer to move to the maximum speed possible from the current position to the coordinate given. With this command no material is extrude, and it is normally use to move the nozzle before start and after finished the print</p> <p><pre><code>G0 X7 Y18\n</code></pre> </p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g01-controlled-motion","title":"<code>G01</code>  \"Controlled motion\"","text":"<p>This Command will move the nozzle or printed head to a specific speed from the current position to the coordinated specified, the speed is specify by the Feed rate <code>F</code>, the amount of material extruded will be define by the number after <code>E</code>.</p> <pre><code>G01 X7 Y18 F500 E0.02\n</code></pre> <p></p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g17g1819-set-planes","title":"<code>G17/G18/19</code> \"set planes\"","text":"<p>This is to set the plan where the nozzle should move, <code>G17</code> will be X-Y, <code>G18</code> Z-X and <code>G19</code> Y-Z .</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g20g21-set-units","title":"<code>G20/G21</code> \"Set units\"","text":"<p>With <code>G20</code> you set the units to mm and <code>G21</code> to Inches</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g28-homing","title":"<code>G28</code> \"Homing\"","text":"<p>Send the printing head to the home position</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g90-absolute-mode","title":"<code>G90</code> \"absolute mode\"","text":"<p>This mode tell the printer to move to the absolute coordinate.</p> <pre><code>G90\nG0 X10\n</code></pre> <p>The machine will move the print head to the coordinate X=10</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g91-relative-mode","title":"<code>G91</code> \"Relative mode\"","text":"<p>Tells the machine to interpreted the coordinate as relative, if the machine is currently at X=10 and we use this command</p> <pre><code>G91\nG0 x10\n</code></pre> <p>the print head will move 10 units in the X direction, finishing at X=20.</p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#g2-and-g3-clockwise-or-anticlockwise-motion","title":"<code>G2</code> and <code>G3</code> \"clockwise or anticlockwise motion\"","text":"<p>This commands tell the printer to move either clockwise <code>G2</code> or andticlockwise <code>G3</code> from the current point to the coordinate given, the center of the rotation is given by the parameter I and J, I denotate the X offset and J the Y offset</p> <p><pre><code>G21 G90 G17\n\nG0 X6 Y18\n\nG2 X18 Y6 I0 J-12\n</code></pre> <pre><code>G21 G90 G17\n\nG0 X-5 Y25\n\nG3 X-25 Y5 I0 J-20\n</code></pre></p> <p></p>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#comments","title":"Comments <code>;</code>","text":"<p>Like any other programming languages, we can make comments in G-code, this is done using <code>;</code> after the command, example</p> <pre><code>G0 X-25 Y5  ; rapid movement to X=-25 and Y=5\n</code></pre>"},{"location":"Miscellaneous/3D%20Printing/gcode.html#example-of-the-beginning-of-a-g-code","title":"Example of the beginning of a G-code","text":"<pre><code>G90\n\nM82\n\nM106 S0\n\nM140 S100\n\nM190 S100\n</code></pre> <ol> <li><code>G90</code> Set the coordinate as absolute</li> <li><code>M82</code> Put the E axis into absolute mode independent of the other axes.</li> <li><code>M106 S0</code> turn fan on and set speed to 0</li> <li><code>M140 S100</code> set Bed temperature as 100 degrees</li> <li><code>M190 S100</code> Wait until the temperature is 100</li> </ol> <p>Now the printing phase</p> <pre><code>G1 X108.587 Y111.559 F525 ; controlled motion in X-Y plane\n\nG1 X108.553 Y111.504 F525 ; controlled motion in X-Y plane\n\n...\n\nG1 Z0.345 F500 ; change layer\n</code></pre> <p>There is nothing to explain here that is not already explained, there are some movements in X-Y and others in Z.</p> <p>After the print is complete we pass to the Reset printing phase</p> <pre><code>G28 ; bring the nozzle to home\n\nM104 S0 ; turn off heaters\n\nM140 S0 ; turn off bed\n\nM84 ;  disable motors\n</code></pre>"},{"location":"Miscellaneous/3D%20Printing/Projects/Moving%20Electronics.html","title":"Moving Electronics","text":"<p>about how to connect the raspberry and power without the usb https://thepihut.com/blogs/raspberry-pi-tutorials/how-do-i-power-my-raspberry-pi</p> <p>about the AWG and connectors https://www.dronetrest.com/t/wires-connectors-and-current-what-you-need-to-know-as-a-drone-builder/1342</p> <p>about wire https://www.dronetrest.com/t/wires-connectors-and-current-what-you-need-to-know-as-a-drone-builder/1342</p> <p>about PID https://3daddict.com/pid-tune-3d-printer/</p> <p>marlin guide: http://3daddict.com/beginner-guide-marlin-printer-firmware/</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html","title":"Center and Z offset","text":"<p>After change the board or flash a new firmware it is necessary center and set the offset for the Z</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#z-offset-instructions","title":"Z-Offset Instructions:","text":"<ol> <li>Home 3D printer</li> <li><code>M851 Z0</code> - Reset Z0Offset</li> <li><code>M500</code> - Store setting to eeprom</li> <li><code>M501</code> - Set active parameters</li> <li><code>M503</code> - Display Active Parameters</li> <li><code>G28 Z</code> - Home Z Axis</li> <li><code>G1 F60 Z0</code> - Move nozzle to true 0 offset</li> <li><code>M211 S0</code> - Switch off soft endstops</li> <li>take note of the current Z value and Move nozzle towards bed slowly until the paper can barely move</li> <li>Take note of the new Z value on the printer display (take that number and add the measurement of the calibration sheet or device used)</li> <li><code>M851 Z X.XX</code> (X.XX being your z offset achieved)</li> <li><code>M211 S1</code> - Enable Soft Endstops</li> <li><code>M500</code> - Save settings to EEprom</li> <li><code>M501</code> - Set Active Parameters</li> <li><code>M503</code> - display current settings</li> </ol> <p>base in  this video and this article</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#g-code-used","title":"G-code used","text":""},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#m851-xyz-probe-offset","title":"<code>M851</code> - XYZ Probe Offset","text":"<p>Not totally clear for me how to make the procedure explained, specially when they mentioned that you can use <code>define Z_PROBE_OFFSET_FROM_EXTRUDER</code> to define the offset at firmware level, although ti is useful in the calibration procedure.</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-m851","title":"Usage <code>M851</code>","text":"<pre><code>M851 [X&lt;linear&gt;] [Y&lt;linear&gt;] [Z&lt;linear&gt;]\n</code></pre> <p>Example: M851 Z0 - Reset Z0Offset</p> <p>source: M851</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#m500-save-settings","title":"<code>M500</code> - Save settings","text":"<p>Save all configuration on the EEPROM</p> <p>SKR Mini E3 doesnt have a EEPROM there is several ways to overcome this, that is what Reddit says, one will be with a Virtual EEPROM other using the SD card as EEPROM.</p> <p>It requires <code>EEPROM_SETTINGS</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-m500","title":"Usage <code>M500</code>","text":"<p><pre><code>M500\n</code></pre> source: M500</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#m501-restore-settings","title":"<code>M501</code> -  Restore Settings","text":"<p>Load all saved settings from EEPROM</p> <p>It requires <code>EEPROM_SETTINGS</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-m501","title":"Usage <code>M501</code>","text":"<p><pre><code>M501\n</code></pre> source: M501</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#m503-report-settings","title":"<code>M503</code> - Report Settings","text":"<p>Print a concise report of all current settings.</p> <p>Does not require <code>EEPROM_SETTINGS</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-m503","title":"Usage <code>M503</code>","text":"<p><pre><code>M503\n</code></pre> source: M503</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#g28-auto-home","title":"<code>G28</code> - Auto Home","text":"<p>Auto-home one or more axis moving to the end-stop until triggered.</p> <p><code>G28</code> disable bed leveling. follow with <code>M420 s</code> to turn leveling on, or use <code>RESTORE_LEVELING_AFTER_G28</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-g28","title":"Usage <code>G28</code>","text":"<p><pre><code>G28 [O] [R] [X] [Y] [Z]\n</code></pre> * <code>[X]</code> Flag to go back to the X axis origin</p> <ul> <li> <p><code>[Y]</code> Flag to go back to the Y axis origin</p> </li> <li> <p><code>[Z]</code> Flag to go back to the Z axis origin</p> </li> </ul> <p>Example: <code>G28 Z</code> home the Z axis</p> <p>source: G28</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#g1-linear-move","title":"<code>G1</code> - Linear move","text":"<p><code>G0</code> and <code>G1</code> suppose to be similar command, they generate a linear movement, but this command is queue and it is execute when there is a space in the queue, <code>G0</code> it is use for movements that doesn't include the extrudor and <code>G1</code> for those that does</p> <p>All the coordinates are given in millimeters by default (see G20 if you want to change to inch)</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-g1","title":"Usage <code>G1</code>","text":"<p><pre><code>G0 [E&lt;pos&gt;] [F&lt;rate&gt;] [X&lt;pos&gt;] [Y&lt;pos&gt;] [Z&lt;pos&gt;]\nG1 [E&lt;pos&gt;] [F&lt;rate&gt;] [X&lt;pos&gt;] [Y&lt;pos&gt;] [Z&lt;pos&gt;]\n</code></pre> * <code>[E&lt;pos&gt;]</code> The length of filament to feed into the extruder between the start and end point</p> <ul> <li> <p><code>[F&lt;rate&gt;]</code> The maximum movement rate of the move between the start and end point. The feedrate set here applies to subsequent moves that omit this parameter.</p> </li> <li> <p><code>[X&lt;pos&gt;]</code> A coordinate on the X axis</p> </li> <li> <p><code>[Y&lt;pos&gt;]</code> A coordinate on the Y axis</p> </li> <li> <p><code>[Z&lt;pos&gt;]</code> A coordinate on the Z axis</p> </li> </ul> <p>source: G1</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#m211-software-endstops","title":"<code>M211</code> - software Endstops","text":"<p>Optionally enable and disabel software stop, this software stop prevent to go below 0</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Center%20and%20Z%20offset.html#usage-m211","title":"Usage <code>M211</code>","text":"<pre><code>M211 [S&lt;flag&gt;]\n</code></pre> <ul> <li><code>S&lt;flag&gt;</code> flag 0 for disable and 1 for enable</li> </ul> <p>Example: <pre><code>M211 S0\n</code></pre> source: M211</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html","title":"Debuging and Logging","text":""},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#debug","title":"Debug","text":""},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#m111-debug-level","title":"<code>M111</code> - Debug Level","text":"<p>There are several debug bits, to enable it is necessary add up the bits need it</p> Mask Name Description 1 ECHO Echo all commands sent to the parser. 2 INFO Print extra informational messages. 4 ERRORS Print extra error messages. 8 DRYRUN Don\u2019t extrude, don\u2019t save leveling data, etc. 16 COMMUNICATION Not currently used. 32 LEVELING Detailed messages for homing, probing, and leveling. (Requires <code>DEBUG_LEVELING_FEATURE</code>.) 64 Reserved Reserved for future usage 128 Reserved Reserved for future usage"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#usage-m111","title":"Usage <code>M111</code>","text":"<pre><code>M111 [S&lt;flags&gt;]\n</code></pre> <ul> <li><code>[S&lt;flags&gt;]</code> debug flag  bits</li> </ul> <p>Example:</p> <p>Enable extra messages</p> <p><code>M111 S38 ; LEVELING, ERRORS, INFO</code></p> <p>Enable everything except dry-run mode</p> <p><code>M111 S247 ; 255 - 8</code></p> <p>Disable previously set extra debugging output.</p> <p><code>M111 S0</code></p> <p>source: M111</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#m280-servo-position","title":"<code>M280</code> - Servo Position","text":"<p>Set or get the position of a servo.</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#using-m280","title":"Using <code>M280</code>","text":"<pre><code>M280 P&lt;index&gt; S&lt;pos&gt;\n</code></pre> <ul> <li> <p><code>P&lt;index&gt;</code> Servo index to set or get</p> </li> <li> <p><code>S&lt;pos&gt;</code>  Servo position to set. Omit to read the current position.</p> </li> </ul> <p>source: M280</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#logging","title":"Logging","text":"<p>This are G-code to get the logs of the printer or the board.</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#m928-start-sd-logging","title":"<code>M928</code> - Start SD Logging","text":"<p>Use this command to start logging all console and host input into the SD card</p> <p>use <code>M29</code> to stop logging</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#usage-m928","title":"Usage <code>M928</code>","text":"<pre><code>M928 filename\n</code></pre> <ul> <li>filename  File name of log file</li> </ul> <p>Example: <code>M928 log.txt</code></p> <p>source: M928</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#m28-start-sd-write","title":"<code>M28</code> - Start SD Write","text":"<p>This Commands start a file write, the firmware will log all commands, this command wont be execute until <code>M29</code> closes the file.</p> <p>Required <code>SDSUPPORT</code> To write file while printing use <code>M928</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#usage-m28","title":"Usage <code>M28</code>","text":"<p><pre><code>M28 filename\n</code></pre> * filename  File name of log file</p> <p>Example: <code>M28 file.txt</code></p> <p>source: M28</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#m29-stop-sd-write","title":"<code>M29</code> - Stop SD Write","text":"<p>Stop Writing to file begun with <code>M28</code> or <code>M928</code></p> <p>Require <code>SDSUPPORT</code></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/Debuging%20and%20Logging.html#usage-m28_1","title":"Usage <code>M28</code>","text":"<pre><code>M29\n</code></pre> <p>source: M29</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html","title":"E-steps and Extrutor multiplier","text":"<p>In order to have the best print quality, we need to have a correct calibration for the extruder this is achieve making a extruder steps and flow rate tune and calibrated for the printer.</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#e-steps","title":"E-steps","text":"<p>First we need to know what are the E-steps that the printer has at the moment, for that we use Octoprint (or any software that allow me to communicate with the printer by G-code) to send <code>M503</code> that will give me as a result different values, between those value we have the steps for each axis and the extruder</p> <p>This is an example of  a response with <code>M503</code> <pre><code>G21    ; Units in mm\nM149 C ; Units in Celsius\nFilament settings: Disabled\nM200 D1.75\nM200 D0\nSteps per unit:\nM92 X100.00 Y100.00 Z398.70 E100.00\nMaximum feedrates (units/s):\nM203 X400.00 Y400.00 Z8.00 E50.00\nMaximum Acceleration (units/s2):\nM201 X1000 Y1000 Z100 E10000\nAcceleration (units/s2): P R T\nM204 P400.00 R1000.00 T1000.00\nAdvanced: S T B X Z E\nM205 S0.00 T0.00 B20000 X10.00 Y10.00 Z0.30 E5.00\nHome offset:\nM206 X0.00 Y0.00 Z0.00\nAuto Bed Leveling:\nM420 S1 Z0.00\nMaterial heatup parameters:\nM145 S0 H195 B55 F0\nM145 S1 H205 B60 F0\nPID settings:\nM301 P52.25 I5.60 D122.00\nZ-Probe Offset (mm):\nM851 Z-2.41\n</code></pre></p> <p>Notice the lines</p> <pre><code>Steps per unit:\nM92 X100.00 Y100.00 Z398.70 E100.00\n</code></pre> <p>This means that currently the E-steps is 100</p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#calibrate-the-e-steps-will-be","title":"Calibrate the E-steps will be:","text":"<ol> <li>Make a mark in the filament, already loaded in the printer, at 120mm.</li> <li>Connect to the printer to send G-code.</li> <li>Execute <code>M83</code> ( this will  set the extruder to relative mode)</li> <li>Make the printer extrude 100mm of filament using <code>G1 E100 F100</code> (you can use the printer interface screen if it has one).</li> <li>wait until the printer finish the extrution</li> <li>measure how much filament is left before the extruder motor and the mark if the measurement is 20mm the e-steps are correct, if the number is different than that you need to make some changes in the E-steps</li> </ol>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#formula-to-find-new-e-steps","title":"Formula to find new E-steps","text":"<p>Now with the old E-step value and number we got from the previous procedure we can find the new e-steps, for this example lets assume that the distance from the extruder gear/motor to the mar was 19mm, it means our printer extruded 101mm instead of the 100mm we ask for</p> \\[ E-Steps(New) = old steps\\ x\\ (100/measured\\ distance\\ filament) \\] <p>the old steps will be 100, the 100 is the amount of filament we asked to extrude and the \"measured distance filament\" will be \\(120-19=101\\), so</p> \\[ E-steps_n = 100\\ x\\  (100/101) \\] \\[ E-steps_n = 101 \\]"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#save-the-new-e-step-value","title":"Save the New E-step Value","text":"<p>To save this new value, you will need to use the following command <pre><code>M92 E101.00 ; change E-steps for the new value\nM500 ; save new values to the EEPROM\n</code></pre></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#calibrating-the-extrusion-multiplier-or-flow-rate","title":"Calibrating the Extrusion multiplier or flow rate","text":"<p>After calibrate the E-steps we need to make sure the machine is extruding the correct amount of filament comparing with the model on the slicer.</p> <p>For this we will print a calibration cube that will be a hollow object with 2 perimeter layers or 2 walls , by default the Extruder width  will be 0.4mm the diameter of the nozzle, so the thickness of the walls ( 2 walls) should be 0.8mm, once we print the model we will measure the thickness with a caliper ( two measurements per wall).</p> <p>This example picture the there is just one wall</p> <p></p>"},{"location":"Miscellaneous/3D%20Printing/Setup%20and%20Calibration/E-steps%20and%20Extrutor%20multiplie.html#formula-to-calculate-flow-rate","title":"Formula to calculate flow rate","text":"<p>After measure all the walls we need to make the calculation</p> \\[ Average_t = (measurement_1wall_1 + measurement_2wall_1 + measurement_1wall_2 + ... measurement_2wall_4) / 0.8mm \\] <p>now</p> \\[ Flow-rate_n = Average_t\\ X\\ Current-Flow-rate \\]"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html","title":"Augmentation","text":"<p>In cases were the data is not enough or cases where we have a dataset and we start to see overfitting, augmentation can be a solution for the problem.</p> <p>For data augmentation we will use the class <code>ImageDataGenerator</code> and the different parameters, in this nodes I will add the code and graphics that help me to understand and visualize the benefits of augmentation.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-model-without-augmentation","title":"The model without Augmentation","text":"<p>The model without augmentation will be like the one we did in the previous note</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-model-code","title":"The model (code)","text":"<pre><code>!wget --no-check-certificate \\\n    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \\\n    -O /tmp/cats_and_dogs_filtered.zip\n\nimport os\nimport zipfile\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nlocal_zip = '/tmp/cats_and_dogs_filtered.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('/tmp')\nzip_ref.close()\n\nbase_dir = '/tmp/cats_and_dogs_filtered'\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, 'validation')\n\n# Directory with our training cat pictures\ntrain_cats_dir = os.path.join(train_dir, 'cats')\n\n# Directory with our training dog pictures\ntrain_dogs_dir = os.path.join(train_dir, 'dogs')\n\n# Directory with our validation cat pictures\nvalidation_cats_dir = os.path.join(validation_dir, 'cats')\n\n# Directory with our validation dog pictures\nvalidation_dogs_dir = os.path.join(validation_dir, 'dogs')\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=1e-4),\n              metrics=['accuracy'])\n\n# All images will be rescaled by 1./255\ntrain_datagen = ImageDataGenerator(rescale=1./255)\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\n# Flow training images in batches of 20 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        train_dir,  # This is the source directory for training images\n        target_size=(150, 150),  # All images will be resized to 150x150\n        batch_size=20,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n# Flow validation images in batches of 20 using test_datagen generator\nvalidation_generator = test_datagen.flow_from_directory(\n        validation_dir,\n        target_size=(150, 150),\n        batch_size=20,\n        class_mode='binary')\n\nhistory = model.fit(\n      train_generator,\n      steps_per_epoch=100,  # 2000 images = batch_size * steps\n      epochs=100,\n      validation_data=validation_generator,\n      validation_steps=50,  # 1000 images = batch_size * steps\n      verbose=2)\n</code></pre> <p>In this case we use the class <code>ImageDataGenerator</code> just to rescale the data.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-model-in-graphics","title":"The model in graphics","text":"<p>In the image bellow we can see that the accuracy of the training is \\(100\\%\\) but in the validation set the accuracy is not bigger than \\(75\\%\\).</p> <p></p> <p>now if we plot the results we will see some interesting points</p> <p></p> <p>Although the Training loss is \\(0\\), the validation loss is increasing, the accuracy on the training is \\(100\\%\\) but in the validation stop at around \\(70\\%\\), this is a clear indication that the model is suffering of over-fitting in other words it memorize the training data but is not able to generalize and perform well with data that haven't seen before.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-augmentation","title":"The Augmentation","text":"<p>To do the augmentation we will use some of the classes we use before, in this case we will use the class <code>ImageDataGenerator</code> previously we use it for <code>rescale</code> but in this case we will use some of the parameter to make the augmentation.</p> <p>From the documentation we now that the class <code>ImageDataGEnerator</code> is as follow:</p> <pre><code>tf.keras.preprocessing.image.ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    zca_epsilon=1e-06,\n    rotation_range=0,\n    width_shift_range=0.0,\n    height_shift_range=0.0,\n    brightness_range=None,\n    shear_range=0.0,\n    zoom_range=0.0,\n    channel_shift_range=0.0,\n    fill_mode='nearest',\n    cval=0.0,\n    horizontal_flip=False,\n    vertical_flip=False,\n    rescale=None,\n    preprocessing_function=None,\n    data_format=None,\n    validation_split=0.0,\n    dtype=None\n)\n</code></pre> <p>Although we are going to use just few of them</p> <ul> <li><code>rescale</code></li> <li><code>rotation_range</code></li> <li><code>width_shift_range</code></li> <li><code>height_shift_range</code></li> <li><code>shear_range</code></li> <li><code>zoom_range</code></li> <li><code>horizontal_flip</code></li> <li><code>fill_mode</code></li> </ul>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#rotation_range","title":"<code>rotation_range</code>","text":"<p>This parameter will rotate the image from 0~180 degrees randomly, so if we do <code>rotation_range=40</code> the image will be rotated randomly from 0 to 40 degrees.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#width_shift_range-and-height_shift_range","title":"<code>width_shift_range</code> and <code>height_shift_range</code>","text":"<p>This will shift the subject within the frame, the value will be a proportion of the total size .</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#shear_range","title":"<code>shear_range</code>","text":"<p>this will skew the image along the x-axis, this will help us to simulate different position of the subject. </p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#zoom_range","title":"<code>zoom_range</code>","text":"<p>In will zoom Randomly a having as limit the value we pass to the parameter</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#horizontal_flip","title":"<code>horizontal_flip</code>","text":"<p>It will flip the sample horizontally, it is a good way to generate data of different position, let say we have a picture with a person raising the left arm, if we flip it horizontally we will have a picture of a person raising the right arm.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#fill_mode","title":"<code>fill_mode</code>","text":"<p>fill the empty space left after the transformation, the default option is <code>nearest</code> but there are option like 'constant\", \"nearest\", \"reflect\" or \"wrap\".</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#a-model-with-the-augmentation","title":"A model with the Augmentation","text":"<p>Now we will add the augmentation to the previous model, as we mention the augmentation will be in the class <code>ImageDataGenerator</code></p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-augmentation-code","title":"The Augmentation (code)","text":"<pre><code>train_datagen = ImageDataGenerator(\n      rescale=1./255,\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-model-with-augmentation","title":"The model with Augmentation","text":"<p>and now the full model will be:</p> <pre><code>!wget --no-check-certificate \\\n    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \\\n    -O /tmp/cats_and_dogs_filtered.zip\n\nimport os\nimport zipfile\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nlocal_zip = '/tmp/cats_and_dogs_filtered.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('/tmp')\nzip_ref.close()\n\nbase_dir = '/tmp/cats_and_dogs_filtered'\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, 'validation')\n\n# Directory with our training cat pictures\ntrain_cats_dir = os.path.join(train_dir, 'cats')\n\n# Directory with our training dog pictures\ntrain_dogs_dir = os.path.join(train_dir, 'dogs')\n\n# Directory with our validation cat pictures\nvalidation_cats_dir = os.path.join(validation_dir, 'cats')\n\n# Directory with our validation dog pictures\nvalidation_dogs_dir = os.path.join(validation_dir, 'dogs')\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=1e-4),\n              metrics=['accuracy'])\n\n# This code has changed. Now instead of the ImageGenerator just rescaling\n# the image, we also rotate and do other operations\n# Updated to do image augmentation\ntrain_datagen = ImageDataGenerator(\n      rescale=1./255,\n      rotation_range=40,\n      width_shift_range=0.2,\n      height_shift_range=0.2,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\n# Flow training images in batches of 20 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        train_dir,  # This is the source directory for training images\n        target_size=(150, 150),  # All images will be resized to 150x150\n        batch_size=20,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n# Flow validation images in batches of 20 using test_datagen generator\nvalidation_generator = test_datagen.flow_from_directory(\n        validation_dir,\n        target_size=(150, 150),\n        batch_size=20,\n        class_mode='binary')\n\nhistory = model.fit(\n      train_generator,\n      steps_per_epoch=100,  # 2000 images = batch_size * steps\n      epochs=100,\n      validation_data=validation_generator,\n      validation_steps=50,  # 1000 images = batch_size * steps\n      verbose=2)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-performance-graphically","title":"The performance graphically","text":""},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Augmentation_technique_to_avoid_overfitting.html#the-code-use-to-make-the-graphics","title":"The code use to make the graphics","text":"<pre><code>import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'bo', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html","title":"Transfer Learning","text":""},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#preparing-pre-trained-model","title":"Preparing pre-trained model","text":"<p>Transfer Learning is basically use pre-trained models as base for our models, those pre-trained models in most of the cases have been train with millions of samples and the have been improve for specialist in the field. In most of the cases use this transfer learning will reduce the implementation time and increase the value of the result obtained.</p> <p>For this example we will use a model called InceptionV3</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#the-inputs","title":"The Inputs","text":"<p>We will need to do some manipulation of the model the layers of the pre-train model, we need to changes the weights as well as some layers, for that we need to import coupe things</p> <pre><code>import os\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#import-the-pre-trained-model","title":"Import the pre-trained model","text":"<p>we need some new weight, in this case we can get those new weights from</p> <p>https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5</p> <ol> <li>We will import the model.</li> <li>We will create a variable to hold the new pre-trained weights.</li> <li>Create the <code>pre_trained_model</code> be aware of <code>include_tope=False</code> and <code>weights=None</code>. Inception model has a dense connected layer on the top, and we dont need it so with <code>include_tope=False</code> we can remove that dense layer. <code>weights=None</code> tell the model that we will use our own weights.</li> </ol> <pre><code>import os\n\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\n\n# This is to download the model to the colab environment\n!wget --no-check-certificate \\\n    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n    -O /tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n\n# Variable that hold the weights\nlocal_weights_file = '/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n#  get the pre-trained model without top layer or weights\npre_trained_model = InceptionV3(input_shape = (150, 150, 3),\n                                include_top = False,\n                                weights = None)\n# add our own weights\npre_trained_model.load_weights(local_weights_file)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#lock-layers","title":"Lock layers","text":"<p>Now, we don't need to retrained the layers on the pre_trained_model, so we need to lock that layer so they are not going to be trained, for that we will go layer by layer locking them up.</p> <pre><code>for layer in pre_trained_model.layers:\n  layer.trainable = False\n\n# pre_trained_model.summary()\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#adding-our-own-code","title":"Adding our own code","text":"<p>To add our own code first we need to know which is the last layer, in this model the last layer is a convolution of \\(3x3\\) but we can get other layers and use it as last layer, to do that we will use the names of the layers, yes the layers have a name, so we can get them using the names, in this, case we will use the layer called <code>mixed7</code></p> <pre><code>last_layer = pre_trained_model.get_layer('mixed7')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#defining-a-new-model","title":"Defining a new model","text":"<p>To define the new model we will use the last layer of the previous steps and some new layers, few things to be aware of, we will use a slightly different syntax, but we will just adding new layers to the model. Once we have all the layers we will use the abstract class <code>Model</code> to create our new model.</p> <p><pre><code>from tensorflow.keras.optimizers import RMSprop\n\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\nx = layers.Dense(1024, activation='relu')(x)\nx = layers.Dense  (1, activation='sigmoid')(x)\n\nmodel = Model( pre_trained_model.input, x)\n\nmodel.compile(optimizer = RMSprop(lr=0.0001),\n              loss = 'binary_crossentropy',\n              metrics = ['accuracy'])\n</code></pre> In the previous code:</p> <ol> <li>We flatten the last_output that is what is coming form the pre-trained model.</li> <li>Create a dense layer.</li> <li>Create a last Dense layer that will be the output of the whole model.</li> <li>Use the abstract class <code>Model</code> to create the new model, we pass the input of the pre-trained model and the layer definition we did in the previous steps.</li> </ol>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#augmentation-and-fitting","title":"Augmentation and fitting","text":"<p>We don't need to change anything form the augmentation and the fitting section.</p> <p>just a remainder of the augmentation we did before. <pre><code>train_datagen = ImageDataGenerator(rescale = 1./255.,\n                                   rotation_range = 40,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n</code></pre></p> <p>We will see that we are having an over-fitting case. </p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/Transfer_Learning.html#dropout-layers","title":"Dropout Layers","text":"<p>In some cases we will have some over-fitting after the image augmentation, so it is a good practice to have some Dropout Layers, this layer will randomly turn off and on some of the neurones in the layers, preventing the over-fitting.</p> <p>Dropout layers are Regulazers</p> <p>the dropout layer will look like this: <pre><code>x = layers.Dropout(0.2)(x)\n</code></pre> The <code>0.2</code>  tell the model to drop up to 20% of the neurons.</p> <p>so the code will be:</p> <pre><code># Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 1,024 hidden units and ReLU activation\nx = layers.Dense(1024,activation='relu')(x)\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)\n# Add a final sigmoid layer for classification\nx = layers.Dense(1, activation='sigmoid')(x)\n\nmodel = Model(pre_trained_model.input, x)\n\nmodel.compile(optimizer = RMSprop(lr=0.0001),\n              loss = 'binary_crossentropy',\n              metrics =['accuracy'])\n\nmodel.summary()\n</code></pre> <p>the full model in this Colab</p> <p>34277d71620fd6e8b442837ae1bc3d161014df4e</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html","title":"Exploring large Datasets - Cats vs Dogs","text":"<p>This part of the week we the course focus more in the convolutional Network, using as example the cats and dogs Kaggle competition.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#dataset-and-filedirectory-structure","title":"Dataset and file/directory structure","text":"<p>First we will need to organize the directory in such way that mimic the structure that we use in previous example</p> <p> But in this case we will do it with the cats and dogs dataset.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#1-download-the-dataset","title":"1. Download the dataset","text":"<p>First we need to download the dataset from kaggle ( casts vs dogs dataset)</p> <p>This data set contain images of cats and dogs all in a single directory.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#2-reorganize-the-dataset-in-a-specific-directory-structure","title":"2. Reorganize the dataset in a specific directory structure","text":"<p>We want to re-organize the data to follow the structure: <pre><code>cats-v-dogs\n        |\n        --&gt; Training\n                |\n                ---&gt;dogs\n                |\n                ---&gt;cats\n        |\n        --&gt; Testing\n                |\n                ---&gt;dogs\n                |\n                ---&gt;cats\n</code></pre></p> <p>For that we will make use of the <code>os</code> library and the <code>path.join()</code> and <code>os.mkdir()</code> functions</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#regarding-the-code","title":"Regarding the code","text":""},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#1-libraries-to-import","title":"1. Libraries to import","text":"<p>We will need several libraries but for the first step we will need something to get the Dataset .zip file, something to create the path and directories and something to copy the files to the new directory</p> <ol> <li><code>import os</code> It will allow use to make directories and create the paths</li> <li><code>import zipfile</code> allow use to handle .zip files</li> <li><code>from shutil import copyfile</code> allow use to copy files from one directory to other.</li> </ol> <p><code>import random</code> we will use it later to randomize the samples, so later we can divide the dataset in training and test in the random way.</p> <p><pre><code>import os\nimport zipfile\nimport random\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom shutil import copyfile\n</code></pre> We will use the <code>ImageDataGenerator</code> class just for re-scale the data but in the future we will use it to generate more data.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#2-handle-the-zipfile","title":"2. Handle the zipfile","text":"<p>THis is going to use code use on colab and jupyter notebooks, this might be different if we are using just an script and running it locally.</p> <p><pre><code>!wget --no-check-certificate \\\n    \"https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip\" \\\n    -O \"/tmp/cats-and-dogs.zip\"\n\nlocal_zip = '/tmp/cats-and-dogs.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('/tmp')\nzip_ref.close()\n</code></pre> The content of the zip file will be \"unzip\" on the directory <code>/tmp</code>.</p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#checking-the-size-of-the-directory","title":"Checking the size of the directory","text":"<p>We can check the size of the directory using <code>os.listdir('path')</code> <pre><code>print(len(os.listdir('/tmp/PetImages/Cat/')))\nprint(len(os.listdir('/tmp/PetImages/Dog/')))\n</code></pre></p>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#3-creating-the-directory-structure-and-moving-files","title":"3.  Creating the directory structure and moving files","text":"<p>The creation of directories is a task that might fail so it is a good practice to put it on a <code>try/except</code> block</p> <p>First we will create the path to the directories we want to create, we will do that using <code>os.path.join(parent_dir, child_dir)</code></p> <p><pre><code>base_path = os.path.join('/tmp/','cats-v-dogs')\ntraining_path = os.path.join(base_path,'/tmp/cats-v-dogs/training')\ntrain_dog_path = os.path.join(training_path,'/tmp/cats-v-dogs/training/dogs')\ntrain_cat_path = os.path.join(training_path,'/tmp/cats-v-dogs/training/cats')\ntesting_path = os.path.join(base_path,'/tmp/cats-v-dogs/testing')\ntest_dog_path = os.path.join(testing_path,'/tmp/cats-v-dogs/testing/dogs')\ntest_cat_path = os.path.join(testing_path,'/tmp/cats-v-dogs/testing/cats')\n</code></pre> Now we need to use <code>os.mkdir('path')</code> to create the directories, all of this inside a <code>try/except</code> block.</p> <pre><code>try:\n    os.mkdir(base_path)\n    os.mkdir(training_path)\n    os.mkdir(testing_path)\n    os.mkdir(train_dog_path)\n    os.mkdir(train_cat_path)\n    os.mkdir(test_dog_path)\n    os.mkdir(test_cat_path)\nexcept OSError:\n    pass\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#4-split-the-dataset-in-training-and-testing","title":"4. Split the dataset in Training and Testing","text":"<p>Now, we need to create a dataset to be used as training data and other as testing, for that we can create a function, this case we will create function that will get as parameters: SOURCE, TRAINING, TESTING, SPLIT-SIZE. SOURCE been the original folder and the SPLIT_SIZE ratio to split the dataset.</p> <p><pre><code>def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n    clean_list = [data for data in os.listdir(SOURCE) if os.path.getsize(SOURCE+data)  ]\n    random_list = random.sample(clean_list, len(clean_list))\n    limit = int(len(random_list)*SPLIT_SIZE)\n    training_list = random_list[:limit]\n    testing_list = random_list[limit:]\n    for img in training_list:\n        copyfile(os.path.join(SOURCE,img), os.path.join(TRAINING,img))\n    for img in testing_list:\n        copyfile(os.path.join(SOURCE,img), os.path.join(TESTING,img))\n</code></pre> In the nutshell:</p> <ol> <li>we get the full dataset, check remove those files that are corrupt or which size is <code>0</code> using <code>os.path.getsize()</code>.</li> <li>later randomize the dataset with <code>random.sample()</code>.</li> <li>Create a limit based in what is the ratio split for the dataset (example: \\(.9\\) means \\(90\\%\\) data goes for Training \\(10\\%\\) for testing).</li> <li>Create 2 list one for training others for testing.</li> <li>Finally using <code>copyfile()</code> we move the files from the source to the final destination.</li> </ol> <p>Here is how it will look in the Notebook</p> <pre><code>def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n    print(f' Source path {SOURCE},\\n Training {TRAINING}')\n    clean_list = [data for data in os.listdir(SOURCE) if os.path.getsize(SOURCE+data)  ]\n    random_list = random.sample(clean_list, len(clean_list))\n    limit = int(len(random_list)*SPLIT_SIZE)\n    print(f'total: {len(random_list)} after split {limit}')\n    training_list = random_list[:limit]\n    testing_list = random_list[limit:]\n    print(f'{len(training_list)}, {len(testing_list)}')\n    for img in training_list:\n        copyfile(os.path.join(SOURCE,img), os.path.join(TRAINING,img))\n    for img in testing_list:\n        copyfile(os.path.join(SOURCE,img), os.path.join(TESTING,img))\n\n\nCAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\nTRAINING_CATS_DIR = \"/tmp/cats-v-dogs/training/cats/\"\nTESTING_CATS_DIR = \"/tmp/cats-v-dogs/testing/cats/\"\nDOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\nTRAINING_DOGS_DIR = \"/tmp/cats-v-dogs/training/dogs/\"\nTESTING_DOGS_DIR = \"/tmp/cats-v-dogs/testing/dogs/\"\n\nsplit_size = .9\nsplit_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\nsplit_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#5-the-model","title":"5. The model","text":""},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#the-architecture-of-the-model","title":"The architecture of the model","text":"<p>We are going to use 3 layers of convolution and 3 of pooling. The important details will be the first layer that contain the <code>input_size()</code> 150X150 size x3 because it is a color image so we need 3 channels (RGB). The last Layer will use a different activation function, in this case a <code>sigmoid</code> because the selection we are doing is binary (cat and dog) so sigmoid is the best option.</p> <pre><code>model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16,(3,3),activation='relu', input_shape=(150,150,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32,(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64,(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512,activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')\n])\n</code></pre> <p>Now for the compilation we will use an optimizer <code>RMSprop(lr=0,001)</code> the learning rate will be <code>lr=0.001</code>, the loss function will be <code>binary_crossentropy</code> again because is a binary selection, and the metric will be <code>accuracy</code>.</p> <pre><code>model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['accuracy'])\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#image-data-generator","title":"Image Data Generator","text":"<p>In this case we wont use the different parameters of the class <code>ImageDataGenerator</code> we will use just the rescale parameter.</p> <p><pre><code>train_datagen = ImageDataGenerator(rescale=1./255)\n</code></pre> now to be able to use it correctly we will follow the steps:</p> <ol> <li>Define the Training directory path.</li> <li>Create an instance of <code>ImageDataGenerator</code>.</li> <li>Use <code>flow_from_directory</code> to get the different pieces of data\\</li> </ol> <pre><code>batch_size = 10 # we need this later\n#1. Training directory\nTRAINING_DIR = \"/tmp/cats-v-dogs/training\"\n#2. Instance of class ImageDataGEnerator\ntrain_datagen = ImageDataGenerator(rescale=1./255)\n#3. use `flow_from_directory` to process the files\ntrain_generator = train_datagen.flow_from_directory(\n                                             directory=TRAINING_DIR,\n                                              target_size =(150,150),\n                                              batch_size=batch_size,\n                                              class_mode='binary' )\n\nVALIDATION_DIR = '/tmp/cats-v-dogs/testing'\nvalidation_datagen = ImageDataGenerator(rescale=1./255)\nvalidation_generator = validation_datagen.flow_from_directory(\n                                             directory=VALIDATION_DIR,\n                                              target_size =(150,150),\n                                              batch_size=batch_size,\n                                              class_mode='binary' )\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#training-the-model","title":"Training the model","text":"<p>We will use the ImageDataGEnerator create before to train the model</p> <pre><code>history = model.fit(train_generator,\n                              epochs=15,\n                              verbose=1,\n                              validation_data=validation_generator)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Convolutional%20Neural%20Networks%20in%20TensorFlow/exploring_large_dataset.html#6-plot-the-results","title":"6. Plot the results","text":"<p>The following is copy form the coded provided in the coursera course, it is use to plot the results of the model, it will plot Loss and Accuracy</p> <pre><code># PLOT LOSS AND ACCURACY\n%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot(epochs, acc, 'r', \"Training Accuracy\")\nplt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\nplt.title('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'r', \"Training Loss\")\nplt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n\n\nplt.title('Training and validation loss')\n\n# Desired output. Charts with training and validation metrics. No crash :)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Convolutional_Neural_network_Overview.html","title":"Convolutional Neural network Overview","text":"<p>in this additional note we describe some concept mentioned about but in this case from the theory perspective, we make mentione of an architecture called LeNeT-5 which is a convolutional network designed for handwritten and machine-printed character recognition.</p> <p>From this architecture, we need to consider that we are not flatten the image in any way in order to maintain the spatial relationship between the pixels ( if we flatten we will lose that spatial information).</p> <p>Now for the input we need to think in different ways: in terms of 3D Volumes this means that the image has a depth associated with it. This is called the number of  channels. For example, a color image or a RGB image of \\(M * N\\) will have 3 channels ( one r, B, and G) so the full shape will be $ M * N * 3$ in contrast to a gray scale image that will be \\(M * N * 1\\), this input are called image volumes.</p> <p></p> <p>In this architecture we have three different kinds of layers: Convolutional Layer, pooling Layer, and fully-connected Layers.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Convolutional_Neural_network_Overview.html#convolution-layer","title":"Convolution Layer","text":"<p>This is the most important layer in CNNs: it gives the CNN its name, The convolution Layer, is where the feature learning happens, the idea is that we have a number of filters or kernels. These filters are just small patches that represent some kind of visual feature, \"weights\" and \"biases\" of the CNN.</p> <p></p> <p>We take each filter and convolve it over the input volume to get a single activation map, so in other words, we convolve a filter with an input volume to get back a activation map that tells us \"How well\" parts of the input \"respond\" to the filter.</p> <p>Like in the example mentioned before about the horizontal lines and vertical lines, in the case of the horizontal line, we use a horizontal line filter, that will generate a activation map that indicates where the horizontal lines are in the input. The best part of CNN is that this filter are not hard-coded, they are learned, that means that we don't need to explicitly tell the CNN to look for horizontal lines, it will do all it by itself during the backprop.</p> <p>In this Convolution Layer (or CONV Layer), we need to specify at least the number of filters and their size (width and height). some additional parameters will be padding and stride (not cover here), in terms of input and outputs, suppose a CONV layer  receives an input of size</p> \\[ W_{in} * H_{in} * C_{in} \\] <p>(assuming zero padding and stride 1), the output width and height of the output activation maps will be</p> \\[ W_{out} = W_{in} - F_{w} + 1 \\] <p>and</p> \\[ H_{out} = H_{in} - F_{h} + 1 \\] <p>where \\(F_w\\) and \\(F_h\\) are the width and height of the filters then the output will be $$ W_{out} * H_{out} * F $$</p> <p>so for a an image volume of 32x32x1 with a filter size 5x5 and 6 of depth we will have an output action map of 28x28x6</p> <p>Immediately following the CONV layer, we apply a non-linearity to each value in each activation map over the entire volume. The Rectified Linear Unit or ReLU is most freaquent  used for CNNs</p> \\[ f_{(x)} = max(0,x) \\] <p></p> <p>it is zero for \\(x&lt;=0\\) and \\(x&gt;0\\), this is the activation use most frequently and that work well with this kind of scenarios.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Convolutional_Neural_network_Overview.html#pooling-layer","title":"Pooling Layer","text":"<p>This layer is primarily used to help reduce the computational complexity and extract prominent features, the pooling Layer (POOL) has no weights/parameters, unlike CONV layers. The result is smaller activation volume along the width and height. the depth of the input is still maintained, so if 12 activation maps go to the POOL layer, the output will also have 12 activation maps.</p> <p>For the POOL layer, we have to define the pool size, which tells us by how much we will reduce the width and height of the activation volume, if we want to halve the activation volume in width and height, we would choose a pool size of 2x2, if we wanted to reduce it by more, we should choose a larger pool size.</p> <p>The computation we do depends on the type of pooling: average or max.</p> <p></p> <p>For max pooling, inside of the window, we just choose the maximum value in that window. This intuitively corresponds to choosing the most prominent features. For average pooling, we take the average of the values in the window. This produces smoother results than max pooling.</p> <p>In practice, max pooling is used more frequently than average pooling, and the most common pooling size is 2\u00d72.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Convolutional_Neural_network_Overview.html#fully-connected-layer","title":"Fully-Connected Layer","text":"<p>This layer is the common artificial neural network, the catch, we have a activation volume as output of the CONV and POOL Layers, and this layer accept just a vector, so we will need to flatten this volume.</p> <p></p> <p>After flattening the volume, we can treat this layer just like a neural network! It is okay to flatten here since we\u2019ve already passed through all of the CONV layers and applied the filters.</p> <p>Reference</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html","title":"Enhancing vision with convolutional Neural Networks","text":""},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#what-are-convolutions-and-pooling","title":"What are convolutions and pooling?","text":"<p>One thing, we can see from the previous exercise is that there is a lot of wasted space in each image. while there are only 784 pixels, it will be interesting if there is a way to condense this image to those important features that make a bag, a shoe or a bag, that's is where convolutions come in.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#what-is-convolution","title":"What is convolution?","text":"<p>To use an analogy, in image processing normally involve having a filter and passing that filter over the image in order to change the underlying image. The convolution will work in a similar way.  </p> <p>The process will be a little bit like this:</p> <ul> <li>For every pixel, take its value, and take a look at the value of its neighbors. let say 192 in the image above.</li> </ul> <pre><code>|   0    |    64    |   128  |\n|--------|----------|--------|\n|   48   |    192   |   144  |\n|--------|----------|--------|\n|  142   |    226   |   168  |\n</code></pre> <ul> <li>If the filter is \\(3x3\\), then we can take a look at the immediate neighbor, so we will have a corresponding \\(3x3\\) grid.</li> </ul> <pre><code>|   -1   |    0     |   -2   |\n|--------|----------|--------|\n|  0.5   |    4.5   |  -1.5  |\n|--------|----------|--------|\n|  1.5   |    2     |   -3   |\n</code></pre> <ul> <li>Now we can get the new value for the pixel, we simply multiply each neighbor by the corresponding value in the filter.</li> </ul> \\[ Current pixel = 192\\] \\[ New pixel = (-1 * 0)+(0 * 64)+(-2 * 128)+(0.5 * 48)+(4.5 * 192)+(-1.5 * 144)+(1.5 * 142)+(2 * 226)+(-3 * 168) \\] <ul> <li>we have the new pixel with the sum of each of the neighbor values multiplied by the corresponding filter value, and that's a convolution.</li> </ul> <p>The idea here is that some convolutions will change the image in such a way that certain features in the image get emphasized. So, for example, if you look at this filter.</p> <p></p> <p>Then the vertical lines in the image really pop out.</p> <p></p> <p>Now with this filter, the horizontal lines pop out.</p> <p>When convolution is combine with something call pooling they will become really powerful, a quick and easy way to do this, is to go over the image of four pixels at a time, of these four, pick the biggest value and keep just that. So, for example:</p> <p></p> <p>So 16 pixels on the left are turned into the four pixels on the right, by looking at them in two-by-two grids and picking the biggest value. This will preserve the features that were highlighted by the convolution, while simultaneously quartering the size of the image. We have the horizontal and vertical axes.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#class-conv2d","title":"Class <code>Conv2d</code>","text":"<p>This is the class that we are going to use to make the convolution, for more detailed information we can check the TesorFLow documentation about Conv2d.</p> <p>This layer creates a convolution kernel, which in or example was a 3x3, that is convolved with the layer input to produce a tensor of outputs. If <code>use_bias</code> is True, a bias vector is created and added to the outputs. Finally, if <code>activation</code> is not <code>None</code>, it is applied to the outputs as well.</p> <p>When using this layer as the first layer in a model, provide the keyword argument <code>input_shape</code> (tuple of integers, does not include the sample axis), e.g. <code>input_shape=(128, 128, 3)</code> for 128x128 RGB pictures or <code>input_shape(128,128,1)</code> for one gray scale 128x128 image.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#syntax-convolution-layer","title":"Syntax Convolution layer","text":"<pre><code>tf.keras.layers.Conv2D(64,(3,3), activation+'relu', input_shape(28,28,1))\n</code></pre> <p>This will be if this is the first layer of the model, we will need to add <code>input_shape(28,28,1)</code> because the image is a gray scale 28x28.</p> <p>for a layer that is not the first one it will be:</p> <pre><code>tf.keras.layers.Conv2D(64,(3,3), activation='relu')\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#class-maxpooling2d","title":"Class <code>MaxPooling2D</code>","text":"<p>Max pooling layer for 2D inputs (example an image)</p> <p>more information in the tensorFlow documentation about MaxPooling2D</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#syntax-maxpooling-layer","title":"Syntax MaxPooling layer","text":"<pre><code>tf.keras.layers.MaxPooling2D(2,2)\n</code></pre> <p>in this case we create a grid of 2x2.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Enhancing_vision_with_convolutional_Neural_Networks.html#example-of-a-model-with-convolutional-and-maxpooling","title":"Example of a model with Convolutional and Maxpooling","text":"<p><pre><code>model= tf.keras.models.Sequencial([\n    tf.keras.layers.Conv2D(64,(3,3), activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64,(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10,activation='softmax')\n    ])\n</code></pre> so in the first convolution layer we are asking keras to generate 64 filters for us, these filter are 3x3, their activation is <code>relu</code>, which mean that negative value will be throw away, finally  the input shape is as before, the 28 by 28. that extra 1 just means that we have just 1 color depth.</p> <p>the second layer, it is the pooling layer, it is max-pooling because we're going to take the maximum value.</p> <p>so in the script we have a image that have being pass for 2 convolutional layers and 2 max-pooling, that means, that the image has been quarter and quarter again, so when we arrived to the flatten layer we have a greatly simplify image.</p> <p>now, we can use a good method call <code>summary()</code> like this</p> <pre><code>model.summary()\n</code></pre> <p>this allow use to inspect the layers of the model and see the journey of the image through the convolution.</p> <p></p> <p>the table is showing  the layer and some details about them, including the output, one of the most important columns is the output shape, one things that we will notice is:</p> <p></p> <p>the output shape isn't 28x28 instead 26x26, remember the filter is 3x3, so if we are trying to scan a picture we won't be able to scan form the top left corner, because  it doesn't have any neighbors.</p> <p></p> <p>we will need to start from one pixel down and one pixel to the right</p> <p></p> <p>this means we cant use a one pixel margin all around the image, so the output of the convolution will be 2 pixel smaller in <code>x</code>  and 2 pixel smaller in <code>y</code>, if we use a filter 5x5 the output will be smaller, but in a filter 3x3 the output shape of an input of 28x28 will be 26x26.</p> <p>The next, is the first max-pooling layer. We specified it to be two-by-two, thus turning four pixels into one, so now the output get reduced from 26 by 26, to 13 by 13.</p> <p></p> <p>The next convolution will operate in this, losing one margin as before, and we are down to 11 by 11, add another two-by-two max-pooling layers, rounding down, and we when down to a image of 5 by 5 instead of 28 by 28.</p> <p></p> <p>The Number of convolutions per image, in this case 64 (filters) and size  five-by-five pixels are fed in to the Flatten, that will output 25 pixels times 64, which is 1600. Then the flattened layer will get 1,600 elements in it, as opposed to the 784 that you had previously. This number is impacted by the parameters that you set when defining the convolutional 2D layers.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html","title":"Introduction to computer vision","text":"<p>so in the previous notes we use the numpy array as a way to provide the arrays for training the model, although in a real scenario, hard coding the data won't be possible, in the following example we are going to use a data set call fashion-mnist and since this is a data set with 60.000 example for training and 10.000 examples for testing we will need to load the data in a different way.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#importing-fashion-mnist-using-keras","title":"Importing fashion-mnist using keras","text":"<p>Fortunately, it's still quite simple because Fashion-MNIST is available as a data set with an API call in TensorFlow. We simply declare an object of type MNIST loading it from the Keras database.</p> <pre><code>fashion_mnist = keras.dataset.fashion_mnist\n(train_images, train_label), (test_images, test_labels) = fashion_mnist.load_data()\n</code></pre> <p>We simply declare an object of type MNIST loading it from the Keras database. On this object, if we call the load data method, it will return four lists to us. That's the training data, the training labels, the testing data, and the testing labels.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#input-shape","title":"Input Shape","text":"<p>Here you saw how the data can be loaded into Python data structures that make it easy to train a neural network.</p> <p> </p> <p>The image is represented as a 28x28 array of greyscales, and how its label is a number. Using a number is a first step in avoiding bias -- instead of labelling it with words in a specific language and excluding people who don\u2019t speak that language!</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#labels","title":"Labels","text":"<p>Each training and test example is assigned to one of the following labels:</p> Label Description 0 T-shirt/top 1 Trouser 2 Pullover 3 Dress 4 Coat 5 Sandal 6 Shirt 7 Sneaker 8 Bag 9 Ankle boot"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#about-the-layers-of-the-model","title":"About the layers of the model","text":"<p>we will look at the code for the neural network definition. Previously, we have just one layer, now we have three layers, it  is important  to look at are the first and the last layers.</p> <pre><code>model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28,28)),\n    keras.layers.Dense(128, activation=tf.nn.relu),\n    keras.layers.Dense(10, activation=tf.nn.softmax)])\n</code></pre> <p>The last layer has 10 neurons in it because we have ten classes of clothing in the dataset. They should always match. The first layer is a flatten layer with the input shaping 28 by 28, this is because the images are 28X28, so we're specifying that this is the shape that we should expect the data to be in. Flatten takes this 28 by 28 square and turns it into a simple linear array.</p> <p>The interesting stuff happens in the middle layer, sometimes also called a hidden layer. This is a 128 neurons in it, we can think these neurons as variables in a function. Maybe call them x1, x2 x3, etc.</p> <p></p> <p>if you then say the function was <code>y</code> equals <code>w1</code> times <code>x1</code>, plus <code>w2</code> times <code>x2</code>, plus <code>w3</code> times <code>x3</code>, all the way up to a <code>w128</code> times <code>x128</code> (\\(y = w_1x_1 +w_2x_2+w_3x_3+...+w_{128}x_{128}\\)). By figuring out the values of <code>w</code>, then <code>y</code> will be <code>9</code>, which is the category of the shoe.</p> <p>We can check the exercise in the colab A Computer Vision Example</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#an-example-of-a-script","title":"An Example of a script","text":"<p>A full script will look like:</p> <pre><code>import tensorflow as tfprint(tf.__version__)\n#The Fashion MNIST data is available directly in the tf.keras datasets API. You load it like this:\nmnist = tf.keras.datasets.fashion_mnist\n(traning_images. training_labels),(test_images, test_labels) = mnist.load_data()\n#You'll notice that all of the values in the number are between 0 and 255. If we are training a neural network, for various reasons it's easier if we treat all values as between 0 and 1, a process called 'normalizing'...and fortunately in Python it's easy to normalize a list like this without looping. You do it like this:\n\ntraining_images  = training_images / 255.0\ntest_images = test_images / 255.0\n\nmodel = tf.keras.models.Sequential([tf.keras.layers.Flatten(),\n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])\nmodel.compile(optimizer = tf.train.AdamOptimizer(),\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(training_images, training_labels, epochs=5)\n# now let see how good is the model\nmodel.evaluate(test_images, test_labels)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#explanation-of-some-keywords","title":"Explanation of some Keywords","text":"<ul> <li> <p>Sequential: That defines a SEQUENCE of layers in the neural network</p> </li> <li> <p>Flatten: Remember earlier where our images were a square, when you printed them out? Flatten just takes that square and turns it into a 1 dimensional set.</p> </li> <li> <p>Dense: Adds a layer of neurons</p> </li> </ul> <p>Each layer of neurons need an activation function to tell them what to do. There's lots of options, but just use these for now.</p> <ul> <li> <p>Relu effectively means \"If X&gt;0 return X, else return 0\" -- so what it does it it only passes values 0 or greater to the next layer in the network.</p> </li> <li> <p>Softmax takes a set of values, and effectively picks the biggest one, so, for example, if the output of the last layer looks like [0.1, 0.1, 0.05, 0.1, 9.5, 0.1, 0.05, 0.05, 0.05], it saves you from fishing through it looking for the biggest value, and turns it into [0,0,0,0,1,0,0,0,0] -- The goal is to save a lot of coding!</p> </li> </ul>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Introduction%20to%20computer%20vision.html#callback-to-stop-the-training","title":"Callback to stop the training","text":"<p>first we will need to create the class <code>myCallback</code></p> <pre><code>class myCallback(tf.keras.callbacks.Callback):\n    \"\"\"docstring for myCallback\"\"\"\n    def on_epoch_end(self,epoch,logs={}):\n        if(logs.get('acc')&gt;0.6):\n            print(\"\\n Reached 60% accuracy so cancelling training!\")\n            self.model.stop_training = True\n</code></pre> <p>Instantiate the myCallback class</p> <pre><code>callbacks = myCallbacks()\n</code></pre> <p>now we can make changes in the <code>fit</code> function to add the callback</p> <pre><code>model.fit(x_training,y_training, epochs=1-,callbacks=[callbacks])\n</code></pre> <p>so the completed script will be:</p> <pre><code>import tensorflow as tf\n\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('acc')&gt;0.6):\n      print(\"\\nReached 60% accuracy so cancelling training!\")\n      self.model.stop_training = True\n\nmnist = tf.keras.datasets.fashion_mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\ncallbacks = myCallback()\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=10, callbacks=[callbacks])\n</code></pre> <p>Now here ans example with the other data set, the original MNIST that contain handwritten numbers from 0 to 9</p> <pre><code>import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\n\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self,epoch,logs={}):\n    if (logs.get('acc') &gt; 0.99):\n      print('\\n Reached 99% accuracy so cancelling training!')\n      self.model.stop_training = True\n\ncallbacks = myCallback()\n\nx_train, x_test = x_train/255.0 , x_test/255.0\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28,28)),\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train,y_train, epochs=10, callbacks=[callbacks])\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html","title":"(Code) Step by step Convolutions","text":"<p>Let's look at the code again, and see, step by step how the Convolutions were built:</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#step-1-gather-the-data","title":"Step 1: Gather the Data","text":"<p>The training data needs to be reshaped, this is because the convolution layer is expecting a single Tensor but instead we have a 60,000 28x28x1 in a list, so what we need is to create a single 4D, the tensor mentioned before, a list that will look like 60000x28x28x1, and the same for the rest of the images. If you don't do this, you'll get an error when training as the Convolutions do not recognize the shape.</p> <pre><code>import tensorflow as tf\nmnist = tf.keras.datasets.fashion_mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n#Here is where we reshape\ntraining_images=training_images.reshape(60000, 28, 28, 1)\n#Here we normalize\ntraining_images=training_images / 255.0\ntest_images = test_images.reshape(10000, 28, 28, 1)\ntest_images=test_images/255.0\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#reshaping-the-list","title":"Reshaping the list","text":"<p><pre><code>training_images = training_images.reshape(6000,28,28,1)\n</code></pre> where <code>60000</code> is the amount of pictures, <code>28,28</code> is the size of the pictures 28x28, and, finally <code>1</code> is the number of channels in this case is a gray scale pictures thus 1 channel.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#normalize","title":"Normalize","text":"<p>this is something we already mentioned before, this models work better with smaller number, there fore normalization of information is quite common, and recommended practice.</p> <pre><code>training_images = training_images / 255.0\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#step-2-define-the-model-convolutional-and-maxpooling-layers","title":"Step 2: Define the model (Convolutional and Maxpooling Layers)","text":"<p>Next is to define the models, the first type of model we saw, we started with the <code>Flatten</code> layer, but in this case we are going to start with the convolutional layer.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#convolutional-layer","title":"Convolutional Layer","text":"<p>So the Layer will have a series of parameters:</p> <ol> <li>The number of convolution, or filters (check here for more info), at this point, it is purely arbitrary, but the suggesting start is with something in the order of 32.</li> <li>The size  of the Convolution, in this case a 3x3 grid.</li> <li>The activation to use in this case will the the Rectified Linear Unit or ReLU ( which it will return X when x&gt;0, else return 0)</li> <li>In the first layer of the convolution, we need to add the input data.</li> </ol> <pre><code>tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1))\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#maxpooling-layer","title":"MaxPooling Layer","text":"<p>The next layer will be a MaxPooling layer which will compress the image, it will maintain the content of the features that were previously highlighted by the convolution, by specifying (2,2) for the Maxpooling (check here for more information about maxpooling), the effect is to quarter the size of the image. this layer create a 2x2 array of pixels, and picks the biggest one thus turning 4 pixels into 1, effectively reducing the image by 25%.</p> <pre><code>tf.keras.layers.MaxPooling2D(2, 2)\n</code></pre> <p>You can call <code>model.summary()</code> to see the size and shape of the network, and you'll notice that after every MaxPooling layer, the image size is reduced in this way.</p> <p>Add another convolution and Maxpooling</p> <p><pre><code>tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\ntf.keras.layers.MaxPooling2D(2,2)\n</code></pre> At this point we have part of the model, the first part that deal with the data preparation.</p> <pre><code>model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2)\n    ...\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#step-3-define-the-model-deep-neural-network","title":"Step 3: Define the model (Deep neural network)","text":"<p>Now flatten the output. After this you'll just have the same DNN structure as the non convolutional version</p> <p><pre><code>tf.keras.layers.Flatten(),\n</code></pre> The same 128 dense layers, and 10 output layers as in the pre-convolution example:</p> <p><pre><code>    ...\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n</code></pre> so the full model will look like</p> <pre><code>model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#step-4-compile-and-train-the-model","title":"Step 4: Compile and Train the model","text":"<p>Now compile the model, call the fit method to do the training, and evaluate the loss and accuracy from the test set.</p> <pre><code>model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(training_images, training_labels, epochs=5)\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\nprint(test_acc)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#the-whole-model","title":"The whole model","text":"<p>This model we use just one layer of convolution and Max pooling</p> <pre><code>import tensorflow as tf\nprint(tf.__version__)\n#getting the Data set\nmnist = tf.keras.datasets.mnist\n#Load the Data\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n#Reshape the Training Data\ntraining_images=training_images.reshape(60000, 28, 28, 1)\n#Normalizing the Training Data\ntraining_images=training_images / 255.0\n#Reshape the Testing Data\ntest_images = test_images.reshape(10000, 28, 28, 1)\n#Normalizing the Test Data\ntest_images=test_images/255.0\n#Build the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n#Compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n#Fit or train the model\nmodel.fit(training_images, training_labels, epochs=10)\n#Evaluate the model and get the accuracy\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\nprint(test_acc)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Step_by_step_Convolutions.html#additional-information","title":"Additional Information","text":"<ul> <li>Lode's Computer Graphics Tutorial</li> <li>Convolutions Sidebar</li> <li>(https://www.youtube.com/playlist?list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF)</li> </ul>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html","title":"The \u2018Hello World\u2019 of neural networks","text":"<p>A neural network is basically a set of functions which can learn patterns.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#the-layers-and-the-neurons","title":"The layers and the neurons","text":"<p>The simplest possible neural network is one that has only one neuron in it, and that's what this line of code does. In keras, you use the word dense to define a layer of connected neurons. There's only one dense here</p> <pre><code>model = keras.Sequential([keras.layers.Dense(unit = 1, input_shape[1])])\n</code></pre> <p>There's only one dense here. So there's only one layer and there's only one unit in it, so it's a single neuron. Successive layers are defined in sequence, hence the word sequential.</p> <p>You define the shape of what's input to the neural network in the first and in this case the only layer, and you can see that our input shape is super simple. It's just one value</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#the-optimizer-and-the-loss","title":"The <code>optimizer</code> and the <code>loss</code>","text":"<p>Here are two function roles that you should be aware of though and these are loss functions and optimizers. This code defines them.</p> <p><pre><code>model.compile(optimizer='sgd', loss='mean_squared_error')\n</code></pre> The loss function measures this and then gives the data to the optimizer which figures out the next guess. So the optimizer thinks about how good or how badly the guess was done using the data from the loss function.</p> <p>As the guesses get better and better, an accuracy approaches 100 percent, the term convergence is used.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#the-data","title":"The data","text":"<p>the next step is the data, in this case we use the library <code>numpy</code></p> <pre><code>xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)\nxy = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 9.0], dtype=float)\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#the-training","title":"The training","text":"<p>The training takes place in the fit command.</p> <pre><code>model.fit(xs,ys, epochs=500)\n</code></pre> <p>The epochs equals 500 value means that it will go through the training loop 500 times.Then the model has finished training, it will then give you back values using the predict method.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#the-prediction","title":"The prediction","text":"<pre><code>print(model.predict([10.0]))\n</code></pre> <p>you'll see that it will return a value very close to 19 but not exactly 19. there are two main reasons. The first is that you trained it using very little data. There's only six points.</p> <p>The second main reason, when we use neural networks, as they try to figure out the answers for everything, they deal in probability. You'll see that a lot and you'll have to adjust how you handle answers to fit.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/The%20Hello%20World%20of%20neural%20networks.html#example","title":"Example:","text":"<p>Imagine if house pricing was as easy as a house costs 50k + 50k per bedroom, so that a 1 bedroom house costs 100k, a 2 bedroom house costs 150k etc.</p> <p>How would you create a neural network that learns this relationship so that it would predict a 7 bedroom house as costing close to 400k etc.</p> <p>Hint: Your network might work better if you scale the house price down. You don't have to give the answer 400...it might be better to create something that predicts the number 4, and then your answer is in the 'hundreds of thousands' etc.</p> <pre><code>import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\nmodel = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])\nmodel.compile(optimizer='sgd', loss='mean_squared_error')\nxs = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], dtype=float)\nys = np.array([1.0, 1.5, 2.0, 2.5, 3.0, 3.5], dtype=float)\nmodel.fit(xs, ys, epochs=1000)\nprint(model.predict([7.0]))\n</code></pre> <p>Interesting info</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html","title":"Using Real-World Images","text":"<p>this is a video of an application to disease detection with the Cassava plant, here</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#understanding-imagegeneration","title":"Understanding ImageGeneration","text":"<p>On limitation that we face in the previous Notes was that it used a dataset with uniform images, Images of clothing that was staged and framed in 28 by 28. What happen when the subject are in different locations? for example:</p> <p></p> <p>This dataset has images with different aspect ration, size and location. In some cases, there may even be multiple subjects. In addition to that, the earlier examples with a fashion data used a built-in dataset.</p> <p>All of the data, previously, was handily split into training and test sets for you and labels were available. In many scenarios, that's not going to be the case and you'll have to do it for yourself.</p> <p>we'll take a look at some of the APIs that are available to make that easier for you. In particular, the image generator in TensorFlow.</p> <p></p> <p>One feature of the image generator is that you can point it at a directory and then the sub-directories of that will automatically generate labels for you. So for example, consider the directory structure in the image above, you have sub-directories for training and validation. When you put sub-directories in these for horses and humans and store the images in there, the image generator can create a feeder for those images and auto label them for you.</p> <p>let say i point the generator to the Training directory,the labels will be horses and humans and all of the images in each directory will be loaded and labeled accordingly.</p> <p></p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#image-generator-in-code","title":"Image Generator in Code","text":"<p>the Image generator class is available in <code>Keras.preprocessing.image</code> and we import it like this</p> <pre><code>from tensorflow.keras.preprocessing.image\nimport ImageDataGenerator\n</code></pre> <p>Now we can instantiate and image generator like this</p> <p><pre><code>train_datagen = imageDataGenerator(rescale = 1./255)\n</code></pre> In this case we are passing <code>rescale</code> in order to normalize the data</p> <p>Now we need to load the images, so, we can then call the flow from directory method on it to get it to load images from that directory and its sub-directories.</p> <p>a common mistake that people point the generator at the sub-directory. It will fail in that circumstance. You should always point it at the directory that contains sub-directories that contain your images</p> <pre><code>train_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size = (300,300),\n    batch_size = 128,\n    class_mode = 'binary')\n</code></pre> <pre><code># Flow training images in batches of 128 using train_datagen generator\nvalidation_generator = validation_datagen.flow_from_directory(\n        '/tmp/validation-horse-or-human/',  # This is the source directory for training images\n        target_size=(300, 300),  # All images will be resized to 150x150\n        batch_size=32,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n</code></pre> <p>The names of the sub-directories will be the labels for your images that are contained within them. Make sure the first parameter <code>train_dir</code> is pointing to the right directory.</p> <p></p> <p>Now, images might come in all shapes and sizes and unfortunately for training a neural network, the input data all has to be the same size, so the images will need to be resized to make them consistent.</p> <p></p> <p>The nice thing about this code is that the images are resized for you as they're loaded. So you don't need to preprocess thousands of images on your file system.</p> <p>The advantage of resize the data at runtime like this is that you can then experiment with different sizes without impacting your source data.</p> <p>The images will be loaded for training and validation in batches where it's more efficient than doing it one by one.</p> <p></p> <p>Finally, there's the class mode. Now, this is a binary classifier i.e. it picks between two different things; horses and humans, so we specify that here.</p> <p></p> <p>The validation generator should be exactly the same except of course it points at a different directory, the one containing the sub-directories containing the test images.</p> <p></p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#defining-a-convnet-to-use-complex-images","title":"Defining a ConvNet to use complex images","text":"<p>Now we are going to see the model that will classify the human vs horses. this model is quite similar to the one that classify clothes, but with some minor differences that we are going to see.</p> <pre><code>model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu', input_shape = (300,300,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')\n    ])\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#the-differences","title":"The differences","text":"<p>The model is still sequential, but with some differences:</p> <p>1. Three Convolutional and Maxpooling Layers</p> <p></p> <p>This reflect the higher complexity of the model, in the previous model we started with 28x28 but in this case we started with 300x300.</p> <p>2. Input Shape</p> <p></p> <p>In this case we are dealing with color images or RGB images, which means we need 3 channels depth, so in this case the input shape is <code>input_shape = (300,300,3)</code></p> <p>3. Output Layer</p> <p></p> <p>In the previous model we use 10 classes, so we have 10 neuron outputs, but in this case we are using just 1, but, we have two classes, how is this possible?, well this is because we are using a different <code>activation</code> in this case <code>sigmoid</code> which is the best activation for binary classification where one class will move towards 1 and the other towards 0.</p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#training-the-convnet-with-fit_generator","title":"Training the ConvNet with <code>fit_generator</code>","text":""},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#the-compile-function","title":"The compile function","text":"<p>we have a loss function and an optimizer. When classifying the ten items of fashion, in that previous model the loss function was a categorical cross entropy. But because we're doing a binary choice here, let's pick a binary_crossentropy instead. Now the about the optimizer, we used an Adam optimizer in this case we use the RMSprop, where we can adjust the learning rate to experiment with performance.</p> <pre><code>from tensorflow.keras.optimizers import RMSprop\n\nmodel.compile(loss='binary_crossentropy', optimizer=RSSPROP(lr=0.001), metrics=['acc'])\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#the-training-function-fit_generator","title":"The Training function (fit_generator)","text":"<p><pre><code>history =  model.fit_generator(\n    train_enerator,\n    steps_per_epoch = 8,\n    epochs = 15,\n    validation_data = validation_generator,\n    validation_steps = 8,\n    verbose = 2 )\n</code></pre> Because we are using generators instead the dataset, now you call <code>model.fit_generator</code>, now let see the parameters:</p> <ul> <li>The first parameter is the training generator that you set up earlier. This streams the images from the training directory.</li> </ul> <p></p> <ul> <li>Remember the batch size you used when you created it, it was 128, that's important in the next step. There are 1,024 images in the training directory, so we're loading them in 128 at a time. So in order to load them all, we need to do 8 batches(\\(8 * 128 = 1024\\)). So we set the <code>steps_per_epoch</code> to cover that.</li> </ul> <p></p> <ul> <li>Here we just set the number of epochs to train for. This is a bit more complex, so let's use, say, 15 epochs in this case.</li> </ul> <p></p> <ul> <li>Here we just set the number of epochs to train for. This is a bit more complex, so let's use, say, 15 epochs in this case.</li> </ul> <p></p> <ul> <li>It had 256 images, and we wanted to handle them in batches of 32, so we will do 8 steps.</li> </ul> <p></p> <ul> <li>The verbose parameter specifies how much to display while training is going on. With verbose set to 2, we'll get a little less animation hiding the epoch progress.</li> </ul> <p></p>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#running-the-model","title":"Running the Model","text":"<p>Now, we will need to run the model, in this case we are going to use a code that will contain some special code for colab and the colab for this model (without validation) can be found Horse-or-Human-NoValidation.</p> <pre><code>import numpy as np\nfrom google.colab import files\nfrom keras.preprocessing import image\n\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n\n  # predicting images\n  path = '/content/' + fn\n  img = image.load_img(path, target_size=(300, 300))\n  x = image.img_to_array(img)\n  x = np.expand_dims(x, axis=0)\n\n  images = np.vstack([x])\n  classes = model.predict(images, batch_size=10)\n  print(classes[0])\n  if classes[0]&gt;0.5:\n    print(fn + \" is a human\")\n  else:\n    print(fn + \" is a horse\")\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#colab-specific-button-to-upload-images","title":"Colab specific - Button to upload images","text":"<p>Here we show the code that is specific for colab, this will give me a button that i can use to pick another image that I'm going to use to make the prediction</p> <p></p> <p>The images are will have a path, this image path is then loaded into this list called <code>uploaded</code></p> <pre><code>uploaded = files.upload()\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#loop-to-iterate-in-the-collection-that-holds-the-images","title":"Loop to iterate in the collection that holds the images","text":"<p>now, we need a loop to \"read\" or iterate though all the images in the collection</p> <p></p> <p>It is really important to set the <code>target_size</code> to the correct dimensions to match the input images that we specify designing the model.</p> <pre><code>...\nimg = image.load_img(path, target_size=(300,300))\n...\n</code></pre>"},{"location":"Miscellaneous/Courses/Coursera/Introduction%20tensorflow/Using_Real_world_Image.html#predict-predictions","title":"<code>predict</code> Predictions","text":"<p>after feed the images with the correct size we can start with the predictions, so we can call <code>model.predict</code> passing the details and we will get in return an array of classes.</p> <p></p> <p>In the case of binary classification, this will only contain one item with a value close to 0 for one class and close to 1 for the other, that is why we use the <code>if</code> at the end.</p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/ANN.html","title":"Artificial Neural Network","text":"<p>Artificial Neural Network</p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/ANN.html#keras-syntax-basics","title":"Keras Syntax Basics","text":"<p>Keras is now the main API to interact with TensorFlow 2.0 thus here we will take notes of the basic of this API, we will use the same example use in the Udemy course materials for sake of simplicity.</p> <ol> <li>Load the data</li> <li>Explore the data</li> <li>Split the data in test and training</li> <li>Normalize the data</li> <li>import TensorFlow</li> <li>Create a model</li> <li>Training</li> <li>Evaluation</li> <li>Predict in brand new data</li> <li>Saving and loading the model</li> </ol>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/ANN.html#load-the-data","title":"Load the data","text":"<p>To load data we use pandas rather than keras, and to load it is as we saw before with <code>read_csv()</code></p> <p>so the code will be something like:</p> <pre><code>import pandas as pd\n\ndf = pd.read_csv('path/to/the/file')\n</code></pre>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/ANN.html#explore-the-data","title":"Explore the data","text":"<p>To explore the data we can use the different visualization libraries, example: * seaborn * matplotlib</p> <p>the code as and example will be</p> <pre><code>import pandas as pd\nimport seaboran as sns\nimport matplatlib.pyplot as plt\n\ndf =  pd.read_csv('../DATA/fake_reg.csv')\nsns.pairplot(df)\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html","title":"Visualization Crash course","text":"<p>Here we mentioned the very basics for the visualization tools, just enough to understand how Pandas plotting and Seaborn are built on top of Matplotlib.</p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#matplotlib","title":"Matplotlib","text":"<p>It is common to create an alias for Matplotlib as <code>plt</code> and that will in this way:</p> <pre><code>import matplotlib.pyplot as plt\n</code></pre> <p>Now, since Jupyter notebooks is the most common tool it is important to mentione that we need to add an extra line after importing matplotlib.pyplot. so a common import session of a file will look like:</p> <pre><code>import numpy as np\nimport pandas as pd\n\nimport matplotlib,pyplot as plt\n</code></pre>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#simple-plot","title":"Simple plot","text":"<p>To simple plot we can use <code>plot(x,y)</code> but in jupyter notbooks we can add a \";\" at the end so the matplotlib text wont be display</p> <pre><code>import numpy as np\nimport pandas as pd\n\nimport matplotlib,pyplot as plt\n\nx = [0,1,2]\ny = [100,200,300]\n\nplt.plot(x,y)\n#plt.plot(x,y);\n</code></pre> <p>in a .py file we will need to add <code>plt.show()</code> in order to see the graph</p> <p>we will create a DataFrame that we can use to plot</p> <p><pre><code>housing = pd.DataFrame({'rooms':[1,1,2,2,2,3,3,3],\n                       'price':[100,120,190,200,230,310,330,305]})\n</code></pre> </p> <p>If we use the normal plot this will display some straight line but if we use the <code>scatter</code> we will have dots in the x and Y points</p> <pre><code> plt.scatter(housing['rooms'],housing['price'])\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#adding-title-and-name-to-the-axis","title":"Adding title and name to the axis","text":"<ol> <li>we draw the plot <code>plt.plot(x,y)</code></li> <li>we put the title <code>plt.title('title')</code></li> <li>we name the axis <code>plt.xlabel('X Label'), plt.ylabel('Y Label')</code></li> </ol> <pre><code>plt.plot(x,y)\nplt.title('Title')\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\n</code></pre>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#adding-limits-or-changing-the-axis-scale","title":"Adding limits or changing the axis scale","text":"<p>We can limit or expand the limit of the graphic, in this case we want the previous plot axis to start 0 for X and 100 for Y and finish at 2 for X and 30 for Y.</p> <pre><code>ptl.plot(x,y)\n\n#axis and ticks\nplt.xlim(0,2)\nplt.ylin(100,300)\n\n#labeling\nplt.title('Title')\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#changing-the-markers","title":"Changing the markers","text":"<p>We can change the color and style of the line, but also we can change the style of the markets</p> <pre><code>ptl.plot(x,y,color='red', marker='o', markersize=20,linestyle='--')\n\n# Axis and Ticks\nplt.xlim(0,20)\nplt.ylim(100,300)\n\n#labels\nplt.title('Title')\nplt.xlabel('X label')\nplt.ylabel('y label')\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#seaborn","title":"Seaborn","text":"<p>Seaborn is a library on top of Matplotlib that allow the creation of different charts and graphics with less code</p> <p>for the examples we will use a Csv file</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv('../DATA/heart.csv')\ndf.head()\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#distribution-plots","title":"Distribution plots","text":"<p><pre><code>sns.distplot(df['age'])\n</code></pre> </p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#resizing-and-modify-seaborn-plots","title":"Resizing and modify seaborn plots","text":"<p>for resizing</p> <pre><code>plt.figure(figsize=(12,8))\nsns.distplot(df['age'])\n</code></pre> <p>to remove the KDE (Kernel Density Estimates)</p> <pre><code>sns.distplot(df['age'],kde=False)\n</code></pre> <p></p> <p>similar to remove the histogram</p> <p><pre><code>sns.distplot(df['age'],hist=False)\n</code></pre> </p> <p>to change the color</p> <pre><code>sns.distplot(df['age'],kde=False,bins=40,color='red')\n</code></pre> <p></p> <p>we can limit the axis in seaborn as we limit the axis in matplotlib</p> <p><pre><code>sns.distplot(df['age'],kde=False,bins=40,color='green')\nplt.xlim(50,60)\n</code></pre> </p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#count-plot","title":"Count plot","text":"<p>From the same csv file</p> <p></p> <p><pre><code>sns.countplot(x='sex',data=df)\n</code></pre> </p> <p><pre><code>sns.countplot(x='cp',data=df)\n</code></pre> </p> <p>and we can use <code>hue</code> to add more information</p> <p><pre><code>sns.countplot(x='cp',data=df,hue='sex')\n</code></pre> </p> <p>we can change the color ( there are predefine color colormaps)</p> <pre><code>sns.countplot(x='cp',data=df,palette='terrain')\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#box-plot","title":"Box Plot","text":"<pre><code>sns.boxplot(x='target',y='thalach',data=df)\n</code></pre> <p>and in the same way that with count plots we can use the hue to add more information to the Box plot</p> <pre><code>sns.boxplot(x='target',y='thalach',data=df, hue='sex')\n</code></pre> <p></p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#scatter-plot","title":"Scatter plot","text":"<p>This kind of plot is use to display the relationship between two continuous features we can use the <code>hue</code> and <code>size</code> to add extra dimension, and use <code>palette</code> to change the color more info</p> <p><pre><code>sns.scatterplot(x='chol',y='trestbps',data=df,hue='sex',size='age')\n</code></pre> </p>"},{"location":"Miscellaneous/Courses/Udemy/Complete%20Tensorflow%202%20and%20Keras%20Deep%20Learning%20Bootcamp/Visualization_Crash_course.html#pairplots","title":"Pairplots","text":"<p>Pairplots perform scatterplots and histograms for every single column in your data set. This means it could be a huge plot for large datasets! Use with caution, as it could take a long time for large datasets and the figures could be too small! more info</p> <p><pre><code>iris = pd.read_csv('../DATA/iris.csv')\niris.head()\n</code></pre> </p> <p><pre><code>sns.pairplot(iris)\n</code></pre> </p> <p>or just show the KDEs instead of histograms</p> <p><pre><code>sns.pairplot(iris, hue=\"species\")\n</code></pre> </p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html","title":"Module 1","text":"<p>Lets start with some basic concept that are present in bold in the course</p> <ul> <li>Machine language: LAnguage use for the computers, very rudimentary.</li> <li>Natural Language: Language use by people, it is constantly evolving, new words are created every day and old one disappear.</li> <li>Instruction list (IL): a complete set of know commands</li> </ul>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#what-is-a-language","title":"What is a language","text":"<p>I paraphrased the original information of the course since it is condense and simple</p> <ul> <li>An Alphabet: A set of symbols use to build a word.</li> <li>A Lexis:  also known as dictionary, it is a set of words available in to be use.</li> <li>A Syntax: A set of rules used to determine if a certain string of words make a valid sentence</li> <li>Semantics: a set of rules to determining if a certain phrase make sense.</li> </ul> <p>The IL o Instruction list is the alphabet for the machine, this is the simplest set of symbols that can be use to give commands to the computer. In order to give instruction to the computer we need a intermediary language, complex enough to be human readable, simple enough so computer can follow, this languages are called High-Level programming Language, a program written with this language is call source code and a file  containing this code will be a source file.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#compilation-vs-interpretation","title":"Compilation vs. Interpretation","text":"<p>A code or source code must be correct in many senses:</p> <ul> <li>Alphabetically: A program must be written in recognizable script, using recognizable character, as example Roman alphabet.</li> <li>Lexically: Each programming language ahas a dictionary and one must master it, although is simpler than a natural language dictionary.</li> <li>Syntactically: Each language has it rules and must be obeyed</li> <li>Semantically: The program has to make sense</li> </ul> <p>Assuming the program is written correctly, now we need the computer to translate it to machine language, this transformation from high-Level Programming Language into Machine Language.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#compilation","title":"Compilation","text":"<p>The source code is translate once (but this act needs to be repeated each time we modify the code) by getting a file, that contain the machine code, now the code can be distribute.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#interpretation","title":"Interpretation","text":"<p>We can translate the source program each time it has to be run; the program performing this kind of transformation is called an interpreter, as it interprets the code every time it is intended to be executed; it also means that you cannot just distribute the source code as-is, because the end-user also needs the interpreter to execute it.</p> :--Compilation--: Interpretation * The execution of the translated code is usually faster; * You can run the code as soon as you complete it - there are no additional phases of translation; ADVANTAGES * Only the user has to have the compiler - the end-user may use the code without it; * The code is stored using programming language, not the machine one - this means that it can be run on computers using different machine languages; you don't compile your code separately for each different architecture. * The translated code is stored using machine language - as it is very hard to understand it, your own inventions and programming tricks are likely to remain your secret. DISADVANTAGES * The compilation itself may be a very time-consuming process - you may not be able to run your code immediately after any amendment; *don't expect that interpretation will ramp your code to high speed - your code will share the computer's power with the interpreter, so it can't be really fast; * You have to have as many compilers as hardware platforms you want your code to be run on. * Both you and the end user have to have the interpreter to run your code. <p>Python is an Interpreted Language  you just need the Python Interpreter</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#python-goals","title":"Python Goals","text":"<ul> <li>An Easy and Intuitive yet powerful language.</li> <li>Open Source</li> <li>Understandable code, just like plain English.</li> <li>Suitable for Everyday programming.</li> </ul>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#python-cphyton-and-cython","title":"Python, CPhyton and Cython","text":"<p>Python is maintain for people around the PSF or Python Software Foundation, the president is the creator of the language itself, Guido van Rossum, these Pythons are called Canonical</p> <p></p> <p>Python was implemented in C, it was, it is, and, probably continue been, implemented in C, this is why it is often refer as CPython</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#cython","title":"Cython","text":"<p>Cython is other family member of Python, it is a solution for many trade off, such the lack of efficiency, once the code is written in Python, and it is prove that there is not issue, one can translate this code to C. This is what Cython is intended to do so, translate python code to C.</p> <p></p> <p>The last two \"flavors\" of python mentioned in the course are Jython and PyPy.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%201.html#jython-and-pypy","title":"Jython and pypy","text":"<p>Jython is similar to Cython, but instead of translate the python script to C, this will translate to java, it is specially use in big systems, where java is the main language, this Flavor, Jython just support Python 2 and there is not implementation for Python3 so far.</p> <p></p> <p>pypy it is an environment written in RPython and is mostly use for develop python, it doesn't run the interpreter it translate everything to C.</p> <p></p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html","title":"Module 2","text":""},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#function","title":"Function","text":"<p>A function in the context of Python is separate part of code that is able to do:</p> <ul> <li>Cause some effect as an example the function <code>print()</code> allow use to display something in the console</li> <li>Evaluate a value or some values this is closer to the definition of function in mathematics</li> </ul> <p>A function in python can do one of the previous mentioned things or it can do both at the same time.</p> <p>A function might be include it in python, the so call Build-in functions, can be an add-on, and might required installation, or can be done by ourselves.</p> <p>For the name of the function, if those are created by use, we need to pay attention to the name, the name must be self-Evident or significant.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#anatomy-of-a-function","title":"Anatomy of a function","text":"<p>The function will have 3 components:</p> <ul> <li>An Effect.</li> <li>A Result.</li> <li>An Argument or Arguments.</li> </ul> <p>Python functions can take none, one or more arguments. A standard convention that we need to follow are the pair of parenthesis ad the end of the function's name.</p> <pre><code>print(\"Hello, World!\")\n</code></pre> <p>in this example the parameter is a string this is one of the data types present in python, as it is shown in the example the string is delimited by quotes.</p> <p>The Invocation of a python function will be</p> <p><pre><code>function_name(argument)\n</code></pre> the work flow will be as follow:</p> <ol> <li>Python check if the name of the function is legal or if it exist within its domain.</li> <li>Python check if the function's requirements for the number and type of argument is correct</li> <li>Python leave the current part of the code momentarily and jump to the function.</li> <li>Python execute the code, causes the desired effect (if any), evaluates the results (if any) and finished the task</li> <li>Python return to the main code and resume the execution.</li> </ol>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#keyword-arguments","title":"Keyword arguments","text":"<p>This are special arguments that can be pass to the function, these arguments can modify the behavior of the function, as and example:</p> <p><pre><code>print(\"My name is\", \"Python.\", end=\" \")\nprint(\"Monty Python.\")\n</code></pre> the result is</p> <p><pre><code>My name is Python. Monty Python.\n</code></pre> Which is different for the normal behavior</p> <p>in order to use this arguments we need some rules:</p> <ul> <li>the keyword arguments consist of three elements the keyword, in this case <code>end</code> the equal <code>=</code> and the value, in this case <code>\" \"</code></li> <li>the keyword argument must be add at the end of the last positional argument.</li> </ul> <p>In this case the keyword argument modify the behavior of the <code>print()</code> function, by default at the end of this function it is a change of line, but in this case we change it to a space.</p> <p>For the <code>print()</code> function we have other keyword argument, in this case is <code>sep</code> this argument will modify the way python separate each argument pass to the function, example:</p> <pre><code>print(\"My\", \"name\", \"is\", \"Monty\", \"Python.\", sep=\"-\")\n</code></pre> <p>will give as a result: <pre><code>My-name-is-Monty-Python.\n</code></pre></p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#literals","title":"Literals","text":"<p>The closest definition for literals is the word itself, it is a literal value, for example, lets check this two values:</p> <p><pre><code>123\n</code></pre> and <pre><code>c\n</code></pre></p> <p>the first one it is \\(123\\) the second will be more difficult, it can be the speed of light or the hypotenuse in a Pythagorean theorem.</p> <p>In this case what is the literal? \\(123\\) is the literal and <code>c</code> it is not.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#mode-about-literals","title":"Mode about literals","text":"<p>Lets see the following example <pre><code>print(\"2\")\nprint(2)\n</code></pre> if we execute the code we will see the same number, but these two are not the same, the first one is a \"String\" a series of characters the second is a numerical value, python will take this numerical value and will converted to machine representation ( bits ).</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#notes-about-integer-notation","title":"Notes about integer notation","text":"<p>In case we need to make a integer in a base different from the decimal, let say octal or hexadecimal we can use the notation that python provide.</p>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#octal","title":"Octal","text":"<p>For octal we ca us de prefix <code>0o</code>, for example <code>0o123</code> ( that is 83) we can print it like this:</p> <pre><code>print(0o123)\n</code></pre>"},{"location":"Miscellaneous/For%20Certifications/Python/Preparation%20for%20PCPP-32-1/Module%202.html#hexadecimal","title":"Hexadecimal","text":"<p>For the hexadecimal we will use <code>0x</code> example, <code>ox123</code> ( that is 291), we can print it like this:</p> <pre><code>print(0x123)\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/Plot.html","title":"Plot","text":"<p>To plot we use the function <code>plot#()</code> were # is a number that identify the plot, this number can be from 1 to 99</p> <p>The basic structure of a plot statement for an indicator: PlotN: PlotN(numeric expression, \"plot name\"); //(where N = 1 to 99, no space)</p> <p>Usage Example1: <pre><code>Plot1(Close, \"The Close\");\n</code></pre></p> <p>Usage Example2: <pre><code>Plot1(High, \"The High\"); Plot2(Low, \"The Low\");\n</code></pre></p>"},{"location":"Miscellaneous/PowerLanguages/Plot.html#modify-structure-of-plot","title":"Modify structure of <code>plot</code>","text":"<p>The complete structure of a plot statement for an indicator:</p> <p>PlotN: <pre><code>PlotN(numeric expression, \"plot name\", foreground color, background color, width);\n</code></pre></p> <p>Usage Example: <pre><code>Plot1(Close, \"The Close\", Red, Default, 3);\n</code></pre></p> <p>Note: It is generally more useful to set colors and width for an indicator conditionally based on some technical condition than to hard-code colors in the plot statement. There are three reserved words that can be used for this purpose: <code>SetPlotColor</code>, <code>SetPlotBGColor</code>, and <code>SetPlotWidth</code>.</p>"},{"location":"Miscellaneous/PowerLanguages/Plot.html#plotpb","title":"PlotPB","text":"<p>The <code>PlotPB</code> statement is a specialized plot statement that is used in PaintBar studies.</p> <p>It instructs Multicharts where to draw on a bar so that the bar is painted a different color from the other bars based on some conditional criteria.</p> <p>The structure of a PlotPB statement for a PaintBar is:</p> <p>PlotPB: <pre><code>PlotPB(Price Point, Price Point, \"plot name\");\n</code></pre></p> <p>Usage Example1 (paint full bar) : <pre><code>if Close &gt; Close[1] then\n    PlotPB(High, Low, \"Up Bar\"); Usage Example2 (paint top half of the bar):\nif Close &gt; Close[1] then\n    PlotPB(High, High - Range * .5, \"Up Bar\");\n</code></pre></p> <p>In these examples the reserved word PlotPB is used to paint the bars, or a portion of the bar, a different color based on a specified condition.</p> <p>Usage Example3 (paint entire bar and set color): <pre><code>if Close &gt; Close[1] then\n    PlotPB(High, Low, \"Up Bar\", Cyan);\n</code></pre></p> <p>In these examples the reserved word PlotPB is used to paint the bar a different color and the color is specified in the PlotPB statement.</p>"},{"location":"Miscellaneous/PowerLanguages/Plot.html#noplot","title":"NoPlot","text":"<p>The <code>NoPlot</code> statement removes a specified drawn plot from the current bar. It is most often used to remove ShowMe or PaintBar plots that are no longer true on the current in-progress bar. If a ShowMe or PaintBar condition is true on the real-time in-progress bar, but during the same bar becomes false before the close of the bar, the drawn ShowMe or PaintBar can be removed with NoPlot. The structure of a NoPlot statement for an indicator is:</p> <p>NoPlot: <pre><code>NoPlot(plot number);\n</code></pre></p> <p>Usage Example: <pre><code>if (High &lt; Low[1]) Then\n    Plot1(Low[1], \"GapDown\")\nelse\n    NoPlot(1) ;\n</code></pre></p> <p>This ShowMe example marks the low price of a gap-down bar, but removes the ShowMe marker if the condition is no longer true on the real-time bar.</p> <p>Usage Example:</p> <pre><code>if Close &gt; Average(Close,10) then\n          PlotPB(High, Low, \"Up Bar\")\nelse\n    NoPlot(1);\n</code></pre> <p>This PaintBar example paints the entire bar if the Close is greater than the average Close but removes the PaintBar if the condition is no longer true on the real-time bar. You may use number 1 to refer to a PlotPB statement in the NoPlot parameter.</p>"},{"location":"Miscellaneous/PowerLanguages/Plot.html#displacing-plots","title":"Displacing Plots","text":"<p>Displacing plots allows you to visually move any analysis technique plots left or right on the chart by some number of specified bars. A positive number moves the plot to the left and a negative number moves the plot to the right. Space to the right of the last bar must be sufficient to accommodate the displaced plots or an error will occur.</p> <p>The structure of a NoPlot statement for an indicator is:</p> <p>Plot1[\u00b1N ] Square brackets after the Plot statement are used to indicate the number of bars to displace the plot left or right. Positive = left and Negative = right.</p> <p>Usage Example1 (displacing a plot into the future): <pre><code>Plot1[-5](Average(Close,5), \u201cavg close\u201d);\n</code></pre></p> <p>Usage Example2 (displacing a plot historically):</p> <pre><code>Plot1[5](Average(Close,5), \u201cavg close\u201d);\n</code></pre> <p>These examples move the plot right and left, respectively, on the chart.</p>"},{"location":"Miscellaneous/PowerLanguages/PowerLanguages_001.html","title":"Reference","text":"<p>There are different type of data on Input and on Variables, these types are:</p> <ul> <li>a Numeric Value</li> <li>A String</li> <li>A Boolean (true or False)</li> </ul> <p>here an example:</p> <p></p> <p>001. Power languages tutorial</p> <p>002. Free Forex API</p> <p>003. Fixer API</p> <p>004. Knowledge base Multicharts</p> <p>005. Trading station Help page</p> <p>book for reference</p>"},{"location":"Miscellaneous/PowerLanguages/Reserved%20words.html","title":"Reserved words","text":""},{"location":"Miscellaneous/PowerLanguages/Reserved%20words.html#value1-99","title":"Value1-99","text":"<p>Value is a reserved word that can store a value from a calcularion or an expresion, once is declared it can be reference later in the code.</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html","title":"Functions","text":"<p>Functions on easylanguage are similar to functions in other languages, not in syntax but in concepts, these are use to encapsulate logic to easy debugging and to avoid repetition.</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#making-a-function","title":"Making a Function","text":"<p>to make a function we need to go to File -&gt; New and select function:</p> <p></p> <p>the next screen will display the options for the name of the function, the return type and the function storage</p> <p></p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-name","title":"The name","text":"<p>like in other languages the function name should be descriptive and not contain special characters with the exception of underscore</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-return-type","title":"The return type","text":"<p>the return type like in other languages specify the  type of result that the function returns to the caller, if this return is a numeric value we need to select \"Numeric\", if the function returns a boolean value, we will need to choose \"TrueFalse\", finally if the function returns string we will choose \"String\"</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-function-storage","title":"The function Storage","text":"<p>In this case the best option will be \"Auto-detect\", the reason is, that we will have lest problems if we decided to make significant changes to the function, the \"Simple\" it is use when inside the function we don't use previous bar's values, that means we don't use square baskets, if we decide to use square brackets the function storage option to select will be \"Series\"</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#functions-inputs","title":"Functions Inputs","text":"<p>In the indicators you need to specify the default value of the inputs, in the functions code, you have to specify the type of each input, this tell the program what input value to expect while the code is running.</p> <p>In most of the cases we will work with three type of input parameters:</p> <ul> <li>Numeric</li> <li>TrueFalse</li> <li>String</li> </ul> <p>Each of these types have one or two subtypes, series and simple, A simple way to see this will be; If a particular input parameter is constant it is Simple, for example ins a Moving average the length value use to calculate it will be a subtype Simple in other words <code>NumericSimple</code>, but the price, since this change or vary all the time, it will be define as subtype Series, that is why the price input will be <code>NumericSeries</code>.</p> <pre><code>//Numeric Input Types\n\n//a constant input value, example 10\nConstantValue               ( NumericSimple ),\n//a Input that can change its value, like Close\nPriceSeriesValue            ( NumericSeries ),\n\n//TrueFalse Input Types\n\n//a Simple true/false switch for example used to enable a certain functionality\nCheckCondition              ( TrueFalseSimple ),\n//Use for a true/false input that can change between true and false for a bar to bar\nEntryCondition              ( TrueFalseSeries ),\n\n//String Input Type\n\n//a constant String - like email address\nEmailAddress                ( StringSimple ),\n//use for text that change bar to bar\nEmailText                   ( StringSeries ),\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#function-outputs","title":"Function Outputs","text":"<p>We can also use Inputs to receive values from the function, these \"in&amp;out\" inputs can refer values to the caller, in this way we can create a function that not just give a return value, but also a series of values related with he operation, as an example, The stochastic, it return 4 values additional to the return value, this values are; Slow %K, Slow %D, Fast %K and Fast %D.</p> <p>to declare this reference input, we do it as a regular input with the difference that this will have \"Ref\" at the end of the type, It is important to mention that the convention in easylanguease is to name this type of reference inputs with a \"o\" at the beginning of the name, this will give more information and it will be easy to read.</p> <pre><code>//Output a numeric value - for example the result of a moving average\noAverageValue       ( NumericRef ),\n\n//Output a boolean - this could be the true/false result of a condition check for example\noEntryCheck         ( TrueFalseRef ),\n\n//output a String - for example a message that was created withing a function\noMessage            ( StringRef ),\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#return-value","title":"Return Value","text":"<p>Each function will need to give a value, even if this is a dummy value, this done assigning the value to return to the name of the function. We can pass a reference array to and from the function, this is done with <code>NumericArray</code>, <code>NumericArrayRef</code>,<code>TrueFalseArray</code>,<code>TrueFalseArrayRef</code>,<code>StringArray</code>,<code>StringArrayRef</code>.</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#an-example-of-a-function","title":"An Example of a Function","text":"<p>We are going to make a function that will calculate the moving average so for that we need</p>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-inputs","title":"The Inputs","text":"<p>the inputs will be the <code>Price</code> and the <code>AverageLenght</code></p> <pre><code>Inputs:\n        Price               ( NumericSeries ),\n        AverageLength       ( NumericSimple);\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-variables","title":"The variables","text":"<p>the variables to be use in the logic will be</p> <pre><code>variables:\n            Counter             ( 0 ),\n            CloseValueSum       ( 0 ),\n            AverageValue        ( 0 );\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-logic","title":"The logic","text":"<p>now we use the counter to go through all the values in previous bars ( Averagelength ) all this sum will be store in <code>CloseValueSum</code> and later the Average will be calculated</p> <pre><code>// Reset the variable\nCloseValueSum = 0;\n\nfor Counter = 0 to AverageLength - 1\nbegin\n    CloseValueSum =  CloseValueSum + Price[Counter];\nend;\n\n// calculate the average\nif AverageLength &lt;&gt; 0  then\n    AverageValue = CloseValueSum / AverageLength;\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#the-return","title":"The return","text":"<p>Now we need to store the result in the name of the function so we can use it in an indicator</p> <pre><code>_victor_movingAverge = AverageValue;\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/functions.html#using-the-function","title":"Using the Function","text":"<p>now we can call this function from other indicator, and the code for this indicator will be</p> <pre><code>Inputs:\n    Price           ( Close ),\n    AverageLength       ( 10 );\n\n\nvariables:\n    MovAvgResult        ( 0 );\n\n\n//Call the function\nMovAvgResult = _victor_movingAverge( Price, AverageLength);\n\n//Plot\nPlot1(MovAvgResult, \"Average\");\n</code></pre>"},{"location":"Miscellaneous/PowerLanguages/how_script_works.html","title":"How Scripts Work","text":"<p>Easylenguage/PowerLanguage studies operate on price data, organized as a series of data points, based on a defined interval and arranged in a chronological order. Each data point is a summary of a group of price points (ticks) that includes the price values of the first and of the last tick, as well as the range of price movement over the defined interval. Data points also include additional data, such as date and time of the last tick and trade volume.</p> <p>The most popular format for visually presenting a data point is a bar. References to bars in this guide actually refer to data points. Any other visual formats for presenting data points, such as candlesticks, points, lines, etc., can equally well be substituted.</p> <p>PowerLanguage studies are divided into two main types: Indicators and Signals.</p> <p>An Indicator is a visual technical analysis tool, used to analyze market conditions and identify and forecast trends and market patterns. An indicator is a visualization of a mathematical formula, and consists of one or more Plots \u2013 lines, histograms, series of points or crosses, highs and lows, left and right ticks, or a combination of the above, displayed on a chart</p> <p>A Signal is a mechanical technical analysis tool, used to systematically specify market entry or exit points according to a set of trading rules implemented in the signal's algorithm. The trade points are indicated on a chart by ticks and arrows. Strategies can easily be constructed by combining a number of signals. Market entry or exit points, specified by the signals, can be used to send orders electronically directly to a broker, fully automating the trading process.</p>"},{"location":"Miscellaneous/PowerLanguages/how_script_works.html#indicators","title":"Indicators","text":"<p>The purpose of indicators is to plot visualizations of mathematical formulas on a chart. The plots are created based on one or more price data series</p> <p>When applied to a chart, an indicator script first evaluates all the completed bars one-by-one, starting with the very first (oldest) bar on the chart.</p> <p>Once all the completed bars on the chart have been evaluated, an indicator script will proceed to evaluate the last bar on the chart on tick-by-tick basis, without waiting for the bar to be completed.</p> <p>Each time a new tick is received, the entire script will be executed for that bar, until the bar is completed and the next bar is started. Indicator scripts treat incomplete bars the same way as the bars that are completed, and can take action each time an incomplete bar is evaluated</p> <p>Update on Every Tick option can be turned off in the MultiCharts settings.</p>"},{"location":"Miscellaneous/PowerLanguages/how_script_works.html#completed-bars-indicators","title":"Completed Bars (Indicators)","text":"<p>A bar is considered completed when it is closed and no additional ticks can be added to it.</p> <ul> <li>For time-based charts, the bar is closed once the first tick with a time stamp past the bar's interval is received, or if no additional ticks are received for a period of three seconds.</li> <li>For tick-based charts, the bar is closed once the defined number of ticks has been reached.</li> <li>For range-based charts, the bar is closed once the tick with a price outside of the original bar's range has been received.</li> <li>For volume-based charts, the bar is closed once a tick, bringing the current bar's total to the defined number of contracts, has been received.</li> <li>For change-based charts, the bar is closed once a tick with a price, bringing the current bar's total number of price changes to the defined number, has been received.</li> </ul>"},{"location":"Miscellaneous/PowerLanguages/how_script_works.html#signals","title":"Signals","text":"<p>Signals are the basic building blocks of strategies. Signals are substantially more complex than indicators and take in to account a far greater number of factors.</p> <p>When applied to a chart, a signal script first evaluates all the completed bars one-by-one, starting with the very first (oldest) bar on the chart. The entire script is executed once for each completed bar. On each bar, based on the results of the evaluation, a signal script may generate one or more trading orders. Orders are indicated by an arrow or a mark on the chart, by a visual or an audio alert, etc</p> <p>By default, once all the completed bars on a chart are evaluated, the execution of a signal script is paused until a new bar is completed (a bar is completed once an interval, defined for each bar, is over), and then the entire script is executed again for the new bar.</p>"},{"location":"Miscellaneous/PowerLanguages/how_script_works.html#completed-bars-signals","title":"Completed Bars (Signals)","text":"<p>A bar is considered completed when it is closed and no additional ticks can be added to it.</p> <ul> <li>For time-based charts, the bar is closed once the first tick with a time stamp past the bar's interval is received, or if no additional ticks are received for a period of 300 seconds.</li> <li>For tick-based charts, the bar is closed once the defined number of ticks has been reached.</li> <li>For range-based charts, the bar is closed once the tick with a price outside of the original bar's range has been received.</li> <li>For volume-based charts, the bar is closed once a tick, bringing the current bar's total to the defined number of contracts, has been received.</li> <li>For change-based charts, the bar is closed once a tick with a price, bringing the current bar's total number of price changes to the defined number, has been received.</li> </ul>"},{"location":"Miscellaneous/PowerLanguages/text_trendlines.html","title":"Text and Trendlines","text":"<p>To demonstrate how to make lines and text in easylanguage(powerlanguage) we can create a study which goal is to track the daily extremes and to display them on the chart. We want to be able to see the current extremes for the day and also show yesterday\u2019s extremes on today\u2019s data.</p> <ul> <li>We need to be able to find the highest high and lowest low for each day</li> <li>The study should use trendlines to display yesterday\u2019s extremes</li> <li>We want to be able to change the appearance on the chart via inputs</li> <li>The study should display text on the chart that labels the lines</li> </ul>"},{"location":"Miscellaneous/PowerLanguages/text_trendlines.html#simple-program-logic","title":"Simple Program Logic","text":"<ul> <li>Track daily high and low with a variable throughout the day</li> <li>Store the previous daily extremes on a new day and reset the tracking variables</li> <li>Draw text and trendlines for the previous extremes on today\u2019s data and update it with every new bar</li> <li>Add inputs to be able to conveniently change the text and trendline looks (color, size etc.)</li> </ul>"},{"location":"Miscellaneous/PowerLanguages/text_trendlines.html#trendlines","title":"Trendlines","text":"<p>Each Trendline has his own ID assigned automatically by Multicharts, to create a new trendline we need to use <code>TL_New</code> follow by 6 parameters, bellow we will create a variable to store the ID and we will name the different parameter, just to make it easier to read</p> <pre><code>TLID = TL_New(StartDate, StartTime, StartValue, EndDate, EndTime, EndValue);\n</code></pre> <p>so a simple code that will draw a horizontal line will be</p> <pre><code>Variables:\n            TLID            (-1) // can be 0 but just for debugging we use -1\n\nonce\n    begin\n        // draw a trendline spacing over eleven bars\n        TLID = TL_New(Date[10], Time[10], Close, Date, Time, Close);\n    end;\n</code></pre> <p>the result will be something like:</p> <p></p> <p>there are some characteristics of the line that we can change, those will be:</p> <ul> <li>Color: TL_SetColor(TLID, Color);</li> <li>Size: TL_SetSize(TLID, size); size will be from 0 to 6</li> <li>Style: TL_SetStyle(TLID, Style) for the style we have 5 different types, we can use reserve words or numbers as bellow</li> </ul> <p></p> <p>so let see how the statement change after adding this settings</p> <pre><code>TLID =  TL_New(Date[10], Time[10], Close, Date, Time, Close);\n        TL_SetColor(TLID, red);\n        TL_SetSize(TLID,2);\n        TL_SetStyle(TLID,2); // 2 can be change for Tool_Dashed\n</code></pre> <p>and the result will be similar to this:</p> <p></p>"},{"location":"Miscellaneous/PowerLanguages/text_trendlines.html#text","title":"Text","text":"<p>Similar to the trendlines, the text will need an anchor point, as well as the trendlines each text will have an ID and some parameter, thus the structure will be like:</p> <pre><code>TxtID = Text_New(TextDate, TextTime, TextPrice, TextString);\n</code></pre> <p>so our script will be</p> <pre><code>Variables:\n            TLID            (-1) // can be 0 but just for debugging we use -1\n            TxtID           (-1)\n\nonce\n    begin\n        // draw a trendline spacing over eleven bars\n        TLID =  TL_New(Date[10], Time[10], Close, Date, Time, Close);\n        TL_SetColor(TLID, red);\n        TL_SetSize(TLID,2);\n        TL_SetStyle(TLID,2); // 2 can be change for Tool_Dashed\n\n        TxtID = Text_New(Date, Time, Close, \"Hello World\");\n    end;\n</code></pre> <p>then the result will be</p> <p></p> <p>Like the trendlines we can modify the text style, position and color, we do this with:</p> <ul> <li>Color: Text_SetColor(TxtID, red)</li> <li>Size: Text_Setsize(TXtID, 12)</li> <li>Style: Text_SetStyle(TxtID, Horizontal_point, Vertical_point)</li> </ul> <p>The horizontal placement parameter can have three values:</p> <ul> <li>0 \u2013 will place the text to the right of the bar</li> <li>1 \u2013 will place the text to the left of the bar</li> <li>2 \u2013 the text will be centered on the bar</li> </ul> <p>The vertical placement parameter can have three different values, too:</p> <ul> <li>0 \u2013 will place the text under the specified price value</li> <li>1 \u2013 the text will be above the price value</li> <li>2 \u2013 will center the text on the price</li> </ul> <p>The code will be:</p> <pre><code>Variables:\n            VertTxtP1       (2 )\n            HorizTxtP1      (0 )\n            TLID            (-1) // can be 0 but just for debugging we use -1\n            TxtID           (-1)\n\nonce\n    begin\n        // draw a trendline spacing over eleven bars\n        TLID =  TL_New(Date[10], Time[10], Close, Date, Time, Close);\n        TL_SetColor(TLID, red);\n        TL_SetSize(TLID,2);\n        TL_SetStyle(TLID,2); // 2 can be change for Tool_Dashed\n\n        TxtID = Text_New(Date, Time, Close, \"Hello World\");\n        Text_SetColor(TxTID, red);\n        Text_Setsize(TxtID, 12);\n        Text_SetStyle(TxtID, HorizTxtP1, VertTxtP1);\n    end;\n</code></pre> <p>And we will have as a result:</p> <p></p>"},{"location":"Miscellaneous/PowerLanguages/text_trendlines.html#the-study","title":"The study","text":"<pre><code>Inputs:\n        HighTLColor         (darkgreen),\n        LowTLColor          (red),\n        TLSize              (1),\n        TLStyle             (1),\n        HighTextColor       (darkgreen),\n        LowTextColor        (red),\n        TextSize            (10);\n\nvariable:\n        VertTxtP1           (2),\n        HorizTxtP1          (0),\n        HaveTextAndLines    (false),\n        DayHigh             (High),\n        DayLow              (Low),\n        PrevDayHigh         (0),\n        PrevDayLow          (0),\n        HiTxt               (-1),\n        LoTxt               (-1),\n        HiTL                (-1),\n        LoTL                (-1);\n\n//Reset on a date change\n\nif Date &lt;&gt; Date[1] ten\nbegin\n    // save previous extremes\n    PrevDayHigh = DayHigh;\n    PrevDayLow  = DayLow;\n\n    // get the high and low of the day\n    DayHigh = High;\n    DayLow = Low;\n\n    // variable just to make sure the lines and text exist\n    HaveTextAndLines = true;\n\n    // Create the trendlines\n    HiTL =  TL_New(Date, Time, PrevDayHigh, Date, Time, PrevDayHigh);\n            TL_SetColor(HiTL, HighTLColor);\n            TL_SetSize(HiTL,TLSize);\n            TL_SetStyle(HiTL, TLStyle);\n\n    LowTL = TL_New(Date, Time, PrevDayLow, Date, Time, PrevDayLow);\n            TL_SetColor(LoTL, LowTLColor);\n            TL_SetSize(LoTL, TLSize);\n            TL_SetStyle(LoTL, TLStyle);\n\n    HiTxt = Text_New(Date, Time, PrevDayHigh, \"PrevHi\");\n        Text_SetColor(HiTxt, HighTextColor);\n        Text_Setsize(HiTxt, TextSize);\n        Text_SetStyle(HiTxt, HorizTxtP1, VertTxtP1);\n\n    LowTxt = Text_New(Date, Time, PrevDayLow, \"PrevLow\");\n        Text_SetColor(LowTxt, LowTextColor);\n        Text_Setsize(LowTxt, TextSize);\n        Text_SetStyle(LowTxt, HorizTxtP1, VertTxtP1);\nend;\n</code></pre> <p>Now we are going to use some reserve word to finish or end the Trendlines and set the text location</p> <p>for the Trendlines:</p> <pre><code>TL_SetEnd(TLID, TL_End_Date, TL_End_Time, TL_End_Price);\n</code></pre> <p>and the text location</p> <pre><code>Text_SetLocation(TextID, Text_Bar_Date, Text_Bar_Time, Text_Bar_price)\n</code></pre> <p>We will use the boolean variable \u201cHaveTextAndLines\u201d to make sure that we only try to update a text or trendline when it\u2019s ensured that at least one set of text and trendlines exists.</p> <pre><code>if HaveTextAndLines then\nbegin\n    // update the trandline endpoint\n    TL_SetEnd(HiTL, Date, TIme, PrevDayHigh);\n    TL_SetEnd(LoTL, Date, Time, PrevDayLow);\n\n    //Update text to the new location\n    Text_SetLocation(HiTxt, Date, Time, PrevDayHigh);\n    Text_SetLocation(LoTxt, Date, Time, PrevDayLow);\nend;\n\n// Update the variable tracking the higher high\n\nif High &gt; DayHigh then\n    DayHigh = High;\n\n// Update the Variable Tracking the lowest low\n\nif Low &lt; DayLow then\n    DayLow = Low;\n</code></pre> <p></p>"},{"location":"Python/introduction.html","title":"Python","text":"<p>Official website</p> <p>This is the introduction to Python notes, the notes are divided in:</p> <ol> <li>Basics.</li> <li>Intermediate.</li> <li>Libraries and Modules.</li> <li>Frameworks.</li> <li>Projects.</li> <li>Scripts &amp; algorithms.</li> <li>Virtual environments.</li> </ol>  The difference of project and scripts, is that scripts not always output something useful they are rather a playground. Projects, in the other hand, are complex either with GUI or web."},{"location":"Python/introduction.html#some-useful-information","title":"Some useful information","text":""},{"location":"Python/introduction.html#how-to-know-the-import-path","title":"How to know the import path","text":"<pre><code>import sys\nprint(sys.path)\n</code></pre>"},{"location":"Python/introduction.html#how-to-know-the-current-directory","title":"How to know the current directory","text":"<pre><code>import os\nprint(os.getcwd())\n</code></pre>"},{"location":"Python/introduction.html#how-to-inspect-a-module","title":"How to inspect a module","text":"<p>To inspect a module we can use <code>dir(name_module)</code> and it will output all information about the module</p>"},{"location":"Python/introduction.html#about-python-packages","title":"About Python Packages","text":"<ul> <li>Function: Container of <code>variables</code> and <code>expressions</code></li> <li>Class:  Container of <code>variables</code> and <code>functions</code></li> <li>Module: (roughly) represent a python script which contain class, function, variables, and expressions</li> <li>Packages: Solution to manage python modules. Contain multiple modules and the file init.py</li> </ul> <p>some more information here Making a Python Package</p>"},{"location":"Python/introduction.html#some-good-rules","title":"Some Good Rules","text":"<ol> <li>Be explicit</li> <li>Import Only what you needed</li> <li>Give the right names to packages imports and variables</li> </ol>"},{"location":"Python/virtual_environments.html","title":"Virtual Environments","text":""},{"location":"Python/virtual_environments.html#installing-virtualenv","title":"Installing Virtualenv","text":"<p>Assuming python 3 it is already installed as well as <code>pip</code> we can start in this way:</p> <pre><code>pip install virtualenv\n</code></pre> <p></p>"},{"location":"Python/virtual_environments.html#creating-the-virtual-environment","title":"Creating the Virtual Environment","text":"<p>Now we can select the directory where we are going to save the virtual environment, in this example we will use the directory \"/Users/victoraguirre/Documents/026.workspace_Python\", and we can provide a name for it ( virtual environment), in this case i will choose <code>virtualEnv000</code></p> <pre><code>virtualenv -p python3 /Users/victoraguirre/Documents/026.workspace_Python/virtualEnv000\n</code></pre> <p></p>"},{"location":"Python/virtual_environments.html#activate-environments","title":"Activate environments","text":"<p>now a Folder with the name of the environment it is going to be created, the first step to activate the environment will be to navigate to that folder</p> <p></p> <p>and later call the <code>activate</code> file that is inside the <code>bin</code> directory</p> <pre><code>// on Mac\ncd /Users/victoraguirre/Documents/026.workspace_Python/virtualenv\nsource bin/activate\n\n// On windows\ncall /Users/victoraguirre/Documents/026.workspace_Python/virtualenv\nsource bin/activate.bat\n</code></pre> <p></p> <p>As part of this exercise I will install Flask inside this virtual environment</p>"},{"location":"Python/virtual_environments.html#install-packages-and-create-a-file","title":"Install packages and create a file","text":"<p>now lets install flask</p> <pre><code>pip install flask\n</code></pre> <p>here the basic code for a page in flash</p> <p></p> <p>now running</p> <pre><code>python app.py\n</code></pre> <p>we have the server running ans the website up ( default IP http://127.0.0.1:5000)</p> <p></p> <p></p>"},{"location":"Python/virtual_environments.html#deactivate-environment","title":"Deactivate environment","text":"<p>Now, to stop the environment we just need to type <code>deactivate</code></p> <p></p>"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html","title":"Flask","text":"<p>Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries.</p> <ol> <li>Pypi page</li> <li>Documentation</li> </ol>"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#index","title":"Index","text":"<p>I have several notes in this case, the first notes are from a youtube video and explain how to make a small application that use SQLite as database and Heroku for \"live deployment\", be aware that the app still use the <code>DEBUG=True</code> in a really live app that should be set to <code>False</code>.</p> <ol> <li>Quick &amp; Dirty First App.</li> <li>Official Flask tutorial. 2.1. Application Layout (Structure). 2.2. Application Factory. 2.3. Application Database. 2.4. Blueprints (part 01-Auth). 2.5. Templates. 2.6. Blueprints (part 02-Blog).</li> </ol>"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#extra-notes","title":"Extra notes","text":""},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#nuggets-for-template-jinja2","title":"Nuggets for Template Jinja2","text":"<ul> <li><code>{% include %}</code> it is used to add to the current template, in some cases are called partial, this is to further separate the templates, it is use to 'include' extra parts to the base or other templates.</li> <li><code>{% extends 'html_file.html'%}</code>  it is similar to inheritance.</li> <li><code>{{ super() }}</code> it is use in combination with <code>{% extends %}</code> and inside <code>{% Block %}</code> part of a child template this will tell jinja2 to render the content of the block and keeping the content of the original parent template's block.</li> </ul>"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#common-plug-ins","title":"Common plug-ins","text":"* **Flask-SQLAlchemy**:  For database interaction * **Flask-Session**:  User sessions management * **Flask-login**: Management user login * **Flask-WTF**: To handle forms"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#common-configuration-variables","title":"Common configuration variables","text":"General <ul> <li>FLASK_ENV</li> <li>DEBUG</li> <li>TESTING</li> <li>SECRET_KEY</li> <li>SERVER_NAME</li> </ul> Flask SQLAlchemy <ul> <li>SQLALCHEMY_DATABASE_URI</li> <li>SQLALCHEMY_ECHO</li> <li>SQLALCHEMY_ENGINE_OPTIONS</li> </ul> Flask Session <ul> <li>SESSION_TYPE</li> <li>SESSION_PERMANENT</li> <li>SESSION_KEY_PREFIX</li> <li>SESSION_REDIS</li> <li>SESSION_MEMCHED</li> <li>SESSION_MONGODB</li> <li>SESSION_SQLALCHEMY</li> </ul> Flask WTF <ul> <li>WTF_CSRF_ENABLED ==&gt; Set <code>False</code> to disable CSRF security</li> </ul>"},{"location":"Python/Frameworks/Flask/Introduction_and_notes.html#i-learned-from-experience","title":"I learned from experience","text":"About Cache and potential effects <p>If CSS is not reflected try clean the cache of the browser. I was struggling in a project, I made changes on the CSS and didn't see those reflected in the browser, I check the code and the redo the whole thing. Solution: Clean the cache of the browser.</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html","title":"Quick & Dirty First App","text":"<p>This notes are based in the  youtube video release by freecodecamp</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#the-structure","title":"The structure","text":"<p>a virtual environment is created thus the folder env, it contain all the documents and files need it to run the virtual environment</p> <p>now the structure of the application is simple, we wont use blue prints a concept that is really important to create modular, efficient and reusable application, for that reason we will have all the logic running in one single document <code>app.py</code> this document will contain the model and the controllers, the views as always will be manage by the templates like in all Flask application these templates are in the folder templates ( we use the template inheritance of jinja2). We will have just a one single <code>.css</code> file in the folder static, and few other documents, <code>requirements.txt</code> for the requirements, the <code>Procfile</code> for Heroku deplayment and the SQLite database as test.db</p> <p></p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#how-will-looks-like","title":"how will looks like","text":"<p>after deploy in heroku and as a first version will look like live app</p> <p></p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#the-appppy","title":"The app.ppy","text":"<p>The whole script will look like </p> <p>Now we are going to go a bit deeper and check some of the details</p> <p>Be aware that the script has <code>if __name__ == '__main__'</code> at the end there we set the app to enable <code>DEBUG</code> as <code>True</code></p> <p><pre><code>if __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> so we can see the error during the development, in a real application the <code>DEBUG</code> must be set to <code>False</code>.</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#imports","title":"Imports","text":"<p>Here is just the typical imports</p> <pre><code>from flask import Flask, render_template, url_for, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\n</code></pre> <p>From flask we will import</p> <ul> <li><code>Flask</code> the class and what we instanciate to create the app.</li> <li><code>render_template</code> Function to render the view from the template in the folder templates</li> <li><code>url_for</code> this one more complex to explain but basically will create URI to specific resources, example URL for the .css file to be use in the base for the templates.</li> <li><code>request</code> to handle the request of the forms implemented in the templates.</li> <li><code>redirect</code> To redirect to a specific view after some action.</li> <li><code>SQLAlchemmy</code> to handle everything related with the database.</li> </ul>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#declaration-app-and-database","title":"Declaration app and database","text":"<p>Here we create the class object that represent Flask and we bind it with a database flavor and we create a database object</p> <p><pre><code>app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\n</code></pre> The <code>///</code> means relative path, for a direct or explicit path we need to use <code>////</code></p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#database","title":"Database","text":"<p>This step normally will be done after we create some of the logic or some of the controllers and views, but since it is good practice to put it first on the script, I decided to put it first in the notes</p> <pre><code>class Todo(db.Model):\n    id  = db.Column(db.Integer, primary_key= True)\n    content = db.Column(db.String(200), nullable=False)\n    date_created = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __repr__(self):\n        return '&lt;Task %r&gt;' % self.id\n</code></pre> <p>Here there are two parts, the first one is the description of the model, what columns and what type of information. The second is just a method that will reply something every time we finish to add some new content, is just a responds to an action, the method is <code>__repr__</code></p> <p>note that in the first part, in the creation of the model we use <code>datatime.utcnow</code> to log the time of the creation of the task.</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#controllers","title":"Controllers","text":"<p>For the controllers there will be 3: 1. The index and landing page. 2. The delete 3. The update</p> <p>during development we will be creating controllers and views( templates) at the same time, since there are connected and they need each other, but in this case we are going to make a description of the controllers first and bellow in the next section we will check the views (templates).</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#index","title":"Index","text":"<p><pre><code>@app.route('/', methods=['POST','GET'])\ndef index():\n    if request.method == 'POST':\n        task_content = request.form['content']\n        new_task = Todo(content=task_content)\n\n        try:\n            db.session.add(new_task)\n            db.session.commit()\n            return redirect('/')\n        except:\n            return 'There was an issue adding your task'\n    else:\n        tasks = Todo.query.order_by(Todo.date_created).all()\n        return render_template('index.html', tasks=tasks)\n</code></pre> 1. <code>@app.route('/', methods=['POST'.'GET']</code> Is The decorator to create the root, if  the user go to <code>https://[ipaddress:port]/</code>  this controller will be executed, be aware that Flask by default use just <code>GET</code> so we need to specify the methods if we want to use something different, like in this case <code>@app.route('/', methods=['POST', 'GET'])</code>. 2. The if statement will handle the request, if there is a <code>POST</code> request we will trigger the code to create a new task, later commit to the database, finally redirect to the same page where will display the information. Finally the <code>else</code>  it is important to mentioned since this is the one that contain the code that get the task from the database and that send to the view <code>index.html</code> in the variable <code>tasks</code>.</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#delete","title":"Delete","text":"<pre><code>@app.route('/delete/&lt;int:id&gt;')\ndef delete(id):\n    task_to_delete = Todo.query.get_or_404(id)\n\n    try:\n        db.session.delete(task_to_delete)\n        db.session.commit()\n        return redirect('/')\n    except:\n        return 'There was a problem deleting that task'\n</code></pre> <p>here there are 2 important things:</p> <ol> <li>The decorator contain <code>&lt;int:id&gt;</code> which means that it will be expecting a value <code>int</code> from the variable <code>id</code>, example a URI like <code>https://[domain]/delete/1</code>.</li> <li>A function <code>get_or_404(id)</code> this function will get the information based in the id pass as parameter but if it is not correct or the <code>id</code> doesn't exit will return <code>404</code>.</li> </ol>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#update","title":"Update","text":"<pre><code>@app.route('/update/&lt;int:id&gt;', methods=['GET', \"POST\"])\ndef update(id):\n\n    task = Todo.query.get_or_404(id)\n\n    if request.method == 'POST':\n        task.content = request.form['content']\n\n        try:\n            db.session.commit()\n            return redirect('/')\n        except:\n            return 'There was an issue updating the task'\n    else:\n        return render_template('update.html', task=task)\n</code></pre> <p>It is similar to the other two controllers it will get some information on the URL, thus the decorator with the <code>&lt;int:id&gt;</code> and it will redirect to a new template to perform some actions using the <code>id</code>.</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#the-templates","title":"The Templates","text":"<p>There will be 3 templates;</p> <ol> <li><code>base.html</code> this is the base template and all the other template will inherit form this one.</li> <li><code>indext.html</code> it is the landing and is where most of the task and information will be display</li> <li><code>update.html</code> here is where we will perform the updates, the button in the template <code>index.html</code> with the name of <code>update</code> will redirect to this pages.</li> </ol>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#basehtml","title":"<code>base.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/main.css') }}\"&gt;\n    {% block head %}{% endblock %}\n&lt;/head&gt;\n&lt;body&gt;\n    {% block body %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Here we are using the method <code>url_for</code> to create a URI to the resources in the static folder, in this case will be the styles for the templates, in few works, the method will give me the path to the CSS file containing the styles.</li> <li><code>{% block body %} {% endblock %}</code> is part of the jinja2 syntax, this will allow us to input content from other file in this location.</li> </ol>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#indexhtml","title":"<code>index.html</code>","text":"<pre><code>{% extends 'base.html' %}\n\n{% block head %}\n&lt;title&gt;Task Master&lt;/title&gt;\n{% endblock %}\n\n{% block body %}\n&lt;div class=\"content\"&gt;\n    &lt;h1 style=\"text-align: center\"&gt;Task Master&lt;/h1&gt;\n    {% if tasks|length &lt; 1 %}\n    &lt;h4 style=\"text-align: center\"&gt;There are no tasks. Create one below!&lt;/h4&gt;\n    {% else %}\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Task&lt;/th&gt;\n            &lt;th&gt;Added&lt;/th&gt;\n            &lt;th&gt;Actions&lt;/th&gt;\n        &lt;/tr&gt;\n        {% for task in tasks %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ task.content }}&lt;/td&gt;\n                &lt;td&gt;{{ task.date_created.date() }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a href=\"/delete/{{task.id}}\"&gt;Delete&lt;/a&gt;\n                    &lt;br&gt;\n                    &lt;a href=\"/update/{{task.id}}\"&gt;Update&lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n    {% endif %}\n\n    &lt;div class=\"form\"&gt;\n        &lt;form action=\"/\" method=\"POST\"&gt;\n            &lt;input type=\"text\" name=\"content\" id=\"content\"&gt;\n            &lt;input type=\"submit\" value=\"Add Task\"&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre> <ol> <li><code>{% extends 'base.html' %}</code> this is how the inheritance is done, here I'm telling flask that this template inherit from the <code>base.html</code> template.</li> <li><code>{% if tasks|legth &lt;1 %}</code> and <code>{% endif %}</code> hre i'm evaluating if a variable <code>tasks</code> is bigger than 1, thi sis part of the jinja2 syntax.</li> <li><code>{% block head %}...{% endblock %}</code> and <code>{% block body %} ... {% endblock %}</code> this is how we input content in the templates.</li> <li>on the block body we will fine more jinja2 syntax, in this case is on the table <code>&lt;a href=\"/delete/{{task.id}}\"&gt;Delete&lt;/a&gt;</code> and <code>&lt;a href=\"/update/{{task.id}}\"&gt;Update&lt;/a&gt;</code> in this case what we tell Flask is that this links will use the controllers <code>delete</code> and <code>update</code> respectively.</li> </ol>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#the-static-files","title":"The static files","text":"<p>Here is not much to say, we will store the static files like stylesheet and javascript  documents in this folder, in this example we have just <code>.css</code> files so there are the only that have some importance in this example, below i will add the css file,</p> <pre><code>body, html {\n    margin: 0;\n    font-family: sans-serif;\n}\n\n.content {\n    margin: 0 auto;\n    width: 400px;\n}\n\ntable, td, th {\n    border: 1px solid #aaa;\n}\n\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth {\n    height: 30px;\n}\n\ntd {\n    text-align: center;\n    padding: 5px;\n}\n\n.form {\n    margin-top: 20px;\n}\n\n#content {\n    width: 70%;\n}\n</code></pre>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#deploy-to-heroku","title":"Deploy to heroku","text":"<p>The deployment to heroku will required a series of steps and the preparation of some extra documents</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#what-we-need","title":"What we need","text":"<p>We need:</p> <ol> <li>account in Heroku</li> <li>The <code>CLI</code> client for Heroku</li> <li>A library called <code>gunicorn</code></li> <li>A file <code>Procfile</code></li> </ol>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#procfile","title":"Procfile","text":"<p>The Procfile contain the following:</p> <pre><code>web: gunicorn app:app\n</code></pre>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#freeze-the-requirements","title":"Freeze the requirements","text":"<p>We need to run in the console the Freeze command to freeze the libraries version and we can sabe it to a file called requirement</p> <pre><code>pip3 freeze &gt; requirements.txt\n</code></pre>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#create-the-git-repo","title":"Create the git repo","text":"<p>We need to keep track of the version and prepare the repo so Heroku can use it to get the application, the steps are simple:</p> <pre><code>git init\ngit add .\ngit commit -m \"init repo\"\ngit remote -v\n</code></pre> <p>we have one more git command to execute but first we need to create the app on heroku</p>"},{"location":"Python/Frameworks/Flask/first_app_flask.html#creating-the-app-in-heroku","title":"Creating the app in Heroku","text":"<p>we need to create a new app in heroku for that purpose we will use the <code>CLI</code> with the following command</p> <pre><code>heroku create [NameOfTheApp]\n</code></pre> <p>after the creation of the app we execute the last <code>GIT</code> command</p> <pre><code>git push heroku master\n</code></pre> <p>Finally if everything is in order we should be able to see the live app in the URL given https://flaskvicplayground.herokuapp.com/</p> <p>I will continue working on it testing things like bootstrap to improve the visual, and in some cases i will try to add javaScript to play with animation so the current version of the live app might look different of the visual presented in this notes.</p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html","title":"Databases - Flask-SQLAlchemy","text":"<p>Flask-SQLAlchemy is a wrapper for SQLALChemy, SQLALchemy is a ORM or Object Relational Mapper, this allow the application to manage the database using high level objects such as classes, objects and methods instead of tables and SQL, in other words ORM translate high-level operations in database commands.</p> <ol> <li>Official documentation:</li> <li>PIP page:</li> </ol> <p>Flask-SQLAlchemy support different databases, relational an no-n relational, we can use a simple database such as SQLite for prototyping and development and once deploy we can switch to a more complex database without the need to change much parts for the code.</p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#installation","title":"Installation","text":"<pre><code>pip install flask-sqlalchemy\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#database-migration","title":"Database migration","text":"<p>The author of mega-tutorial make a good point, not all tutorial cover migration of a database, this is important since the relational databases are base in structures data so if data change the database need to change and we will need to make the migration of the data that already exist, so there is where the author introduce a library write by himself called <code>Flask-migrate</code> which is a wrapper for <code>Alembic</code>.</p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#installation_1","title":"Installation","text":"<pre><code>pip install flask-migrate\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#flask-sqlalchemy-configuration","title":"<code>Flask-SQLAlchemy</code> Configuration","text":"<p>I will continue using the example of the microblog use in the form extension notes, and we are going to use the SQLite database.</p> <p>We are going to add two new configuration to the config file</p> <p>config.py <pre><code>import os\n\n#1. new configuration\nbasedir = or.path.abspath(os.path.dirname(__file__))\n\nclass Config(object):\n    \"\"\"COnfiguration class\"\"\"\n    SECRET_KEY = os.environ.get('SECRET_KEY') or \"secretKey\"\n\n    #2. New configuration\n    SQLALCHEMY_DATABASE_URL = os.environ.get('DATABASE_URL') or 'sqlite:///' + os.path.join(basedir,'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n</code></pre></p> <p>so from the previous code</p> <ol> <li>the definition of <code>basedir</code>  I just define a base directory.</li> <li>SLQAlchemy take the location of the database from the configuration variable <code>SQLALCHEMY_DATABASE_UR</code>  as we mentioned in the notes for forms, it is a good practice store the configuration variable in the environment variable, and provide a fall-back in case of failure <code>or 'sqlite:///' + os.path.join(basedir,'app.db')</code> in this case the fall-back will look for a database file in the root directory.</li> <li><code>SQLALCHEMY_TRACK_MODIFICATIONS</code> this variable is set to <code>false</code>, this is to disable  a feature from Flask-SQLAlchemy that is not need it , this feature signal the application  every time a change is about to be made.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#initialize-the-database-and-the-migration-object","title":"Initialize the database and the migration object","text":"<p>The database is going to be represented for the database instance, same as the migration engine. These two object should be create it after the creation of the application, so:</p> <p>application/ini.py <pre><code>from flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLALchemy\nfrom flask_migrate import Migrate\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nfrom application import routes, models\n</code></pre></p> <p>from the code we have:</p> <ol> <li>like most extensions we have the instance of the objects that will represent that extension, for example <code>db</code> which will be the object that represent the database.</li> <li>most of the extension in flask will follow similar pattern</li> <li>finally we import models ad the end of the script, this model define the structure of the database.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#database-models","title":"Database Models","text":"<p>The database will be represented by a collection of classes called <code>database models</code>, the ORM layer from SQLAlchemy will take care of the translation of classes to rows and proper tables</p> <p></p> <p>so for the table we see 4 different rows 1. <code>id</code> whihc is the primary key and will represent each unique user 2. the other 2 field are <code>username</code> and <code>email</code> the data type is <code>VARCHAR</code> which is basically a string. 3. the <code>password_hash</code>  this is a good practice, we should never safe the plain text password in the database.</p> <p>now we need to create the database model, the class that will represent the table</p> <p>Application/models.py <pre><code>from application import db\n\nclass User(db.Models):\n    \"\"\"Table USERs\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    username= db.Column(db.String(64), index=True, unique=True)\n    email = db.Column(db.String(120), index=True, unique=True)\n    password_hash = db.Column(db.String(128))\n\n    def __repr__(self):\n        return '&lt;User {}&gt;'.format(self.username)\n</code></pre></p> <ol> <li>the class that will represent the table will inherit from <code>db.Model</code> which is the base for all models from Flask-SQLAlchemy</li> <li>each variable will represent the database columns, there are instance of the <code>db.Column</code> class, this class receive as argument the data type and some additional optional arguments like, Primary key, index, and unique.</li> <li>finally the method <code>__repr__</code> this method tells python how to print the objects of this class, it is useful in debugging</li> </ol> <p>bellow and example of how will python print the object</p> <pre><code>&gt;&gt;&gt; from app.models import User\n&gt;&gt;&gt; u = User(username='susan', email='susan@example.com')\n&gt;&gt;&gt; u\n&lt;User susan&gt;\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#creating-the-migration-repository","title":"Creating The Migration Repository","text":"<p>the previous class represent the model or the schema of the database, but is highly possible that this structure will change with the time, so we will need to do some migration, the author of the mega-tutorial created a Flask extension Flask-Migrate that use Alembic to do the migration.</p> <p>Alembic create migration scripts and safe the changes face with each migration, in order to safe those scripts and changes we will need to create a migration repository so we can store that information.</p> <p>Flask-Migrate is design to interact with <code>flask</code> commands, similar to what we use <code>flask run</code> in this case flask-Migrate will use <code>flask db</code> to manage everything related with databases.</p> <p>To create the migration repository for our example we use <code>flask db init</code></p> <p></p> <p>these <code>flask</code> commands relay in the <code>FLASK_APP</code> enviroment variable so it is important to make sure that variable is set properly before execute the command.</p> <p>after the command is executed a new directory will appear</p> <p></p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#the-first-database-migration","title":"The First Database Migration","text":"<p>There are two ways to do the migration, automatically and manually. To generate the automatic migration Alembic compares the database schema as defined in the database models and the current database, after that it will generate the script to migrate and make the models match to the models defined in the schema. To generate this automatic migrations we use <code>flask db migrate</code></p> <p><pre><code>flask db migrate -m \"users table\"\n</code></pre> </p> <p>from the previous answer:</p> <ol> <li>first two lines are not important for now.</li> <li>Alembic tell use where the migration script was store, and assigned an unique code.</li> <li>the -m in the command was just to add extra description to the migration. now the generated script is in the folder</li> </ol> <p></p> <p>I wont go to details in what the script mentioned, but we can point that there are two main functions <code>upgrade()</code> and <code>downgrade()</code>. the <code>upgrade()</code> apply the migration and <code>downgrade()</code> removes it. This will allow Alembic to perform the migrations to a any point in the history  even older versions using the <code>downgrade()</code> path.</p> <p>It is important to remark that the command <code>flask db migrate</code> doesn't perform the changes in the database, it just generate the script, to execute the changes we use <code>flask db upgrade</code>.</p> <p>Note: the example use SQLite, so in this case a file containing the database will be create but in production if we use different database server we need to create the table first.</p> <p>By default Flask_SQLAlchemy use snake case for the name of the databases, so a model named \"AddressAndPhone\" will generate a table \"address_and_Phone\" so if we want to change this behavior we can add the attribute <code>__tablename__</code> to the model class.</p> <p>so let's say we want the table to be called  \"Users\", it will be something like:</p> <pre><code>from sqlalchemy import Column, Integer, String\nfrom yourapplication.database import Base\n\nclass User(Base):\n    __tablename__ = 'Users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True)\n    email = Column(String(120), unique=True)\n\n    def __init__(self, name=None, email=None):\n        self.name = name\n        self.email = email\n\n    def __repr__(self):\n        return '&lt;User %r&gt;' % (self.name)\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#database-relationships","title":"Database Relationships","text":"<p>Now we will add other table, this time will be the table that represent the post, we need to be careful reading the table, there will be a foreign key that will be the way to represent the relationship between the both tables</p> <p></p> <p>Now we can see a second table <code>posts</code> this table will contain an unique <code>id</code> field, the <code>body</code>, the <code>timestamp</code> and a foreign key called <code>user_id</code>. This foreign key is the way to link both tables, this relationship is called one-to-many ( one user can write many ports ).</p> <p>Noww the model will change application/models/py</p> <pre><code>from datetime import datetime\nfrom app import db\n\nclass User(db.Models):\n    \"\"\"Table USERs\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    username= db.Column(db.String(64), index=True, unique=True)\n    email = db.Column(db.String(120), index=True, unique=True)\n    password_hash = db.Column(db.String(128))\n    posts = db.relationship('Post', backref='author', lazy='dynamic')\n\n    def __repr__(self):\n        return '&lt;User {}&gt;'.format(self.username)\n\nclass Post(db.Model):\n    \"\"\" Table posts\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    body = db.Column(db.String(140))\n    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n\n    def __repr__(self):\n        return '&lt;Post {}&gt;'.format(self.body)\n</code></pre> <p>From the code above:</p> <ol> <li><code>Post</code> Class represent the post the user will write.</li> <li><code>timestamp</code> will be a indexed column so we can search the records chronologically, and it contain a default argument set to <code>datetime.utcnow</code> notice that is without the <code>()</code> it is because we are passing as a default argument a function not the result of that function. the timestamp will be convert to the user time when they are displayed.</li> <li><code>user_id</code> was initialized as the Foreign key <code>user.id</code>, in other words, it is a reference to the <code>id</code> value in the table <code>user</code></li> </ol> <p>SQLAlchemy by default will treat all the table names as lower case which is different to what is use in SQL and different of the class name, but there is way to change that behavior as it was explain above by using the attibute <code>__tablename__</code>.</p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#new-field-dbrelationship","title":"New field <code>db.relationship</code>","text":"<p>Now we discuss the new field in the User table. We added the line <code>posts = db.relationship('Post', backref='author', lazy='dynamic')</code> this is not a real database field but rather a high-level representation of the relationship of User table and Post (it won't be in the relational diagram)&gt;</p> <p>For this type of relationship one-to-many the <code>db.relationship</code> is going to be in the one side of the relationship, and it is a convenient way to access the many, with an example will be easy to understand, let way we have a user <code>u</code> and we want to access all the post written by <code>u</code> we just need to call <code>u.post</code>.</p> <p>now form the expression we have:</p> <ol> <li>the first argument is the many side of the relationship, in ths case <code>Post</code>.</li> <li>the <code>backref</code> define the name of the argument one the many side object that point back to the one object, in other words this will add <code>post.author</code> expression that will return the user given a post.</li> <li><code>lazy</code> define how the database relationship will be manage, it wont be explain yet, hope i can do it later.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#migrate-the-changes","title":"Migrate the changes","text":"<p>Since we made changes to the database we will need to migrate the changes.</p> <p>First, We generate the database migration</p> <p><pre><code>flask db migrate -m \"posts table\"\n</code></pre> </p> <p>second, we applied the migration to the database</p> <p><pre><code>flask db upgrade\n</code></pre> </p>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#play-time","title":"Play Time","text":"<p>Now, we can use the python interpreter to test the database we create, first we can start creating the Users</p> <p></p> <p>with the interactive environment we can create the record.</p> <ol> <li>Create the User records by using the class and the parameters <code>username</code> and <code>email</code></li> <li>use <code>db.session.add(u)</code> we use the <code>session.add()</code> to add the object, preparing for commit but not commit yet.</li> <li>Use the <code>commit</code>  to commit to the database</li> </ol> <pre><code>u = User(username='susan', email='susan@example.com')\ndb.session.add(u)\ndb.session.commit()\n</code></pre> <p></p> <p>from the previous images</p> <ol> <li>we use to get back all records <code>User.query.all()</code>.</li> <li>the result of the previous query will give back all the records on the table.</li> </ol> <p>Now if we want to get just one record we can use a index type of query</p> <pre><code>u = User.query.get(1)\n</code></pre> <p>now for the Post part</p> <p></p> <p>Now to delete all the records</p> <pre><code>users = User.query.all()\nfor u in users:\n     db.session.delete(u)\n\nposts = Post.query.all()\nfor p in posts:\n     db.session.delete(p)\n\ndb.session.commit()\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_flask_sqlalchemy.html#shell-context","title":"Shell Context","text":"<p>Now, the Shell context is a extra help Flask provided, this is base in the fact that during the development of a site with flask we will need to test constantly using the python interactive console, and that will required the constant import such as:</p> <pre><code>from application import db\nfrom app.models import User, Post\n</code></pre> <p>we can avoid this issue using the shell context, this context will run within the app context to test we can make the following test</p> <p></p> <p>We can use some of the flask decorators to add this imports to the shell context, for that we need to add something to one of the files</p> <p>microblog.py <pre><code>from application import app, db\nfrom app.models import User, Post\n\n@app.shell_context_processor\ndef make_shell_context():\n    return {'db':db, 'User': User, 'Post': Post}\n</code></pre></p> <p></p>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html","title":"Databases(Migration) - Flask-Migration","text":"<p>Flask-Migrate is an extension that handles SQLAlchemy database migrations for Flask applications using Alembic. The database operations are made available through the Flask command-line interface or through the Flask-Script extension.</p> <p>This extension was explain in the previous notes Databases - Flask-SQLAlchemy</p> <ol> <li>Documentation</li> <li>Github</li> <li>Pypi</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html#installation","title":"Installation","text":"<pre><code>pip install Flask-Migrate\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html#previous-usage","title":"previous usage","text":"<p>In the previous notes we use this extension to do different things, we did:</p> <p>Remember this extension work with <code>flask</code> command</p>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html#creating-migration-repository","title":"Creating migration repository","text":"<p><pre><code>flask db init\n</code></pre> </p>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html#first-database-migration","title":"First database migration","text":"<p><pre><code>flask db migrate -m \"users table\"\n</code></pre> </p>"},{"location":"Python/Frameworks/Flask/Extensions/database_migration_flask_migration.html#apply-changes-to-database","title":"Apply changes to database","text":"<p><pre><code>flask db upgrade\n</code></pre> </p>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html","title":"Forms - Flask-WTF","text":"<p>Like most of the Flask extensions they start with <code>Flask-</code> in this case we will talk about Flask-WTF</p> <p>FlaskWTF or Flask-WTF is a simple integration of WTFroms for flask including Cross-Site Request Forgery or CSRF (pronounced \"seasurf\" , file upload, and reCAPTCHA.</p> <ol> <li>Documentation</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#installation","title":"Installation","text":"<pre><code>$ pip install flask-wtf\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#features","title":"Features","text":"<ul> <li>Integration with WTForms.</li> <li>Secure Form with CSRF token.</li> <li>Global CSRF protection.</li> <li>reCAPTCHA support.</li> <li>File upload that works with Flask-Uploads.</li> <li>Internationalization using Flask-Babel.</li> </ul>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#example","title":"Example","text":"<p>Following the <code>separation of concerns</code> it is a good practice to keep the forms in a different file/module, in the following example we will consider an app that will ask customer to log in, this log in form will include:</p> <ul> <li>Username.</li> <li>Password.</li> <li>Remember me check box.</li> <li>Submit Button.</li> </ul>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#the-loginform-class","title":"The LoginForm class","text":"<p>application/forms.py <pre><code>from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField\nfrom wtforms.validators import DataRequired\n\nclass LoginForm(FlaskForm):\n    \"\"\"Login form class\"\"\"\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember_me')\n    submit = SubmitField('Sign in')\n</code></pre></p> <p>From the code we got:</p> <ol> <li><code>FlaskForm</code> is the base form class and all the clases we will create will inherit from it, this class is part of <code>flask_wtf</code>.</li> <li>The 4 type of field are represented as classes and they came form <code>wtforms</code>, since the <code>Flask-WTF</code> extension does not provide customized versions.</li> <li>Each instance or object of the field class has as first argument a label, and the second and optional argument will be the validators, in this case we use the validator <code>DataRequired()</code></li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#form-templates","title":"Form Templates","text":"<p>We have the form, now 2 things are missing the template and the view function, in this section we will talk about the template.</p> <p>We will follow the template inheritance and will will be using <code>{% extend \"base.html\" %}</code> to extend inherit from the base template.</p> <p>we will create a new template <code>login.html</code> and it will be same in the template folder (in more complex application this might be different).</p> <p>application/templates/login.html <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n    &lt;h1&gt;Sign In&lt;/h1&gt;\n    &lt;form action=\"\" method=\"post\" novalidate&gt;\n        {{ form.hidden_tag() }}\n        &lt;p&gt;\n            {{ form.username.label}}&lt;/br&gt;\n            {{ form.username(size=32)}}\n        &lt;/p&gt;\n        &lt;p&gt;\n            {{ form.password.label}}&lt;/br&gt;\n            {{ form.password(size=32)}}\n        &lt;/p&gt;\n        &lt;p&gt;\n            {{ form.remember_me}} {{ form.remember_me.label}}\n        &lt;/p&gt;\n        &lt;p&gt; {{ form.submit() }}&lt;/p&gt;\n    &lt;/form&gt;\n{% endblock %}\n</code></pre></p> <p>From the script we have:</p> <ol> <li>The template expect a object instance of the <code>LoginForm</code> that object is refer as <code>form</code> we will see in the view function were we need to pass that object and how we create the instance.</li> <li>We use the tag <code>&lt;form&gt;</code> to contain the web form.</li> <li>The <code>action</code> attribute of the form is used to tell the browser the URL that should be used when submitting the information the user entered in the form. When the <code>action</code> is set to an empty string the form is submitted to the URL that is currently in the address bar, which is the URL that rendered the form on the page.</li> <li>The method is set as \"post\".</li> <li>The <code>novalidate</code> attribute is used to tell the web browser to not apply validation to the fields in this form, which effectively leaves this task to the Flask application running in the server This is optional, but we use it in this case so we can test the validation in the server-side.</li> <li><code>form.hidden_tag()</code> template argument generates a hidden field that includes a token that is used to protect the form against CSRF attacks. All you need to do to have the form protected is include this hidden field and have the SECRET_KEY variable defined in the Flask configuration.</li> </ol> <p>IMPORTANT: if we check the template in detail we notice that there are not <code>&lt;input &gt;</code> tags  this is because he fields from the form object know how to render themselves as HTML. 1. All I needed to do was to include <code>{{ form.&lt;field_name&gt;.label }}</code> where I wanted the field label, and <code>{{ form.&lt;field_name&gt;() }}</code> where I wanted the field. 2. To modify the field we can use the attributes that will be in th <code>&lt;input&gt;</code> example, <code>size</code> argument.</p>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#form-views","title":"Form Views","text":"<p>The last step need it is the form view, the view function that will render the template. This new view function can be add it to a routes module as follow</p> <p>application/routes.py <pre><code>from flask import render_template\nfrom application import app\nfrom application.form import LoginForm\n\n@app.route('/')\n@app.route('/index')\n\ndef index():\n\n    user = {'username': 'Victor'}\n    posts = [\n        {\n            'author': {'username': 'John'},\n            'body': 'Beautiful day in Portland!'\n        },\n        {\n            'author': {'username': 'Susan'},\n            'body': 'The Avengers movie was so cool!'\n        }\n    ]\n\n    return render_template('index.html', title='Home', user=user, posts=posts)\n\n@app.route('/login')\ndef login():\n    form = LoginForm()\n    return render_template('login.html', title='Sign In', form=form)\n</code></pre></p> <p>What are we doin is importing the calls <code>LoginForm</code> from the module <code>forms.py</code> and we create and instant object of that class called <code>form</code> later in <code>render_template</code> we pass that object <code>form</code> to the variable <code>form</code> this variable is the required for to get the fields rendered</p> <p>Now we can add a link to login in or base template</p> <pre><code>&lt;div&gt;\n    My app:\n    &lt;a href=\"/index\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n&lt;/div&gt;\n</code></pre> <p>However if we click in submit button we will have </p> <p>This is because we don't have the logic to handle the request using <code>POST</code> and the form is using post top send the information</p>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#receiving-form-data","title":"Receiving Form Data","text":"<p>In order to the the request or to be able to handle the request we need to add some extra code to the view function</p> <p>application/routes.py <pre><code>from flask import render_template, flash, redirect\n\n@app.route('/login', methods=['GET','POST'])\ndef login():\n    from = LoginForm()\n    if form.validate_on_submit():\n        flash('Login requested for user {}, remember_me={}'.format(form.username.data, form.remember_me.data))\n        return redirect('/index')\n    return render_template('login.html', title=\"Sign In\", form=form)\n</code></pre></p> <p>from the previous code:</p> <ol> <li>We add <code>methods</code> to the decorator, the default method in the decorator will be <code>GET</code> so in order to support the post request done when the form is submitted we need to let the view function knows.</li> <li>the <code>form.validate_on_submit()</code> method does all the form processing work, it work in to \"phases\", first, when the page request the form using <code>GET</code>  the function <code>form.validate_on_submit()</code> return <code>false</code> so the if block is skip and the page render the form. Second, when user press submit the request is done with <code>POST</code> in which case the function <code>form.validate_on_submit()</code>, if the validation is correct, it will return <code>True</code> and the code in the if block will be executed.</li> <li><code>flash()</code> Is a function to show a message to the user, in this case since we dont have a database to compare the login credentials we will use it to send a confirmation that the form was submitted correctly, bellow we will modify the template to be able to display the <code>flash()</code> message.</li> <li><code>redirect()</code> this function give instructions to the client web browser to automatically navigate to a different page, given as argument.</li> </ol> <p>appplication/templates/base.html <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        {% if title %}\n        &lt;title&gt;{{ title }} - microblog&lt;/title&gt;\n        {% else %}\n        &lt;title&gt;microblog&lt;/title&gt;\n        {% endif %}\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            Microblog:\n            &lt;a href=\"/index\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;hr&gt;\n        {% with messages = get_flashed_messages() %}\n        {% if messages %}\n        &lt;ul&gt;\n            {% for message in messages %}\n            &lt;li&gt;{{ message }}&lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n        {% endif %}\n        {% endwith %}\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>as we mentioned before <code>flash()</code> is a function use to give messages to the user, but to be able to see it we need to modify the templates to do it, in this case we are going to modify the <code>base.html</code> template.</p> <ol> <li><code>{% with messages = get_Flashed_messages() %}</code> the <code>with</code> is a construct that we are going to use to assign the return value of <code>get_flashed_messages()</code> to the variable <code>messages</code>, all in the context of this template.</li> <li><code>get_flashed_messages()</code>  this function come from Flask and it returns a list of messages register to <code>flash()</code>.</li> <li><code>{% if messages %}</code> is a condition to check if the variable has some content, if the variable has some content we will use a <code>HTML</code> list and a jinja <code>{% for message in messages %}</code> to loop and display all the messages in the list.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#improving-the-field-validation","title":"Improving the Field Validation","text":"<p>For the most part the validation and the form are working, although if we fail during the validation we don't know what is the filed that failed and we don't have any way to alert the user that there is a mistake or an error in the form.</p> <p>We can create some messages in the login.html template so if the customer fail in some field we can give the feedback</p> <p>application/templates/login.html</p> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n    &lt;h1&gt;Sign In&lt;/h1&gt;\n    &lt;form action=\"\" method=\"post\" novalidate&gt;\n        {{ form.hidden_tag() }}\n        &lt;p&gt;\n            {{ form.username.label }}&lt;br&gt;\n            {{ form.username(size=32) }}&lt;br&gt;\n            {% for error in form.username.errors %}\n            &lt;span style=\"color: red;\"&gt;[{{ error }}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n        &lt;p&gt;\n            {{ form.password.label }}&lt;br&gt;\n            {{ form.password(size=32) }}&lt;br&gt;\n            {% for error in form.password.errors %}\n            &lt;span style=\"color: red;\"&gt;[{{ error }}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n        &lt;p&gt;{{ form.remember_me() }} {{ form.remember_me.label }}&lt;/p&gt;\n        &lt;p&gt;{{ form.submit() }}&lt;/p&gt;\n    &lt;/form&gt;\n{% endblock %}\n</code></pre> <p>From the previous template we can see the changes, in this case we are using <code>form.username.errors</code> and <code>form.password.errors</code> to check if there is any error in this field, the validator attached to every field will be <code>form.&lt;filed_name&gt;.errors)</code></p> <p></p>"},{"location":"Python/Frameworks/Flask/Extensions/forms_flask_wtf.html#generating-links","title":"Generating Links","text":"<p>For now the login is basically complete, but we have some hardcoded URLs whihc is not a goo practice, so far we have:</p> <p>application/templates/base.html <pre><code>    &lt;div&gt;\n        Microblog:\n        &lt;a href=\"/index\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n    &lt;/div&gt;\n</code></pre> and</p> <p>application/routes.html <pre><code>@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        # ...\n        return redirect('/index')\n    # ...\n</code></pre></p> <p>The good practice will be, generate those URLs using <code>url_for()</code> whihc generate the URLs bas in the internal mapping, The argument of <code>url_for()</code> will be the name of the view function, so for example, <code>url_for('login')</code> because the view function is called <code>/login</code> will returns /login, and same for  <code>url_for('index')</code> return <code>/index</code>.</p> <p>So the previous links will be</p> <p>application/templates/base.html <pre><code>    &lt;div&gt;\n        Microblog:\n        &lt;a href=\"{{ url_for('index') }}\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"{{ url_for('login') }}\"&gt;Login&lt;/a&gt;\n    &lt;/div&gt;\n</code></pre> and</p> <p>application/routes.html <pre><code> from flask import render_template, flash, redirect, url_for\n\n# ...\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        # ...\n        return redirect(url_for('index'))\n    # ...\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html","title":"Login - Flask-login","text":"<p>Flask-Login is Flask extension that provide user session management to flask app, it handle the most common task related with the login procedure, task such as Logging in, Logging out, Remember sessions (permanent of by a define amount of time).</p> <ol> <li>Official documentation:</li> <li>PIP page:</li> <li>Git:</li> </ol> <p>From the official documentation of Flask-Login:</p> <ul> <li>Store the active user\u2019s ID in the session, and let you log them in and out easily.</li> <li>Let you restrict views to logged-in (or logged-out) users.</li> <li>Handle the normally-tricky \u201cremember me\u201d functionality.</li> <li>Help protect your users\u2019 sessions from being stolen by cookie thieves.</li> <li>Possibly integrate with Flask-Principal or other authorization extensions later on.</li> </ul>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#installation","title":"Installation","text":"<pre><code>pip install Flask-Login\n</code></pre>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#password-hashing","title":"Password Hashing","text":"<p>Flask Has a dependency that can handle the hashing of passwords, this dependency is called Werkzeug, this is an example of a password hash using <code>generate_password_hash()</code></p> <p></p> <p>Now to verify the hashed password we can use the function <code>check_password_hash()</code></p> <p></p> <p>In this case the <code>check_password_hash()</code> will return <code>True</code> if the hash password matches, and <code>False</code> when they don't matches.</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#password-hashing-and-verification","title":"Password hashing and verification","text":"<p>The whole password hashing logic can be implemented as two new methods in the user model</p> <p>app/models.py <pre><code>from werkzeug.security import generate_password_hash, check_password_hash\n\n#...\n\nclass User(db.Model):\n    #...\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n</code></pre></p> <p>we can check if this is working with the flask shell</p> <p></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#introduction-to-flask-login","title":"Introduction to Flask-login","text":"<p>Flask-login help us to handle the logged-in state, in other words \"remembers\" the state, so the user can navigate the site and maintain the session state.</p> <p>As other Flask extensions we need to register it, for that we need to modify the <code>__init__.py</code></p> <p>application/init.py <pre><code>#...\n\nfrom flask_login import LoginManager\n\napp = Flask(__name__)\n\n#...\nlogin = LoginManager(app)\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#preparing-the-user-model-for-flask-login","title":"Preparing The User Model for Flask-login","text":"<p>Flask-login extension work with any model and multiple databases the only requirements is the implementation of four items:</p> <ul> <li><code>is_autheticated</code>:  Property is <code>True</code> if the user is valid, <code>false</code> if is not.</li> <li><code>is_active</code>: Property is <code>True</code> if the user is active and <code>False</code> otherwise.</li> <li><code>is_anonymous</code>: Property is <code>False</code> if the user is a regular user, <code>True</code> if is special anonymous user.</li> <li><code>get_id()</code>: it returned a unique identifier for the user as a string.</li> </ul> <p>Although Flask-login provided a mixin class called <code>UserMixin</code> that include the generic implementation that are appropriate for most user model classes.</p> <p>application/models.py <pre><code>#...\n\nfrom flask_login import UserMixin\n\nclass User(UserMixin, db.Model):\n    #...\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#user-loader-function","title":"User Loader Function","text":"<p>This extension track the logged user by storing the user identifier  in a Flask's user sessions, each time the logged-in user navigate to a new page, the extension retries the Id of the user from the session, and the loads the user into memory.</p> <p>Flask-Login need some help to load the user, in that case we need to create a new function.</p> <p>application/models.py <pre><code>from application import login\n\n# ...\n\n@login.user_loader\ndef load_user(id):\n    return User.query.get(int(id))\n</code></pre></p> <p>Now, we need to register the User loader to the extension, in this case we register the user loader to the Flask-login with the decorator <code>@login.user_loader</code>, if we check in detail, there is a cast from string to Integer, that is because the ID of the user Flask-login pass is a string</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#logging-user-in","title":"Logging User In","text":"<p>With the database in place, with the user loader done and with the modification in the User model we can make a modification of the view function handling the login.</p> <p>application/routes.py <pre><code>#...\n\nfrom flask_login import current_user, login_user\nfrom application.models import User\n\n#...\n\n@app.route('/login', methods=['GET','POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.date).first()\n        if user is None or not user.check_password(form.password.data):\n            flash('Invalid username or password')\n            return redirect(url_for('login'))\n        login_user(user, remember=form.remember_me.data)\n        return redirect(url_for('index'))\n    return render_template('login.html', title='Sign In', form=form)\n</code></pre></p> <p>From the previous code we have:</p> <ol> <li>The first two lines have two important items, the first <code>current_user</code> this variable contain the user, and the parameter <code>is_authenticated</code>, if the user is already log in the parameter <code>is_authenticated</code> will be <code>True</code>, and them the user is redirect to the index.</li> <li>we get back the user from the database if hte user is not already log in, in this case we use the <code>query.filter_by</code> and the method <code>first()</code> to filter the records by user name and get back the first record found.</li> <li>Now we verify the password, in this case we need to remember that the password is hash so we use the method <code>check_password()</code>, the there is no match we will use the <code>flash()</code> method to display the error and redirect to login page.</li> <li>if the user and password are correct, we call the method <code>login_user()</code>, this function comes from Flask-login, this function will register the user as logged in, so that means that any future pages the user navigates will the variable <code>current_user</code> set to that user.</li> <li>last step is to redirect the newly logged user to the index page.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#logging-users-out","title":"Logging Users Out","text":"<p>We can use the <code>logout_user()</code> to complete the log out process</p> <p>application/routes.py <pre><code># ...\n\nfrom flask_login import logout_user\n\n# ...\n\n@app.route('/logout')\ndef logout():\n    logout_user()\n    return redirect(url_for('index'))\n</code></pre></p> <p>Now, we need to expose the link to the user, we ned to switch the login link in the navigation bar to logout if the user is log in.</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#modification-to-the-templates","title":"Modification to the Templates","text":"<p>application/templates/base.html <pre><code>    &lt;div&gt;\n        Microblog:\n        &lt;a href={{ url_for(endpoint='index') }}&gt;Home&lt;/a&gt;\n        {% if current_user.is_anonymous %}\n        &lt;a href={{ url_for(endpoint='login') }}&gt;Login&lt;/a&gt;\n        {% else %}\n        &lt;a href={{ url_for(endpoint='logout' }}&gt;Logout&lt;/a&gt;\n        {% endif %}\n    &lt;/div&gt;\n</code></pre></p> <p>From the class <code>UserMixin</code> we have access to the property <code>is_anonymous</code>. The <code>current_user.is_anonymous</code> expression is going to be True only when the user is not logged in.</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#requiring-user-to-login","title":"Requiring User To Login","text":"<p>With some of the features of Flask-login we can \"force\" the user to login before they can view certain pages of the application, if a user who is not logged in tries to view a protected page Flask-Login will automatically redirect the user to the login form, and only redirect back to the page the user wanted to view after the login process is complete.</p> <p>To implement this function  we will need to tel flask-login which is the view function handling the login.</p> <p>application/init.py <pre><code>#...\nlogin = LoginManager(app)\nlogin.login_view = 'login'\n</code></pre> the <code>'login'</code> value in the code above  is the name of the login view, the same we use in <code>url_for()</code>.</p> <p>Now the way Flask-Login protect a view function against anonymous users is with the decorator <code>@login_required</code>, this decorator is added to the view function bellow <code>@app.route</code>, a function with this decorator becomes protected and will not allow access to a not authenticated.</p> <p>application/routes.py <pre><code>from flask_login import login_requered\n\n@app.route('/')\n@app.route('/index')\n@login_required\ndef index():\n    #...\n</code></pre></p> <p>The <code>@login_required</code> will intercept the request and respond with a redirect to <code>/login</code>, but it will add a query string argument to this URL, the complete URL will be like <code>/login?next=/index</code>. The <code>next</code> query string argument is set to the original URL, so the application can use  that to redirect back after login.</p> <p>Now we need to read and process the <code>next</code> query string argument:</p> <p>Application/routes.py <pre><code>from flask import request\nfrom werkzeug.urls import url_parse\n\n@app.route('/login'. methods=['GET','POST'])\ndef login():\n    #...\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user is None or not user.check_password(form.password.data):\n            flash('Invalid username or password')\n            return redirect(url_for(endpoint='login'))\n        login_user(user, remember=form.remember_me.data)\n        next_page = request.args.get('next')\n        if not next_page or url_parse(next_page).netloc !='':\n            next_page = url_for(endpoint='index')\n        return redirect(next_page)\n    return render_template('login.html', title='Sign In', form=form)\n</code></pre> once the user is login and the function <code>login_user()</code> is used, the value of the <code>next</code> string query argument is obtained. The variable <code>request</code> come from flask and it store all the information the client sent with the request. From this variable we can check the attribute <code>arg</code> as <code>request.arg</code> this attribute contain all the content of the query string, this information is format as a dictionary thus the use of <code>get('next')</code> to get back the page to be redirected to.</p> <p>Now we need to give a bit more explanation to the statement <code>if not next_page or url_parse(next_page).netloc != ''</code>. Consider the possibilities of the redirection after a successful login:</p> <ol> <li>The URL doesn't contain a <code>next</code> argument, in that case we redirect the user to the index page.</li> <li>The URL include a <code>next</code> argument, this argument is a relative path (a URL without a domain part), the user is redirect to that URL.</li> <li>The URL include a <code>next</code> argument, however in this case the value is a full URL, the URL includes a domain name, in this case the use is redirected to the index page.</li> </ol> <p>The first two option are simple and predictable, but the third one is more a security measure, this is to prevent an attack where the next value will include a full URL to a malicious website. so the application only redirects when the URL is relative. To determine if the URL is relative or absolute, we use <code>url_parse()</code> from Werkzeug package and check if the <code>netloc</code> component is set or not.</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#showing-the-logged-in-user-in-templates","title":"Showing The Logged In User in Templates","text":"<p>Now we modify the template to display the user name, this information will be extracted from the <code>current_user</code></p> <p>application/template/index.html <pre><code>{{% extends 'base.html' %}}\n\n{% block content %}\n    &lt;h1&gt;Hi, {{ current_user.username }}&lt;/h1&gt;\n    {% for post in posts %}\n    &lt;div&gt;&lt;p&gt;{{ post.author.username }} says: &lt;b&gt; {{ post.body }} &lt;/b&gt;&lt;/p&gt;&lt;/div&gt;\n    {% endfor %}\n\n{% endblock %}\n</code></pre></p> <p>Now we can modify the view function</p> <pre><code>@app.route('/')\n@app.route('/index')\n@login_required\n\ndef index():\n    #...\n    return render_template('index', title='Home Page', posts=posts)\n</code></pre> <p>we can use the <code>flask shell</code> to create a user and log in. <pre><code>u = User(username='susan', email='susan@example.com')\nu.set_password('cat')\ndb.session.add(u)\ndb.session.commit()\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#user-registration","title":"User Registration","text":"<p>Now the last step is the creation of the registration form, for that we will start by the creation of a new class on the forms.py, this class will represent the registration form</p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#registration-form","title":"Registration form","text":"<p>application/forms.py <pre><code>from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo\nfrom application.models import User\n\n#...\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    email = String('Email', validator=[DataRequired(), Email()])\n    password = passwordField('Password', validator=[DataRequired()])\n    password_repeat = PasswordField('Repeat Password', validator=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Register')\n\n\n    def validate_username(self, username):\n        user = User.query.filter_by(username=username.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different user')\n\n\n    def validate_email(seld, email):\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email')\n</code></pre></p> <p>Before running <code>Email()</code>, or added to the script, we will need to install a email-validator, this is a external dependency required by WTForms, we do this with:</p> <pre><code>pip install email-validator\n</code></pre> <p>From the previous code we have:</p> <ol> <li>there are two fields for the password, the idea is to use the second field as a verification, or a \"repeat password\".</li> <li>the second field has an extra validator, this time <code>EqualTo()</code> and the argument of this method will be the name of the the first field.</li> <li>there are two new methods called <code>validate_username</code> and <code>validate_password</code>, this are following a WTForm pattern, WTForm will take any method that follow pattern <code>validate_&lt;field_name&gt;</code> as a custom validator, in this case these two validator will make sure that user and password are not in the database.</li> <li>the custom validators are going to use <code>ValidationError</code> to handle the errors, in this case the error will be if the user input a email or an user that is already in the database.</li> </ol>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#template-for-the-registration-form","title":"Template for the registration form","text":"<p>The last step will be create a template to display the registration form</p> <p>application/templates/register.html <pre><code>{% extends 'base.html' %}\n\n{% Block content %}\n    &lt;h1&gt;Registration form&lt;/h1&gt;\n    &lt;form action=\"\" method=\"post\"&gt;\n        {{ form.hidden_tag() }}\n        &lt;p&gt;\n            {{form.username.label}}\n            &lt;br&gt;\n            {{form.username(size=32) }}\n            {% for errors in in form.username.errors %}\n                &lt;span style=\"color: red;\"&gt; [{{error}}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            {{form.email.label}}\n            &lt;br&gt;\n            {{form.email(size=64) }}\n            {% for errors in in form.email.errors %}\n                &lt;span style=\"color: red;\"&gt; [{{error}}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            {{form.password.label}}\n            &lt;br&gt;\n            {{form.password(size=32) }}\n            {% for errors in in form.password.errors %}\n                &lt;span style=\"color: red;\"&gt; [{{error}}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            {{form.password_repeat.label}}\n            &lt;br&gt;\n            {{form.password_repeat(size=32) }}\n            {% for errors in in form.password_repeat.errors %}\n                &lt;span style=\"color: red;\"&gt; [{{error}}]&lt;/span&gt;\n            {% endfor %}\n        &lt;/p&gt;\n\n        &lt;p&gt; {{ form.submit() }} &lt;/p&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n</code></pre></p> <p>now the login form must have a link that can take new users to the registration form. wee will add</p> <p>application/templates/login.html <pre><code>&lt;p&gt;new user? &lt;a href=\"{{url_for('register')}}\"&gt; Click here to register&lt;/a&gt;&lt;/p&gt;\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/Extensions/login_flask_login.html#view-function-for-the-registration","title":"View function for the registration","text":"<p>As last step we need to create the view function to connect the registration form to the system, in this case this view function will be in the <code>routes.py</code> file</p> <p>application/routes.py <pre><code>from application import db\nfrom application.forms import RegistrationForm\n\n# ...\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n\n    form =  RegistrationForm\n\n    if form.validate_on_submit():\n        user = User(username=form.username.data, email=form.email.data)\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash(\"User register successfully\")\n        return redirect(url_for('login'))\n    return render_template('register.html', title='Registration', form=form)\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html","title":"Application Factory & Run","text":""},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html#application-factory","title":"Application Factory","text":"<p>As shown on the <code>hello world!</code> code snippet, a typical Flask application is an instance of the Flask class, any configuration, URL or change will be done with the class ( or register with the class), this instance is global.</p> <p>In this example, they took another approach, which might be a best practice, and a future proves implementation. They will create an instance inside a function. This function is called Application factory, all configuration registration or set up will be done inside this function, and then the application will be returned, in other words, the return of this <code>application factory</code> will be the application itself.</p> <p>We will create a script called <code>__init__.py</code> that will serve as the container of the application Factory and it tells Python to tread the current directory as a package ( in this case the directory is flaskr)</p> <p>flaskr/init.py <pre><code>import os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    \"\"\" Creates and configure the application, it is the application factory \"\"\"\n\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n        )\n\n    if test_config is None:\n        \"\"\" load the instance config, if it exist, when not testing\"\"\"\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        \"\"\" load the testing config if passed in\"\"\"\n        app.config.from_mapping(test_config)\n\n    # Ensure the instance folder exist\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that say hello\n    @app.route('/hello')\n    def hello():\n        return ' Hello, world!'\n\n    return app\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html#create_app-the-application-factory","title":"<code>create_app()</code> the application factory","text":"<ol> <li><code>app = Flask(__name__, instance_relative_config=True)</code> Create a Flask instance:<ul> <li><code>__name__</code> is the name of the current python module, it is a convince way to tell the app where it is located.</li> <li><code>instance_relative_config</code>  a way to let the app knows the location of some configuration, this configuration are particular of this instance and are not committed to the version control, this configuration are store on Instance folder this folder is located outside the directory <code>flaskr</code></li> </ul> </li> <li><code>app_config.from_mapping()</code> set some default configuration that the app will use:<ul> <li><code>SECRET_KEY</code> it is use by Flask to keep the application safe, in a development stage the value is 'dev' but in production must be replace for a random string.</li> <li><code>DATABASE</code> it is the path to the instance folder where the SQLite database is store.</li> </ul> </li> <li><code>app.config.from_pyfile()</code> It overwrite the configuration or default configuration, the values are taken from a file called <code>config.py</code> file in the instance folder if it exist. the production <code>SECRET_KEY</code> can be store here.<ul> <li><code>test_config</code> can be also past to this factory, and it will be use instead of the instance configuration.</li> </ul> </li> <li><code>os.makedirs()</code> It ensure the <code>app.instance_path</code> exist, Flask doesn\u2019t create the instance folder automatically, but it needs to be created because your project will create the SQLite database file there.</li> <li><code>@app.route()</code> Create the route the the function that will give back the webpage</li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html#run-the-application","title":"Run the application","text":"<p>We are going to lunch the app in development mode, in this way the browser will be refresh and server restarted after any change in the code. You should be in the top-level not inside the folder flaskr</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html#for-linux-and-mac","title":"For linux and Mac:","text":"<pre><code>export FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask run\n</code></pre>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_application_factory.html#for-windows","title":"For Windows:","text":"<pre><code>set FLASK_APP=flaskr\nset FLASK_ENV=development\nflask run\n</code></pre> <p>Run this in the terminal or CMD and we will get a message like </p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html","title":"Blueprints (part 01-Auth)","text":""},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#blueprints-and-views","title":"Blueprints and Views","text":"<p>With the Blueprints<sup>1</sup>, we can organize a group of related views and other part of the code, this views and code are not register to the Application, instead the are register to the Blueprint, then the blueprint is registered with the application when it is available in the factory function.</p> <p>In this example I will use the same two blue prints use in the documentation example, one for the authentication functions and other for the blog posts itself. These blueprints are going to be in two separate modules.</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#creating-a-blueprint","title":"Creating a Blueprint","text":"<p>Authentication go first:</p> <p>flaskr/auth.py <pre><code>import functools\n\nfrom flask import (\n    Blueprint, flask, g, render_template, request, sessions, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n</code></pre></p> <ol> <li>We create a blueprint called <code>auth</code>.</li> <li>we provide a location for the blueprint <code>__name__</code>.</li> <li><code>url_prefix</code> will be prepended to all the URL associated with the blueprint.</li> </ol> <p>Now we need to import and register from the factory</p> <p>flaskr/init.py <pre><code>def create_app():\n    app = ...\n    # existing code\n\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n</code></pre></p> <ol> <li><code>app.register_blueprint()</code> use to register the blueprint with the application</li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#views-auth-module","title":"Views (auth module)","text":"<p>Now we need to do the views, these views will have to parts, the templates ( the jinja2 templates) and the functions binded to them.</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#register-view","title":"Register View","text":"<p>This view will take care of the registration of a new user, so any user visiting <code>/auth/register</code> URL will receive a HTML as a response, this response will be deliver by the <code>register</code> view.</p> <p>flaskr/auth.py <pre><code>@bp.route('/register', methods=('GET','POST'))\ndef register():\n    \"\"\" this is the register view\"\"\"\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'password is required.'\n        elif db.execute(\n                'SELECT id FROM user WHERE user = ?',(username,)\n            ).fetchone() is not None:\n                error = 'User {} is already register.'.format(username)\n\n        if error is None:\n            db.execute(\n                'INSERT INTO user (user, password) VALUES (?, ?)',\n                (username, generate_password_hash(password))\n            )\n            db.commit()\n            return redirect(url_for('auth.login'))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n</code></pre> Now a description of the code:</p> <ol> <li> <p><code>@bp.route</code> this is a decorator that associate the URL <code>/register</code> with the register view function, so if flash receives a request to <code>/auth/register</code>, it will call <code>register</code> and return a value as response.</p> </li> <li> <p>We check if the request was made by <code>POST</code>, if yes, we validate the input.</p> </li> <li> <p><code>request.form</code> it is a special <code>dict</code> it will store the key and values of the information submitted on a html form, in this case username and password. Validate if the username and password are not empty.</p> </li> <li> <p>Validate <code>username</code> doesnt exist already on the database, <code>fetchone()</code> give back the first row in the result, if thre are not result it return <code>None</code>.</p> </li> <li> <p>Password shouldnt be store in plain text on the database, instead we use <code>generate_password_hash()</code> to hash the password and store the hash, after this modification we commit to the database <code>db.commit()</code></p> </li> <li> <p>After commit to the database the user is redirect to the login page.</p> </li> <li> <p>If there is any error <code>flash()</code> stores messages that can be retrieved when rendering the template.</p> </li> <li> <p>When the user initially navigates to <code>auth/register</code>, or there was a validation error, an HTML page with the registration form should be shown. <code>render_template()</code> will render a template containing the HTML.</p> </li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#login-view","title":"Login View","text":"<p>Following similar pattern of <code>register</code> view here the login view:</p> <p>flaskr/auth.py <pre><code>@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        user = db.execute(\n                'SELECT * FROM user WHERE username = ?' (username,)\n            ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n\n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n\n        flash(error)\n\n    return render_template('auth/login.html')\n</code></pre></p> <ol> <li>The user is queried first and later store in a variable for later use.</li> <li><code>check_password_hash()</code> hashes the submitted password in the same way as the stored hash and securely compares them. If they match, the password is valid.</li> <li><code>session</code> is a dictionary that stores data across requests. When validation succeeds, the user\u2019s <code>id</code> is stored in a new session. The data is stored in a cookie that is sent to the browser, and the browser then sends it back with subsequent requests. Flask securely signs the data so that it can\u2019t be tampered with.</li> </ol> <p>flaaskr/auth.py <pre><code>@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get.db().execute(\n                'SELECT * FROM user WHERE id = ?', (user_id,)\n                ).fetchone()\n</code></pre></p> <ol> <li><code>bp.before_app_request()</code> no matter what URL was requested, the decorator will make the function <code>load_logged_in_user</code> run before the view function. This function will check if the session contain the user id, it will later store it on <code>g.user</code>, which will last for the length of the request.</li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#logout","title":"Logout","text":"<p>First we need to remove the user id from <code>session</code> so <code>load_logged_in_user</code> wont load the user for the subsequent request.</p> <p>flaskr/auth.py <pre><code>@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#required-authentication-in-other-views","title":"Required Authentication in Other Views","text":"<p>In this case we will create a decorator that will be use in other parts of the application or other blueprints, for example to create, edit or delete blog post.</p> <p>flaskr/auth.py</p> <pre><code>def login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n    return wrapped_view\n</code></pre> <p>This decorator will wrap the view that is apply to, and it will check if <code>g.user</code> exist, if not, it will redirect to the authentication view, otherwise it will continue with the original view.</p> <p>Now the flaskr/auth.py file will be:</p> <p></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part1.html#endpoint-and-urls","title":"Endpoint and URLs","text":"<p>We use the function <code>url_for()</code>, this function generate a URL based on a name and arguments. The name is also called endpoint and by default is the same name of the view function.</p> <p>For example, for the first view, the <code>hello world</code> the name will be <code>hello</code> because the view is <code>hello()</code>, in the case of blueprints the blue print is prepended to the name of the function&gt; For the <code>login</code> view that is part of the blueprint <code>auth</code> we will write <code>auth.login</code> and the <code>url_for()</code> will be <code>url_for(auth.login)</code></p> <ol> <li> <p>A blueprint is an object that allows defining application functions without requiring an application object ahead of time. It uses the same decorators as Flask, but defers the need for an application by recording them for later registration\u00a0\u21a9</p> </li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html","title":"Blueprints (part 02-Blog)","text":"<p>In this part of the notes we will focus in the blueprint that will handle the Blog part of the application.</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#the-blueprint","title":"The Blueprint","text":"<p>First we need to create the blue print flaskr/blog.py and later register it to the application factory.</p> <p>flaskr/blog.py <pre><code>from flask import (Blueprint, flash, g, redirect, render_template, request, url_for)\nfrom werkzeug.exceptions import abort\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n</code></pre> now using <code>app.register_blueprint()</code> on flaskr/init.py to import and register the new blueprint</p> <pre><code>def create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n</code></pre> <p>Couple difference with the <code>auth</code> blueprint, the <code>blog</code> blueprint doesn't have the <code>url_prefix</code> so in this case the index will be add <code>/</code> and create at <code>/create</code>.</p> <p>now we use the <code>add_url_rule</code> to define the endpoint for the index, so the URL create with <code>url_for('index')</code> or <code>url_for('blog.index')</code> will both work and they will generate <code>/</code> URL.</p> <p>it sound or read complicated, but basically with the <code>add_url_rule</code> I'm making sure that i will generate the correct URL every-time i decided to call the endpoint index, either using <code>url_for('index')</code> or <code>url_for('blog.index')</code></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#index","title":"Index","text":"<p>The index will be the view were we can see all the post, therefore we will use a SQL <code>JOIN</code> with the user table to get back all the information from the database.</p> <p>flaskr/blog.py <pre><code>@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n</code></pre> now the template will be as follow:</p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Posts{% endblock %}&lt;/h1&gt;\n  {% if g.user %}\n    &lt;a class=\"action\" href=\"{{ url_for('blog.create') }}\"&gt;New&lt;/a&gt;\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    &lt;article class=\"post\"&gt;\n      &lt;header&gt;\n        &lt;div&gt;\n          &lt;h1&gt;{{ post['title'] }}&lt;/h1&gt;\n          &lt;div class=\"about\"&gt;by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}&lt;/div&gt;\n        &lt;/div&gt;\n        {% if g.user['id'] == post['author_id'] %}\n          &lt;a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\"&gt;Edit&lt;/a&gt;\n        {% endif %}\n      &lt;/header&gt;\n      &lt;p class=\"body\"&gt;{{ post['body'] }}&lt;/p&gt;\n    &lt;/article&gt;\n    {% if not loop.last %}\n      &lt;hr&gt;\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n</code></pre> <p>There some point to be aware off in this template:</p> <ol> <li>if the user is loggin in we display <code>create</code> as title.</li> <li>if the user if the user is the author of the post they will say \"Edit\"</li> <li>we use a special Jinja loop <code>loop.last</code> so if the post is the last one it wont have the line that separate each post visually.</li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#create","title":"Create","text":"<p>The <code>create</code> view and the <code>register</code> view work quite similarly, either the form is displayed, or it is validated for later post it.</p> <p>Something to remark is the usage of the decorator <code>login_required</code> wrote before, this tells the flask that the user must be logged in to be able to see this post, otherwise must be redirected to the login page.</p> <p>** flaskr/blog.py** <pre><code>@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n</code></pre></p> <p>** flaskr/templates/blog/create.html **</p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}New Post{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n    &lt;input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required&gt;\n    &lt;label for=\"body\"&gt;Body&lt;/label&gt;\n    &lt;textarea name=\"body\" id=\"body\"&gt;{{ request.form['body'] }}&lt;/textarea&gt;\n    &lt;input type=\"submit\" value=\"Save\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#update","title":"Update","text":"<p>The Update and delete views have some similarities, therefore we can make something different. Both <code>update</code> and <code>delete</code> fetch the <code>post</code>  by <code>id</code>, so we can create the function to fetch the post and later reuse it in each view</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#fetch-post-by-id","title":"Fetch post by id","text":"<p>** Flaskr/blog.py** <pre><code>def get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, \"Post id {0} doesn't exist.\".format(id))\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n</code></pre></p> <p>The <code>abort()</code> function will raise and exception that returns a HTTP status code, it take the code and additional message, if the message is not provided it will display some default message example:</p> <ul> <li>404 \"Not Found\".</li> <li>403 \"Forbidden\".</li> <li>401 \"Unauthorized\".</li> </ul> <p>Additionally the <code>check_author</code> argument is create it so we can look for the post without the check the author, this can be use in a view where a single post will be display but the author doesn't matter, since the user wont make a modification of that post.</p> <p>Flaskr/blog.py <pre><code>@bp.route('/&lt;int:id&gt;/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n</code></pre> something to pay attention is the usage of the <code>id</code> argument in the raout, in this case we are using <code>&lt;init: id&gt;</code> in the route, which will translate to <code>/1/update</code>. To generate this URL we will need to use the id as well, so the <code>url_for()</code> will look like <code>url_for('blog.update', id=post['id'])</code></p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n    &lt;input name=\"title\" id=\"title\"\n      value=\"{{ request.form['title'] or post['title'] }}\" required&gt;\n    &lt;label for=\"body\"&gt;Body&lt;/label&gt;\n    &lt;textarea name=\"body\" id=\"body\"&gt;{{ request.form['body'] or post['body'] }}&lt;/textarea&gt;\n    &lt;input type=\"submit\" value=\"Save\"&gt;\n  &lt;/form&gt;\n  &lt;hr&gt;\n  &lt;form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\"&gt;\n    &lt;input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre> <p>The previous template will have 2 forms, the first with the first post to be edited (<code>/&lt;id&gt;/update</code>). The other form contain just only the button and species and action attribute that the post to the delete view instead.</p> <p>The <code>{{ request.form['title'] or post['title']}}</code> is used to choose what data appears in the form.</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_blueprints_part2.html#delete","title":"Delete","text":"<p>The <code>delete</code> view doesnt have its own template it will reuse the one use in <code>update</code>, now similar to the previous view, we need to pay attention to the route <code>/&lt;id&gt;/delete</code>.</p> <pre><code>@bp.route('/&lt;int:id&gt;/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n</code></pre>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html","title":"Application Database","text":""},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html#regarding-the-database-and-the-connection","title":"Regarding the Database and the connection.","text":"<p>For this example the Flask tutorial use the SQLite, since it is already integrated with python. As it is mentioned in the tutorial, the first thing we need to do when working with databases is to establish a connection, any operation or query to the DB is done through this connections, this connections must be close once the operation is finished.</p> <p>flaskr/db.py <pre><code>import sqlite3\n\nimport click\nfrom flask import current_app, g\nfrom flask.cli import with_appcontext\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n        return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n</code></pre></p> <p>There are couple objects that still i don't fully understand but that make the development easier, or with better practice ( according with documentation), this are <code>g</code> and <code>current_app</code>, here some description ( and links) of this code snippet</p> <ol> <li> <p><code>g</code><sup>1</sup>: it is an special object that is unique for each request, use to store data that might be user accessed by multiple function during the request. In this case the connection is stored and reused instead of creating a new one, if the get_db is use a second time at in the same request.</p> </li> <li> <p><code>current_app</code><sup>2</sup>:  Another special object, it points to the Flask application handling request, if we develop like this example we will be using the application factory, thus, we wont have an application object we writing the rest of the code, \"the <code>get_db()</code> will be call when the application is create and is handling a request, so current_app can be used.\"</p> </li> <li> <p><code>sqlite3.connect()</code> establish a connection to the file pointed at by the <code>DATABASE</code> configuration key. at the beginning the file wont exist we need to initialize the database (I will explain it bellow)</p> </li> <li> <p><code>sqlite.Row</code> tells the connection to return rows that behave like <code>dicts</code>. This allows accessing the columns by name.</p> </li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html#creating-the-tables","title":"Creating the tables","text":"<p>In this case the initial table will be store in a file <code>.sql</code></p> <p>flaskr/schema.sql <pre><code>DROP TABLE IF EXIST user;\nDROP TABLE IF EXIST post;\n\nCREATE TABLE user (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL\n    password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    author_id INTEGER NOT NULL,\n    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    title TEXT NOT NULL,\n    body TEXT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES user (id)\n);\n</code></pre> Now, The next step is create the logic to initialize the database, this will be in different parts and two different files:</p> <ol> <li>Create the functions to run the SQL statements, this will be done on flask/db.py</li> <li>Register with the application, we need to let the application know that there is a database, create the initializer ( will include some CLI commands) flaskr/db.py, and later the logic to import it to the application factory flaskr/init.py.</li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html#function-to-run-the-sql-commands","title":"Function to run the SQL commands","text":"<p>code to add: flaskr/db.py <pre><code>def init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\n@with_appcontext\ndef init_db_command():\n    \"\"\" clear the existing data and create new tables \"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n</code></pre></p> <p>so the code until on flaskr/db.py will be: </p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html#register-the-application","title":"Register the application","text":"<p>Now the functions <code>close_db</code> and <code>init_db_command</code> are defined but they are not register to be use by the application, in other words, in order to use the functions we need to register them with the instance of the application, although, in this case we are using application factory, so, technically the applications doesn't exist yet, or the instance is not available, so in this case we will need a function that make the registration for us and later we will import that function on the factory.</p> <p>We create a function on flaskr/db.py later import that function on flask/init.py in the factory function <code>create_app()</code></p> <p>flaskr/db.py <pre><code>def init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n</code></pre> 1. <code>app.teardown_appcontext()</code> this function is executed after returning the response, during the clean up process, and basically allow me to run a function in that moment, in that case <code>close_db()</code> 2. <code>app.cli.add_command()</code> add a new command that can be call with the flask command.</p> <p>so the flaskr/db.py will be </p> <p>Now we need to call the function <code>init_app()</code> from the factory</p> <p>flaskr/init.py <pre><code>def create_app():\n    app = ...\n    #existing code\n\n    from . import db\n    db.init_app(app)\n\n    return app\n</code></pre> so the Factory function will look like this:</p> <p></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_database.html#initialize-the-database","title":"Initialize the database","text":"<p>We create the Flask commands, we register those commands and import it to the factory, so now we can initialize the database using <code>flask</code></p> <p>on the Command (CMD) or terminal <pre><code>flask init-db\n# --&gt; Initialized the database\n</code></pre></p> <p>There now on the instance folder we will have a file flask.sqlite</p> <ol> <li> <p><code>g</code> is a namespace object that can store data during an application context, this is a proxy \u21a9</p> </li> <li> <p><code>current_app</code> A proxy to the application handling the current request. This is useful to access the application without needing to import it, or if it can\u2019t be imported, such as when using the application factory pattern or in blueprints and extensions.\u00a0\u21a9</p> </li> </ol>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_structure.html","title":"Application Layout (Structure)","text":"<p>In this notes I will use the example on the official documentation to learn how to use it, in other notes in this same directory i might use other sources, but in this case i will use the official documentation</p> <p>Lets first get something out of the ways, the 99% of the examples and tutorials on the web use the basic hello world example of Flask and don't enter in details or good practice, that is the main reason to start with the Official documentation first in this learning path, here is the typical hello world on Flask</p> <p></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_structure.html#application-layout","title":"Application Layout","text":"<p>This layout might change depending of the size or the length of the application although i think this will suite most of the application I'm thinking to use Flask for. Here I follow exactly the documentation</p> <p></p> <p>The tutorial assume that all the content will be in a folder called \"Flask-tutorial\" and a virtual environment was created</p> <p>the documentation suggest some to add an specific <code>.gitignore</code> that i thing came useful since will help me to avoid commit any unnecessary document or folder to git or any version control system</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_structure.html#gitignore-example","title":"<code>gitignore</code> Example","text":"<pre><code>venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n</code></pre>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_templates.html","title":"Templates","text":"<p>Flask use Jinja template labray to render the templates.</p> <p>Jinja is base in Django and Python syntax, although, the blocks are represented by special delimiters whihc will distinguish the jijnaja suyntax from the static data in the template.</p> <p>Anything between <code>{{</code> and <code>}}</code> is and expresuion and it will be output to the final document, example, the value of a variable <code>{{ g.user['username'] }}</code>. Now the control flow statemente like <code>if</code> and <code>for</code> will use <code>{%</code> and <code>%}</code> but here is de difference with python. Python use indentation to denotate the blocks, jinja will use a special tag, like: <pre><code>{% if condition %}\n    here the logic\n{% endif %}\n</code></pre></p> <p>Here some delimiters</p> <ul> <li><code>{% ... %}</code> for Statements.</li> <li><code>{{ ... }}</code> for Expressions to print to the template output.</li> <li><code>{# ... #}</code> for Comments not included in the template output.</li> <li><code>#  ... ##</code> for Line Statements.</li> </ul>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_templates.html#the-base-layout","title":"The Base Layout","text":"<p>As a template we can create a basic template that will work as base to all the other templates, in this case all the layout will fallow a similar pattern but with different body, so we can create a base layout and the other will extend of this base template and override the specific sesctions.</p> <p>flaskr/template/base.html <pre><code>&lt;!doctype html&gt;\n&lt;title&gt;{% block title %}{% endblock %} - Flaskr &lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css')}}\"&gt;\n&lt;nav&gt;\n    &lt;h1&gt;Flaskr&lt;/h1&gt;\n    &lt;ul&gt;\n        {% if g.user %}\n            &lt;li&gt;&lt;span&gt;{{ g.user['username'] }}&lt;/span&gt;\n            &lt;li&gt;&lt;a href=\"{{ url_for('auth.logout') }}\"&gt; Log Out&lt;/a&gt;\n        {% else %}\n            &lt;li&gt;&lt;a href=\"{{ url_for('auth.register') }}\"&gt;Register&lt;/a&gt;\n            &lt;li&gt;&lt;a href=\"{{ url_for('auth.login') }}\"&gt;Log In&lt;/a&gt;\n        {% endif %}\n    &lt;/ul&gt;\n&lt;/nav&gt;\n\n&lt;section class=\"content\"&gt;\n    &lt;header&gt;\n        {% block header %}{% endblock %}\n    &lt;/header&gt;\n    {% for message in get_flashed_messages() %}\n        &lt;div class=\"flash\"&gt;{{ message }}&lt;/div&gt;\n    {% endfor %}\n    {% block content %}{% endblock %}\n&lt;/section&gt;\n</code></pre></p> <p><code>g</code> is available in templates, thanks to <code>g.user</code> from <code>load_logged_in_user</code>, if the value of <code>g.user</code> is <code>TRUE</code>, the user name and the logout option are display, otherwise the registration and log in links are display.</p> <p>just before the content and after the page title we will display the error message, if any. we create a loop with the message returned by <code>get_flashed_message()</code>, this is the code to display it, and work together with the code in the view <code>flash()</code>, <code>flash()</code> show the error message and code in the above example display it.</p> <p>In the previous code we defined 3 blocks, those blocks are going to be overwrite for each specific template ( it will make more sense after the following items):</p> <ol> <li><code>{% block title %}</code> this block will be use to change the title in the browser tab</li> <li><code>{% block header %}</code> this will change the title display on the page</li> <li><code>{% block content %}</code> Here is where all the content of each specific page goes.</li> </ol> <p>to keep everything organize, it is a good practice to keep the templates in a folder with the same name of the blue print.</p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_templates.html#register-template","title":"Register Template","text":"<p>Here is were we start to get an idea of what the template system can do, in this case we will create a page that <code>extends</code> from he basic template so we don't need to worry about the common elements line the navigation bar, we just code the specific logic and experience of this page, in this case registration.</p> <p>flaskr/templetes/auth/register.html <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n    &lt;h1&gt;{% block title %} Register {% endblock %} &lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input name=\"username\" id=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" name=\"password\" id=\"password\" required&gt;\n    &lt;input type=\"submit\" value=\"Register\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre></p> <p>The point to remark here:</p> <ul> <li><code>{% extends 'base.html' %}</code> here we tell jinja that this is a template that should replace the blocks in the base templates, in this case <code>base.html</code></li> <li><code>{% block header %}</code>,<code>{% block content %}</code> and <code>{% endblock %}</code>  the first to just contain the content that must be replace in the template, the last one <code>{% endblock %}</code>  is just to indicate the end of the block.</li> </ul>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_templates.html#log-in","title":"Log In","text":"<p>Similar to the previous template with the difference in the summit button</p> <p>flaskr/templetes/auth/login.html <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Log In{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input name=\"username\" id=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" name=\"password\" id=\"password\" required&gt;\n    &lt;input type=\"submit\" value=\"Log In\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre></p>"},{"location":"Python/Frameworks/Flask/from_Official_documentation/flask_templates.html#static-files","title":"Static files","text":"<p>This will be the CSS, Javascript files and logos for the application, on the base template we can see that we use <code>{{ url_for('static', filename='style.css')}}</code> this will search in the relative path to the <code>flaskr/static</code> directory.</p>"},{"location":"Python/Frameworks/Scrapy/Running_multiple_spider.html","title":"Running_multiple_spider","text":"<p>There is not much explanation that i can do now but the following script can be use to runt different spader one after the other.</p> <p>From the example:</p> <pre><code>from twisted.internet import reactor, defer\nfrom scrapy.crawler import CrawlerRunner\nfrom scrapy.utils.log import configure_logging\n\nclass MySpider1(scrapy.Spider):\n    # Your first spider definition\n    ...\n\nclass MySpider2(scrapy.Spider):\n    # Your second spider definition\n    ...\n\nconfigure_logging()\nrunner = CrawlerRunner()\n\n@defer.inlineCallbacks\ndef crawl():\n    yield runner.crawl(MySpider1)\n    yield runner.crawl(MySpider2)\n    reactor.stop()\n\ncrawl()\nreactor.run() # the script will block here until the last crawl call is finished\n</code></pre> <p>Now, i don't need and i shouldn't put the spiders in the same script so i made the modifications</p> <pre><code>from twisted.internet import reactor, defer\nfrom scrapy.crawler import CrawlerRunner\nfrom scrapy.utils.log import configure_logging\n\nclass MySpider1(scrapy.Spider):\n    # Your first spider definition\n    ...\n\nclass MySpider2(scrapy.Spider):\n    # Your second spider definition\n    ...\n\nconfigure_logging()\nrunner = CrawlerRunner()\n\n@defer.inlineCallbacks\ndef crawl():\n    yield runner.crawl(MySpider1)\n    yield runner.crawl(MySpider2)\n    reactor.stop()\n\ncrawl()\nreactor.run() # the script will block here until the last crawl call is finished\n</code></pre>"},{"location":"Python/Frameworks/Scrapy/introduction.html","title":"Introduction","text":"<p>An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.</p> <ol> <li>Official page</li> <li>Pypi page</li> <li>Documentation</li> </ol>"},{"location":"Python/Frameworks/Scrapy/introduction.html#install","title":"Install","text":"<p>We can install it using pi <pre><code>pip install Scrapy\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#project-structure","title":"Project structure","text":"<p>From here there are 3 important items</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#spiders","title":"Spiders","text":"<p>In this folder we will create the specific class that represent the spiders.</p> <p></p> <ol> <li><code>name</code> this is the specific name of the spider.</li> <li><code>start_urls</code> this is the list of starting URLs to be crawl.</li> <li><code>parse()</code> this is the main function that will get the items from the response object that contain the webpages.</li> <li>The next part is to handle the pagination of some pages. First create <code>next_page</code> is a variable storing the selector for the button for the next page. the second part is a conditional that will check if there is a next page. the third, Use the function <code>follow()</code> this will received the selector <code>next_page</code> and a callback function, in this case <code>parse()</code>.</li> </ol>"},{"location":"Python/Frameworks/Scrapy/introduction.html#items","title":"items","text":"<p>This script will hold the <code>items</code> and the <code>itemloaders</code>. The items will hold the information that we scrap, after the <code>Itemloaders</code> clean them. there will be some changes in the spiders and in the <code>items.py</code> files. Bellow some examples</p> <p>project/spider/whiskyspider.py </p> <ol> <li>Imports: We need to import, First, the item class for the specific spider <code>from whiskyscraper.items import WhiskyscraperItem</code>. Second, we import the scrapy item loader <code>from scrapy.loader import ItemLoader</code>.</li> <li>parse(): We need to create an instance of the <code>ItemLoader</code> this will received two parameters, first the item class, in this case <code>WhiskyscraperItem()</code> and a selector. <code>l =  ItemLoader(item = WhiskyscraperItem(), selector=products)</code> where products <code>for products in response.css('div.product-item-info'):</code>.</li> <li>Finally we <code>yield</code> the <code>l.load_item()</code> (Basically load the clean information on the item).</li> </ol> <p>project/items.py </p> <ol> <li><code>from scrapy.loader import ItemLoader</code>: we will import the IteamLoader, this will allow use to access processors and functions to clean the data.</li> <li><code>from itemloaders.processors import TakeFirst, MapCompose</code>: This are two functions that we will use in the <code>input_processor</code> and <code>out_processor</code>. <code>MapCompose()</code> allow me to run several functions on the incoming data.</li> <li><code>from w3lib.html import remove_tags</code>: with <code>remove_tags()</code> will help use to remove the html tags from the information.</li> <li><code>remove_currency()</code>: this is an example of a custom function that we will use to clean the information and later will be use in <code>MapCompose()</code>.</li> <li><code>Field()</code>: Here we will use the <code>input_processor</code> and <code>output_processor</code> to clean the information.</li> </ol>"},{"location":"Python/Frameworks/Scrapy/introduction.html#commands","title":"Commands","text":"<p>Create the project <pre><code>scrapy startproject [name of the project]\n</code></pre></p> <p>Create the spider <pre><code>scrapy genspider [name of spider] [starting urls]\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#data-flow","title":"Data flow","text":"<p>This information was extracted fro  the official website and all the rights belong to then. I copy part of the information since it is relevant to understand how scrapy handle the data flow.</p> <p></p> <ol> <li>The Engine gets the initial Requests to crawl from the Spider.</li> <li>The Engine schedules the Requests in the Scheduler and asks for the next Requests to crawl.</li> <li>The Scheduler returns the next Requests to the Engine.</li> <li>The Engine sends the Requests to the Downloader, passing through the Downloader Middlewares (<code>process_request()</code>).</li> <li>Once the page finishes downloading the Downloader generates a Response (with that page) and sends it to the Engine, passing through the Downloader Middlewares (<code>process_response()</code>).</li> <li>The Engine receives the Response from the Downloader and sends it to the Spider for processing, passing through the Spider Middleware (<code>process_spider_input()</code>).</li> <li>The Spider processes the Response and returns scraped items and new Requests (to follow) to the Engine, passing through the Spider Middleware (<code>process_spider_output()</code>).</li> <li>The Engine sends processed items to Item Pipelines, then send processed Requests to the Scheduler and asks for possible next Requests to crawl.</li> <li>The process repeats (from step 1) until there are no more requests from the Scheduler.</li> </ol>"},{"location":"Python/Frameworks/Scrapy/introduction.html#components","title":"Components","text":""},{"location":"Python/Frameworks/Scrapy/introduction.html#scrapy-engine","title":"Scrapy Engine","text":"<p>Responsible to control the data flow  between all components.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#scheduler","title":"Scheduler","text":"<p>The scheduler receive the original request from the engine from the engine and enqueue so it can be use later, when the engine want it.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#downloader","title":"Downloader","text":"<p>This component is the responsible to fetch the web pages and feeding them to the engine, who will feed it to the spiders.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#spider","title":"Spider","text":"<p>This are the custom classes use to parse the response and extract the items form it.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#item-pipeline","title":"Item pipeline","text":"<p>This will take care of cleaning the information that the spider extracted.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#downloader-middlewares","title":"Downloader Middlewares","text":"<p>from the original documentation Downloader middlewares are specific hooks that sit between the Engine and the Downloader and process requests when they pass from the Engine to the Downloader, and responses that pass from Downloader to the Engine.</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#spider-middlewares","title":"Spider Middlewares","text":"<p>from the original documentation Spider middlewares are specific hooks that sit between the Engine and the Spiders and are able to process spider input (responses) and output (items and requests).</p>"},{"location":"Python/Frameworks/Scrapy/introduction.html#scrapy-shell","title":"Scrapy Shell","text":"<p>Scrapy provide an interactive Shell that we can use to test or gather information of the website we will scrap.</p> <p>to start: <pre><code>scrapy shell\n</code></pre></p> <p>Here in the shell we can use the  function <code>fetch()</code> passing the URL, this will download the page, and we will be able to interact with it using the <code>response</code> object and then we can use selectors to scrap the information, example <code>response.css('a.product')</code></p>"},{"location":"Python/Frameworks/Scrapy/splash.html","title":"Splash","text":"<p>Splash is a javascript rendering service with an HTTP API. It\u2019s a lightweight browser with an HTTP API, implemented in Python 3 using Twisted and QT5.</p> <ol> <li>Github Splash</li> <li>Github scrapy-splash</li> <li>Document</li> </ol>"},{"location":"Python/Frameworks/Scrapy/splash.html#installation","title":"Installation","text":"<p>First we need to install and luch docker in order to use splash, the exact steps can be found in the documentation here</p> <p>Once the docker is running in the host we can access the server and check if it is working, in this case we can go to \"localhost:8050\"</p> <p></p> <pre><code>pip install scrapy-splash\n</code></pre>"},{"location":"Python/Frameworks/Scrapy/splash.html#configuration","title":"Configuration","text":"<p>We need to make some changes on the project settings settings.py</p>"},{"location":"Python/Frameworks/Scrapy/splash.html#1-adding-the-splash-server-to-the-project","title":"1. Adding the splash server to the project","text":"<p>settings.py <pre><code>SPLASH_URL = 'http://192.168.59.103:8050'\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/splash.html#2-add-and-enable-the-splash-middleware","title":"2. Add and Enable the splash middleware","text":"<p>settings.py <pre><code>DOWNLOADER_MIDDLEWARES = {\n    'scrapy_splash.SplashCookiesMiddleware': 723,\n    'scrapy_splash.SplashMiddleware': 725,\n    'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,\n}\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/splash.html#3-add-and-enable-the-spider-middleware","title":"3. Add and Enable the spider middleware","text":"<p>settings.py <pre><code>SPIDER_MIDDLEWARES = {\n    'scrapy_splash.SplashDeduplicateArgsMiddleware': 100,\n}\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/splash.html#4-set-the-custome-dupefilter_class","title":"4. Set the custome <code>DUPEFILTER_CLASS</code>","text":"<p>settings.py <pre><code>DUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter'\n</code></pre></p>"},{"location":"Python/Frameworks/Scrapy/splash.html#5-set-the-httpcache_storage","title":"5. Set the <code>HTTPCACHE_STORAGE</code>","text":"<p>settings.py <pre><code>HTTPCACHE_STORAGE = 'scrapy_splash.SplashAwareFSCacheStorage'\n</code></pre></p> <p>Steps (4) and (5) are necessary because Scrapy doesn't provide a way to override request fingerprints calculation algorithm globally; this could change in future.</p> <p></p>"},{"location":"Python/Frameworks/Scrapy/splash.html#example","title":"Example","text":"<pre><code>import scrapy\nfrom scrapy_splash import SplashRequest\n\nclass MySpider(scrapy.Spider):\n    start_urls = [\"http://example.com\", \"http://example.com/foo\"]\n\n    def start_requests(self):\n        for url in self.start_urls:\n            yield SplashRequest(url, self.parse, args={'wait': 0.5})\n\n    def parse(self, response):\n        # response.body is a result of render.html call; it\n        # contains HTML processed by a browser.\n        # ...\n</code></pre>"},{"location":"Python/Frameworks/robotframework/introduction.html","title":"Introduction","text":"<p> Robot Framework</p> <p>Robot Framework has an easy syntax, utilizing human-readable keywords. Its capabilities can be extended by libraries implemented with Python, Java, or any other programming language.</p> <ol> <li>Official page</li> <li>Pypi page</li> <li>API Documentation</li> <li>General Documentation</li> <li>Standard libraries</li> </ol> Installation by pip    <code>pip install robotframework</code>"},{"location":"Python/Frameworks/robotframework/introduction.html#what-are-keywords-in-robotframework","title":"What are keywords in RobotFramework?","text":"<p>Robot framework uses the concept of keywords, these are words or sentences that tell the platform to perform specific actions, for example, <code>Open browser</code> is a keyword that tells Robot Framework to open a new browser.</p> <p>Now if we pair this keyword with a value that must be separated from the keyword by at least 2 spaces, we are telling the framework to execute the keyword using the parameter passed</p> <pre><code>Open browser     https://www.google.come\n</code></pre> <p>In this case, we are telling the framework to open a new browser and go to <code>http://www.google.com</code></p>"},{"location":"Python/Frameworks/robotframework/introduction.html#but-how-many-keywords","title":"But how many keywords?","text":"<p>The framework has some built-in keywords that are already available and can be used without any extra steps, however in some cases, we will need some special keywords, this can be made or imported by using libraries, for example, <code>SeleniumLibrary</code> allows the user to interact with the web UI, and provide several keywords that facilitate that interaction.</p> <p>Now for where to find the keywords, The documentation will be the first palace to go, although some IDE will provide some autocompletion in most cases search in the documentation will be more accurate.</p> <p>Robot Framework</p> <p>The main files in the framework are called test cases, and it is divided into sections.</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#section-description","title":"Section Description.","text":"<p>The section names will be surrounded by the <code>***</code></p> <p>The sections are:</p> <ul> <li><code>*** Settings ***</code> This section can contain documentation about the test suite, Libraries use during the test, Resources to be used, and the setup and teardown of the test and test suite.</li> <li><code>*** Variables ***</code> Any variable to be used in the script</li> <li><code>*** Test Cases ***</code> define the documentation for the test and the test steps.</li> <li><code>*** Keywords **</code> this is optional, in most cases this will be in a separate file, and they will be imported into the <code>*** Settings ***</code> section.</li> </ul>  \u261d\ud83c\udffe On Pycharm in the file `.robot` we don't need to input the `***` we just need to put the beginning of the word and the autocomplete function will give us the option to add the section   <p></p>"},{"location":"Python/Frameworks/robotframework/introduction.html#settings","title":"<code>*** Settings ***</code>","text":"<p>The way to add things to this section is by adding the keyword, for example, <code>Library</code> follow by two spaces and finally the value in this case <code>SeleniumLibrary</code></p> <p>Things to add in this section will be:</p> <ul> <li>Libraries</li> <li>Resources</li> </ul> <p>We can see this section as the space to import all the tools need it to work with robot framework, and it is one of the two that only required sections to create a test case.</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#variable","title":"<code>*** Variable ***</code>","text":"<p>Here we can store a variable to be used in the test case, it follows similar syntax, there should be two spaces between the name of the variable and the value.</p> <p></p> <p></p>"},{"location":"Python/Frameworks/robotframework/introduction.html#keywords","title":"<code>*** Keywords ***</code>","text":"<p>Here we can create subroutines or steps that will be called using a specific keyword, it helps to keep the Test cases body smaller. Additionally, I can provide the opportunity to abstract complexity.</p> <ol> <li>Without indentation, we can set the keyword, a keyword can be a word or a sentence.</li> <li>With Indentation, we define the different steps, here we can use any keyword that we will normally use in the TestCase.</li> </ol> <pre><code>Search for keyword\n    Wait Until Element Is Visible  ${SEARCH_INPUT}\n    input text  ${SEARCH_INPUT}  monster hunter: world\n    press keys  ${SEARCH_INPUT}  ENTER\n</code></pre> <p></p> <p>if we have keywords that can be used in several tests or several test suites we can consider creating a resources file and to keep everything organized those reusable keywords will be stored in the keyword section of the resource file</p>  \u261d\ud83c\udffe A resource file is another .robot file, these files are normally stored in a folder called *Resources* and they are used to store keywords that are common in several test cases or suites."},{"location":"Python/Frameworks/robotframework/introduction.html#test-case","title":"<code>*** Test Case ***</code>","text":"<p>Here we provide the details from the test case, this will use keywords to define the steps, these keywords are defined by de firmware, the different libraries, or resources.</p>  \ud83d\udd25 There are built-in libraries, third-party libraries, and customer libraries, the latter meaning that we can build our own libraries to expand the reach of the Robot framework.   <ol> <li>The first line non-indented will be the test name. we can have several tests in a single <code>.robot</code> file if their names are not indented and other subsequent steps are.</li> <li>The next line must be indented and will contain the steps for the test case, here we can use the keyword store in resources or defined on the section <code>** Keywords ***</code> of the same file.</li> </ol> <pre><code>Twitch test with scrolling\n    Define mobile browser\n    Go To                           https://twitch.tv\n    Wait Until Element Is Visible   ${SEARCH_BUTTON}\n    click button                    ${SEARCH_BUTTON}\n    Search for keyword\n    click element                   ${TAB_CHANNELS}\n    Wait Until Element Is Visible   ${LIST_VIDEOS}\n    Scroll Down\n    Capture page Screenshot\n    Try specific channel\n    Close lightweight model message\n    Check for content warning\n    Sleep  5 secs\n    Capture page screenshot\n    [teardown]  close browser\n</code></pre> <p></p>"},{"location":"Python/Frameworks/robotframework/introduction.html#structure-of-the-project","title":"Structure of the project","text":"<p>RobotFramework is flexible with the structure, but there is a suggested structure, below implementation of that suggested structure:</p> <ul> <li>Libraries: Here we store any third-party libraries designed or used in the project.</li> <li>Resources: This directory will contain the resources to be used in the test, this resource can be page objects describing the screen or target of the test, or extra functions that will help in the execution of the test.</li> <li>Result: It will contain the results of the test</li> <li>Tests: This directory is where we will have more flexibility, we can divide the test by the products, but the type of test (performance test, sanity test, functional test, etc.) or we can divide it in a way specific to the team using the test</li> </ul> <p>As an alternative, we can have a directory or folder called TestSuite that will contain the test suites for the projects. Test suites have been a group of these cases that are related in a way, for example, test focus on a specific feature or specific section of the target.</p> <p></p> <p>We can use a structure like <code>&lt;Tests&gt;/&lt;Website&gt;/&lt;type of test&gt;</code> to organize the different types of tests. </p> <p><code>.robot</code></p> <p>The file with the extension <code>.robot</code> is a special file for robot framework this will contain a description of the test, and it follows a specific structure</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#installation","title":"Installation","text":""},{"location":"Python/Frameworks/robotframework/introduction.html#pre-requisites","title":"Pre-requisites","text":"<ol> <li>Python</li> <li>Pip</li> </ol>"},{"location":"Python/Frameworks/robotframework/introduction.html#using-pip","title":"Using PIP","text":"<ol> <li>install Robot framework</li> </ol> <pre><code>pip3 install robotframework\n</code></pre>"},{"location":"Python/Frameworks/robotframework/introduction.html#optional-install-selenium-libraries-for-webui-and-mobile-automation","title":"(Optional) Install  Selenium libraries for WebUI and mobile automation.","text":"<pre><code>pip install robotframework-seleniumlibrary\n</code></pre>"},{"location":"Python/Frameworks/robotframework/introduction.html#optional-install-the-intellibot-plugin","title":"(optional) Install the intellibot plugin","text":"\ud83d\udd25 For this, we need to have Pycharm already installed.   <p>We need to go to the marketplace.</p> <p>One way to go is by clicking in the lower-left corner of the IDE where the version of python is displayed, and selecting interpreter settings</p> <p></p> <p>Then we select the plugins section.</p> <p></p> <p>now we can search for <code>intellibot</code></p> <p></p> <p>After the installation, we need to restart the IDE</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#troubleshooting","title":"Troubleshooting","text":"\ud83d\udd25 I had some issues with the syntax highlighting when I launch the IDE, I got some reports of errors.   <p>I found the following:</p> <ol> <li>My plugin was version IntelliBot 0.10.143.381 (Pycharm plugin marketplace)</li> <li>On Intellibot GitHub the latest version is 0.13.191.8026</li> </ol> <p>So, how to solve it</p> <ol> <li>I uninstall the old plugin.</li> <li>Download the release version on Github https://github.com/lte2000/intellibot/releases/tag/v0.13.191.8026</li> <li>Install the new version</li> </ol> <p>Now everything is working, no more error notifications and no more problems with the syntax highlight.</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#how-to-write-a-test","title":"How to write a Test","text":""},{"location":"Python/Frameworks/robotframework/introduction.html#an-example","title":"An Example","text":"<p>As an example we have a basic test case:</p>  \u261d\ud83c\udffe Open a specific URL and later proceed to close it   <p>so we can say the steps for the test case will be:</p> <ol> <li>Open the URL on the browser</li> <li>Close the browser</li> </ol> <p>now what we need:</p> <ul> <li>We are talking about web UI and navigation, so we need a library for that, in this case, we will use the <code>SeleniumLibrary</code></li> <li>We will need 2 steps, one to open the browser and the other to close it.</li> <li>(Optional) we can store the URL of the website in a variable.</li> </ul>"},{"location":"Python/Frameworks/robotframework/introduction.html#the-implementation","title":"The implementation","text":"<ol> <li>Create the <code>.robot</code> file with the following sessions<ol> <li>Settings</li> <li>Variables</li> <li>Test Case</li> </ol> </li> </ol> <pre><code>*** Settings ***\n\n*** Variables ***\n\n*** Test Cases ***\n</code></pre> <ol> <li>Import the libraries and create the variable</li> </ol> <pre><code>*** Settings ***\nLibrary SeleniumLibrary\n\n*** Variables ***\n${URL}        https://www.google.com\n\n*** Test Cases ***\n</code></pre> <ol> <li>Name the test case</li> </ol> <pre><code>*** Settings ***\nLibrary SeleniumLibrary\n\n*** Variables ***\n${URL}        https://www.google.com\n\n*** Test Cases ***\nOpen a new website\n</code></pre> <ol> <li>Now bellow the test case name and indented create the test case steps.</li> </ol> <pre><code>*** Settings ***\nLibrary SeleniumLibrary\n\n*** Variables ***\n${URL}        https://www.google.com\n\n*** Test Cases ***\nOpen a new website\n    Open browser    ${URL}\n    [Teardown]      close browser\n</code></pre>"},{"location":"Python/Frameworks/robotframework/introduction.html#how-to-run-it","title":"How to run it","text":"<p>RobotFramework provides a very useful command to run the test cases, in the most basic of the version we have</p> <pre><code>robot PATH_TO_TEST_SUITE\n</code></pre> <p>This will run all the <code>.robot</code> files in that folder and output the results at the root of the folder. it can be fast but can get messy.</p> <p>Set a result folder</p> <p>The best way to organize the results is to send them to a specific folder and the robot framework allows us to do just that.</p> <ol> <li>Create a new folder, you can set any name, for this case <code>Results</code></li> <li>We add the flag <code>-d</code> to the command followed by the location of the folder.</li> </ol> <pre><code>robot -d LOCATION_OF_RESULT_FOLDER PATH_TO_TEST_SUITE\n</code></pre> <p>and example:</p> <pre><code>robot -d results Tests/twitch/FunctionalTestSuite\n</code></pre> <p></p> <p>How to run just one test case</p> <p>To run one single <code>.robot</code> file we just need to provide the direction to that file.</p> <pre><code>robot -d results Tests/twitch/FunctionalTestSuite/VideoSearch_Android.robot\n</code></pre> <p>With this command, just the test case <code>VideoSearch_Android.robot</code> will be executed.</p>"},{"location":"Python/Frameworks/robotframework/introduction.html#tips","title":"Tips","text":""},{"location":"Python/Frameworks/robotframework/introduction.html#good-case-practice-folder-and-files-need-it-for-the-project","title":"Good case practice: Folder and Files need it for the project.","text":"<p>This is an extra section, although the robot framework does not enforce a specific folder structure there is several good case practice that can be fallow to achieve what is called a reusable and easy-to-maintain acceptance test.</p> <p>\u201cThe need to change test comes from two directions: Change in requirements and change in the system\u2019s implementations. [\u2026] We must change the test to adapt to the new requirements or the new implementation.\u201c Writing Maintainable Automated Acceptance Test by Dale H.Emery </p> <p>From the article how to Structure a Scalable and Maintainable Acceptance Test Suite by Andreas Ebbert-Karroum we can say that each component system can be loosely divided into Stable parts and Variable parts.</p> <ul> <li>Stable parts: are those that do not change during the testing process, some examples can be the test framework (this case Robotframework) some libraries ( selenium for the web testing), and the test cases, the latter can be confusing but if we think test cases as the step to follow to achieve goals, they do not change really often, what it changes is the implementation of how we do those steps.</li> <li>Variable parts: These are where we need to focus our energy, these are the parts that can break due to changes in the application, however, if we create a robust adaptable structure we can minimize the risk of breaking or costly maintenance</li> </ul> <p></p>"},{"location":"Python/Frameworks/robotframework/introduction.html#stable-parts","title":"Stable parts","text":"<ol> <li>Platform: During the run of a project we don't spect to change the platform to use, so we can assume this is part of the stable elements.</li> <li>Libraries: These are normally a defined set, and they don't change often, some are updated or replaced for an answer and a better library but this doesn't happen in short periods of time there for we can say they are stable. Now how we load it to the test case is where we can implement a variable approach using a pre-loader.</li> <li>**Test Suite: T**hey are defined during the ideation of the project or early on in the development and are basically a container for test cases that test the same domain or the same function of the project. Although they change they don't do it fast, so we can be sure that at least for several iterations of the cycle of development they remain constant.</li> <li>Test Cases: if we see them as the steps to achieve a goal, the goal to test in behavior happens as we expected or a fail state happens when the conditions are correct. We can say that these steps do not change instead is the implementation of the steps that will change. keywords can remain the same the logic within them is the one that will change.</li> </ol>"},{"location":"Python/Frameworks/robotframework/introduction.html#variable-parts","title":"Variable parts","text":"<ol> <li>Resources: These will be the files that contain the implementation of the keywords to be used in the test cases, as we mentioned previously, the need for a change in the test cases will be due to a change of logic or implementation on the project, so here is where the changes might need to be reflected, example a location for a bottom change here is where we load an updated variable that contains the new locator, so the test case step of clicking or interacting with that object didn't change just the implementation.</li> <li>Page Objects: let's say we have a file that contains all the locators and all of them are mapped to words that can be more readable <code>${WARNING_MESSAGE} *//div[text()='Start Watching']</code> the locators might change, so we can update this page object and the variables and none of the test case step will be affected.*</li> <li>Special libraries: these are libraries created just for the project and in some cases, they might need to be refactored or changed due to changes in the project, these changes will be reflected in the code of the special library but not in the keywords used in the test case.</li> <li>Library Pre-loaders: these can vary on implementation but the idea behind is to avoid loading the library twice if that does not need it.</li> </ol>"},{"location":"Python/Frameworks/robotframework/introduction.html#how-to-write-a-click-keyword-that-doesnt-fail","title":"How to write a click keyword that doesn't fail","text":"<p>How to ensure that a click or an actual will succeed</p> <ol> <li>Use the keyword <code>wait until keyword succeeds</code></li> <li><code>${keyword}</code> is the keyword we are going to wait for</li> <li><code>${keywords_arg}</code> is the arguments for that action</li> </ol> <pre><code>Wait until the action success\n    [Arguments]    ${keyword}       ${keyword_arg}\n    wait until keyword succeeds    10s      1s      ${keyword}      ${keyword_arg}\n</code></pre>"},{"location":"Python/Frameworks/robotframework/introduction.html#errors","title":"Errors","text":"<p>I ran into issues running this framework</p> <ol> <li>Error with the geckodriver, I got a  message which said  geckodriver is not installed, I try to add to the PATH, but it didn't work so what I did is to put the binaries to the python script folder</li> </ol> <p></p> <ol> <li>SessionNotCreatedException: Message: Expected browser binary location, but unable to find binary in the default location, no 'moz:firefoxOptions.binary' for this error I just need to install firefox</li> </ol>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Image%20Processing/color_mapping.html","title":"Color Mapping","text":"<p>With OpenCV we can use different colorspaces other than RGB, this is the case of HSL and HSV, that stand for Hue-saturation-lightness and hue-saturation-value.</p> <p>Here how HSL will look like</p> <p></p> <p>and here how HSV will look like</p> <p></p> <p>Now in in openCV we can transform or convert the different pictures to a different colorspace.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Image%20Processing/color_mapping.html#import-libraries","title":"Import Libraries","text":"<p>First the imports</p> <pre><code>import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline # this line is  just for jypiter lab or notebooks\n</code></pre> <p>now with the imports we read or get the image we are going to use to work with</p> <pre><code>img = cv2.imread('../DATA/00-puppy.jpg')\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Image%20Processing/color_mapping.html#converting-to-different-colorspaces","title":"Converting to Different Colorspaces","text":"<p>now, we did this before, we convert from BGR to RGB</p> <p><pre><code>img = cv2.ctvColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Image%20Processing/color_mapping.html#convert-to-hsv","title":"Convert to HSV","text":"<p>now, first HSV</p> <pre><code>img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\nplt.imshow(img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Image%20Processing/color_mapping.html#convert-to-hsl","title":"Convert to HSL","text":"<p>the next one will be HSL</p> <pre><code>img = cv2.imread('../DATA/00-puppy.jpg')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2HLS)\nplt.imshow(img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html","title":"Drawing with mouse","text":"<p>In this case we are going to create and script that will allow me to use the mouse to draw different shapes.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#connecting-a-function-for-drawing","title":"Connecting a Function for Drawing","text":"<p>We will need to create the 'canvas', later connect the functions to support hte mouse and a way to close the window. We will build the script step by step.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#basic-structure","title":"Basic structure","text":"<ol> <li>We are going to import the libraries</li> <li>Create the 'canvas' to draw</li> <li>A loop to keep the window open and a way to close it</li> <li>Destroy all the windows</li> </ol> <pre><code>import cv2\nimport numpy as np\n\n\n#Create the 'Canvas'\nblack_img = np.zeros((512,512,3), np.uint8)\n\n\n#Create a loop to keep the windows open and a way to close it\nwhile True:\n\n    if cv2.waitKey(20) &amp; 0xFF == 27:\n        break\n\n#Destroy all windows\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#giving-a-name-to-the-window","title":"Giving a name to the window","text":"<ol> <li>giving a name to the window</li> <li>show the window</li> </ol> <pre><code>import cv2\nimport numpy as np\n\n\n\nblack_img = np.zeros((512,512,3), np.uint8)\n\n#giving a name to the window\ncv2.namedWindow(winname='my_drawing')\n\nwhile True:\n\n    #Showing the window\n    cv2.imshow('my_drawing',black_img)\n\n    if cv2.waitKey(20) &amp; 0xFF == 27:\n        break\n\n#Destroy all windows\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#link-the-window-to-the-event-and-set-the-mouse-callback","title":"link the Window to the event and set the mouse callback","text":"<ol> <li>Set the mouse callback</li> <li>Create the function called for that callback</li> <li>Define the event, or what is the result of the event</li> </ol> <pre><code>import cv2\nimport numpy as np\n\n# 2. Create the function\n\ndef draw_circle(event,x,y,flags,param):\n    # 3. Define de event\n    if event == cv2.EVENT_LBUTTONDOWN:\n        cv2.circle(black_img,(x,y),100,color=(0,255,0),-1)\n\n\nblack_img = np.zeros((512,512,3), np.uint8)\ncv2.namedWindow(winname='my_drawing')\n\n# 1. set the mouse callback\ncv2.setMouseCallback('my_drawing',draw_circle)\n\nwhile True:\n\n    cv2.imshow('my_drawing',black_img)\n\n    if cv2.waitKey(20) &amp; 0xFF == 27:\n        break\n\n\ncv2.destroyAllWindows()\n</code></pre> <p>the result</p> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#adding-functionality-with-event-choices","title":"Adding functionality with Event Choices","text":"<p>Now, we are going to use other event to provide additional functionality, in this case we are going to use the right button to make a circle with other color.</p> <ol> <li>Add a <code>elif</code></li> <li>Use other event to draw a circle with other color</li> </ol> <pre><code>import cv2\nimport numpy as np\n\n\n\ndef draw_circle(event,x,y,flags,param):\n    if event == cv2.EVENT_LBUTTONDOWN:\n        cv2.circle(black_img,(x,y),100,(0,255,0),-1)\n    # Define new event\n    elif event == cv2.EVENT_RBUTTONDOWN:\n        cv2.circle(black_img,(x,y),50,(0,0,255), -1)\n\n\nblack_img = np.zeros((512,512,3), np.uint8)\ncv2.namedWindow(winname='my_drawing')\n\n\ncv2.setMouseCallback('my_drawing',draw_circle)\n\nwhile True:\n\n    cv2.imshow('my_drawing',black_img)\n\n    if cv2.waitKey(20) &amp; 0xFF == 27:\n        break\n\n\ncv2.destroyAllWindows()\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Direct_drawing_with_mouse.html#dragging-with-mouse","title":"Dragging with Mouse","text":"<p>In this case we are going to use the rectangle, we will need to create some variable to keep track of the status of the 'drawing', in other words, when the user stop drawing, also some variable for the initial \\(x\\) and \\(y\\) points.</p> <pre><code>import cv2\nimport numpy as np\n\n#create a function base in the CV2 events\n\ndrawing = False # true if the mouse is press\nix,iy = -1,-1  # this variable will keep track of the initial point\n\ndef draw_rectangle(event,x,y,flags,param):\n    global ix,iy,drawing,mode\n\n    if event == cv2.EVENT_LBUTTONDOWN:\n        drawing = True\n        ix,iy = x,y\n\n    # with this event we will see the the rect getting bigger or smaller when we drag it\n    elif event == cv2.EVENT_MOUSEMOVE:\n        if drawing ==  True:\n            cv2.rectangle(black_img,(ix,iy),(x,y),(0,255,0),-1)\n    # here we finished drawing\n    elif event == cv2.EVENT_LBUTTONUP:\n        drawing = False\n        cv2.rectangle(black_img,(ix,iy),(x,y),(0,255,0),-1)\n\n\n# Create the 'canvas'\n\nblack_img = np.zeros((512,512,3), np.uint8)\ncv2.namedWindow(winname='my_drawing')\ncv2.setMouseCallback('my_drawing', draw_rectangle)\n\nwhile True:\n\n    cv2.imshow('my_drawing', black_img)\n\n    if cv2.waitKey(1) &amp; 0xFF == 27:\n        break\n\ncv2.destroyAllWindows()\n</code></pre> <p>The result is:</p> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html","title":"Drawing on Images","text":"<p>We can draw different things on the images, we can draw basic forms such as circle and rectangles, etc, we can put text and more complex figures all using <code>cv2</code></p> <p>First we will need the imports</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n# this parts is jut for jupyter lab\n%matplotlib inline\nimport cv2\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#create-the-canvas-for-drawing","title":"Create the 'Canvas' for drawing","text":"<p>We can draw in any images, but in this case we will use a black canvas so it will be easy</p> <pre><code>black_img = np.zeros(shape=(512,512,3),dtype=np.int16)\nblack_img.shape\n# (512,512,3)\nplt.imshow(black_img)\n</code></pre> <p></p> <p>we are using the Numpy function to create an array of zeros, and since the shape is 512x512x3 this means that is an image of 512x512 with 3 channels of color, and all this colors are \\(0\\), so if we display it will be a black image of 512x512.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#shapes","title":"Shapes","text":""},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#rectangles","title":"Rectangles","text":"<p>the <code>rectangle</code> function will have some parameters:</p> <ul> <li>img: the image where we are going to draw</li> <li>pt1: the vertex of the rectangle, basically the top left corner</li> <li>pt2: the vertex opposite to pt1, means the lower right corner</li> <li>Color of rectangle: the color or brightness(in case of grayscale img) RGB format</li> <li>thickness: the thickness of the lines that make up the rectangle ( if you want to fill all the rectangle or figure you can use <code>-1</code> as value)</li> <li>the are two parameters more, the linetype, and shift that we are not going to address here.</li> </ul> <pre><code>#pt1 top left , pt2 lower right corner\ncv2.rectangle(img=black_img,pt1=(384,0),pt2=(510,128),color=(0,255,0),thickness=5)\n</code></pre> <p>if we check the previous statement we will have a Numpy array, but if we use <code>imshow</code> we will have the image with the rectangle in the points we set up</p> <pre><code>cv2.imshow(black_img)\n</code></pre> <p></p> <p>now one in the center of the canvas</p> <pre><code>cv2.rectangle(black_img,pt1=(200,200),pt2=(300,300),color=(0,0,255),thickness=5)\nplt.imshow(black_img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#circle","title":"Circle","text":"<p>For the circle the parameter change from vertex to center point and radius, so to draw a circle</p> <pre><code>cv2.circle(img=black_img, center=(100,100), radius=50, color=(255,0,0), thickness=5)\nplt.imshow(black_img)\n</code></pre> <p></p> <p>now let's change the value of thickness to \\(-1\\) so we filled in the circle</p> <pre><code>cv2.circle(img=black_img,center=(400,400), radius=50,color=(255,0,0), thickness=-1)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#lines","title":"Lines","text":"<p>We can create lines in a similar way we create the rectangle, in this case pt1 and pt2 are starting and ending point instead of vertex.</p> <pre><code>cv2.line(black_img,pt1=(0,0),pt2=(511,511),color=(102,255,255), thickness=5)\nplt.imshow(black_img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#text","title":"Text","text":"<p>now for the text we need first to select the font we are going to use, in this case we are limited for the fonts already in <code>cv2</code> we have other arguments:</p> <ul> <li>text:  the text we want to display</li> <li>org:  the origin point, where the text will start</li> <li>fontFace: the font we are going to use</li> <li>fontScale: the size of the font</li> <li>linetype, for now we are going to use <code>cv2.LINE_AA</code></li> </ul> <pre><code>font = cv2.FONT_HERSHEY_SIMPLEX\ncv2.putText(balck_img,text='Hello',org=(10,500), fontFace=font, fontScale=4,color=(255,255,255),thickness=2,lineType=cv2.LINE_AA)\nplt.imshow(black_img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Drawing_on_Images.html#polygons","title":"Polygons","text":"<p>For the polygons we will have some changes, first we will need to create an array with the vertex and later reshape this array to ROWSx1X2 and this should be a <code>int32</code> array.</p> <p>the new parameter will be <code>isClosed</code> that we need to set as <code>True</code> to close the figure</p> <pre><code>black_img = np.zeros(shape=(512,512,3),dtype=np.int32)\nvertices = np.array([[100,300],[200,200],[400,300],[200,400]],np.int32)\npts = vertices.reshape((-1,1,2))\ncv2.polylines(black_img,[pts],isClosed=True,color=(255,0,0), thickness=5)\nplt.imshow(black_img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html","title":"Images and Numpy","text":"<p>in this case i will use Jupyter lab for the code, so the code in this document will have some parts specific for Jupyter lab, additionally the course gave me some images that i will use, so i will refer to those images too.</p> <p>First we need to remember that python alone is not able to handle the images, it needs a library to do so, in this case we are going to use <code>PLI</code> or <code>pillow</code></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html#get-the-image-with-python","title":"Get the image with Python","text":"<p>so in this case we are going to use the function <code>open()</code> to get the image, in the next step we will transfor the image in a Numpy array</p> <p><pre><code>import numpy as np\nimport mathplotlib.pyplot as plt\n%matplotlib inline #--&gt; this line is just for Jupyter Lab, in order to disply images\n</code></pre> We imported the mathplotlib in order to display the image in the Jypyter lab, now we are going to import <code>Image</code> from <code>PIL</code></p> <p><pre><code>from PIL import Image\n</code></pre>  next, we need to load the image</p> <pre><code>import numpy as np\nimport mathplotlib.pyplot as plt\n%matplotlib inline #--&gt; this line is just for Jupyter Lab, in order to display images\nfrom PIL import Image\n\npic = Image.open('path-to/the-image.jpg')\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html#transform-the-image-to-a-numpy-array","title":"Transform the image to a Numpy array","text":"<p>At this point the image is load but it</p> <pre><code>pic = Image.open('Computer-Vision-with-Python/DATA/00-puppy.jpg')\ntype(pic)\n# PIL.JpegImagePlugin.JpegImageFile\n</code></pre> <p>in this case we have a Jpeg Image file, now we need to transform it to Numpy array</p> <pre><code>pic_arr = np.asarray(pic)\ntype(pic_arr)\n# numpy.ndarray\n</code></pre> <p>with the function called <code>asarray</code> we transform this image field to a Numpy array.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html#display-the-image-with-imshow","title":"Display the image with <code>imshow</code>","text":"<p><pre><code>pic_arr.shape\n(1300, 1950, 3)\n</code></pre>  in this case we have an array with 1300x1950 with 3 channels, this means, that the image is a color image, so, now lest display this array as an image</p> <p><pre><code> plt.imshow(pic_arr)\n</code></pre> you will get</p> <p></p> <p><code>plt.imshow(image_numpy_array)</code> the plt.imshow is a special function from  matplotlib use to display images that are in a Numpy array format.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html#color-mapping-one-channel-to-grayscale","title":"Color mapping one channel to grayscale","text":"<p>We know that the image is a color image, that means, it has 3 channels, and we confirm this when we ask for its shape (pic_arr.shape) which result was (1300, 1950, 3), so first we are going to make a copy and later slice the one of the channels</p> <p><pre><code>pic_red = pic_arr.copy()\npic_red = pic_red[:,:,0]\nplt.imshow(pic_red)\n</code></pre> the result will be</p> <p></p> <pre><code>pic_red.shape\n# (1300, 1950)\n</code></pre> <p>how it looks is due to how , matplotlib handle the colors, in this case is displaying the image in a format that will be special for people with an specific color blindness.</p> <p>We can display the image in gray scale, but the question will be, Gray?, we are going to map the color red to a gray-scale</p> <p><pre><code>plt.imshow(pic_red, cmap='gray')\n</code></pre> </p> <p>we can see the difference when we get the other colors, green and blue</p> <p>Blue <pre><code>pic_green = pic_arr.copy()\npic_green = pic_green[:,:,1]\nplt.imshow(pic_green, cmap = 'gray')\n</code></pre> Green</p> <p><pre><code>pic_blue = pic_arr.copy()\npic_blue = pic_blue[:,:,2]\nplt.imshow(pic_blue, cmap = 'gray')\n</code></pre> </p> <p>now comparing the 3 images</p> <p></p> <p>Then we can say that in each channel, the closest is the pixel to the color of the channel, closest to 255, and closest to white, for example, in the image of the red channel, the parts of the picture that are more white means that they contain more red, and those that are black means that contain no red. This is mapping the color to a gray scale, but we are not removing the contribution of the colors.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Numpy.html#removing-contribution-of-the-channels","title":"Removing contribution of the channels","text":"<p>In this part we are going to remove the contribution of the channels Blue and Green so we can have an image with the tree channels but with 0 contribution in two of those channels.</p> <p><pre><code>pic_red_real= pic_arr.copy()\npic_red_real[:,:,1] = 0\npic_red_real[:,:,2] = 0\nplt.imshow(pic_red_real)\n</code></pre> </p> <p>and if we check the shape</p> <pre><code>pic_red_real.shape\n# (1300, 1950, 3)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html","title":"Images and Opencv","text":"<p>OpenCV or Open source computer vision is a library written in C++ although for the purpose of this notes we are going to use the python bindings.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#importing-and-possible-errors","title":"Importing and possible errors","text":"<p>To import the library we can use <code>cv2</code></p> <pre><code>import cv2\n</code></pre> <p>now to load an image we need to have the correct path to it, otherwise we can generate an error that will be difficult to fine. If for some reason we add the wrong path, we wont get an error message instead <code>None</code></p> <pre><code>img = cv2.imread('some/wrong/path.png')\nprint(img)\n# None\ntype(img)\n# NoneType\n</code></pre> <p>now, lets load from a correct path</p> <p><pre><code>img = cv2.imread('../DATA/00-puppy.jpg')\ntype(img)\n# numpy.ndarray\nimg\narray([[[78, 81, 95],\n        [80, 83, 97],\n        [81, 84, 98],\n        ...,\n        [22, 27, 25],\n        [22, 27, 25],\n        [22, 27, 25]],\n\n       [[78, 81, 95],\n        [79, 82, 96],\n        [79, 82, 96],\n\n        ...,\n        [22, 30, 23],\n        [23, 31, 24],\n        [23, 31, 24]]], dtype=uint8)\n\nimg.shape\n# (1300, 1950, 3)\n</code></pre> so this <code>imread</code> gave me a Numpy.narray with 3 color channels</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#color-correction","title":"Color Correction","text":"<p>Now that we have the correct image, or rather the correct path, we have the image loaded, but when we display it</p> <p><pre><code>img_bgr = cv2.imread('../DATA/00-puppy.jpg')\nplt.imshow(img_bgr)\n</code></pre> </p> <p>The image has been correctly loaded by openCV as a numpy array, but the color of each pixel has been sorted as BGR. Matplotlib's plot expects an RGB image so, for a correct display of the image, it is necessary to swap those channels</p> <p>for this, we can use a build-in function <pre><code>img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n</code></pre></p> <p>in this case we are going to use <code>cvtColor</code> to transform from BGR to RGB, we pass first the image <code>img</code>, later the type of conversion <code>cv2.COLOR_BGR2RGB</code></p> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#load-image-to-a-specific-color-map","title":"Load Image to a Specific Color Map","text":"<p>We can use opencv to load an image to a specific color channel, in this case we want to import it as a gray scale image</p> <pre><code>img_gray = cv2.imread('../DATA/00-puppy.jpg',cv2.IMREAD_GRAYSCALE)\nplt.imshow(img_gray)\n</code></pre> <p></p> <p>so in this case we have have the default color mapping but this is not the gray scale we wanted, we need to be specific to <code>plt</code> to map the image to gray-scale</p> <pre><code>img_gray = cv2.imread('../DATA/00-puppy.jpg',cv2.IMREAD_GRAYSCALE)\nplt.imshow(img_gray, cmap='gray')\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#resizing-and-flipping-the-image","title":"Resizing and Flipping the Image","text":"<p>First we need to remember what is the shape of the image</p> <pre><code>img_rgb.shape\n# width, height, color channels\n</code></pre> <p>now, we can use resize to change the size of the image</p> <pre><code>img =cv2.resize(img_rgb,(1300,275))\nplt.imshow(img)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#by-ratio","title":"By Ratio","text":"<p>Here we will use the ratio</p> <p><pre><code>w_ratio = 0.5\nh_ratio = 0.5\nnew_img =cv2.resize(img_rgb,(0,0),img,w_ratio,h_ratio)\nplt.imshow(new_img)\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#flipping-images","title":"Flipping Images","text":"<p><pre><code># Along central x axis\nnew_img = cv2.flip(new_img,0)\n# Along central y axis\nnew_img = cv2.flip(new_img,1)\n# Along both axis\nnew_img = cv2.flip(new_img,-1)\nplt.imshow(new_img)\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#saving-image-files","title":"Saving Image Files","text":"<p><pre><code>type(new_img)\n#numpy.ndarray\ncv2.imwrite('my_new_picture.jpg',new_img)\n#True\n</code></pre> Keep in mind, the above stored the BGR version of the image.</p>"},{"location":"Python/Libraries_and_Modules/Computer_Vision_and_OpenCV/Images_Basic_with_OpenCV/Images_and_Opencv.html#drawing-images","title":"Drawing Images","text":"<p>We start by making a canvas, we are going to create an array that will serve as it.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\n\nblank_img = np.zeros(shape=(512,512,3),dtype=np.int16)\nblank_img.shape\nplt.imshow(blank_img)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html","title":"Python-Crontab","text":"<ol> <li>pip page</li> <li>Gitlab</li> </ol>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#description","title":"Description","text":"<p>Crontab module for reading and create cronotab files and accessing the sytem cron with and easy API</p> <p>The special character \"W\", \"L\", \"#\", and \"?\"\" is not supported.</p> Field Name Mandatory Allowed Values Special Characters Extra Values Minutes Yes 0-59 * / , - &lt; &gt; Hours Yes 0-23 * / , - &lt; &gt; Day of month Yes 1-31 * / , - &lt; &gt; Month Yes 1-12 or JAN-DEC * / , - &lt; &gt; Day of week Yes 0-6 or SUN-SAT * / , - &lt; &gt;"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#installation","title":"Installation","text":"<pre><code>pip install python-crontab\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#crontab-syntax","title":"Crontab Syntax","text":"<p>The specific syntax to define the schedule consist of five field</p> <pre><code>Minute Hours Day Month Day_of_the_Week\n</code></pre> <p>as mentioned about the fields can have the following values <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n\u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31)\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n\u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of week (0 - 6) (Sunday to Saturday;\n\u2502 \u2502 \u2502 \u2502 \u2502                                       7 is also Sunday on some systems)\n\u2502 \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 \u2502\n* * * * *  command to execute\n</code></pre></p> <p>We can make more complex configuration if we make use of special characters</p> Character Meaning Comma To separate multiple values Hyphen To indicate a range of values Asterisk To indicate all possible values Forward slash To indicate EVERY <p>For example: <code>0 16 1,10,22 * *</code> tells cron to run a task at 4 PM (which is the 16<sup>th</sup> hour) on the 1<sup>st</sup>, 10<sup>th</sup> and 22<sup>nd</sup> day of every month.</p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#access-to-crontab","title":"Access to Crontab","text":"<p>There are 5 ways to access, there are 3 that work just in Linux and the other two will work in windows</p> <p>Linux 1. <pre><code>from crontab import CronTab\n\ncron = CronTab(user='username')\n</code></pre> 2. <pre><code>from crontab import CronTab\n\ncron = CronTab()\n</code></pre> 3. <pre><code>from crontab import CronTab\n\ncron = CronTab(user=True)\n</code></pre></p> <p>Windows and other systems 4. <pre><code>from crontab import CronTab\n\ncron = CronTab(tabfile='filename.tab')\n</code></pre> where <code>filename.tab</code> is a file containing the task.</p> <p>5. <pre><code>from crontab import CronTab\n\ncron = CronTab(tab=\"\"\" * * * * * command\"\"\")\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#create-a-new-job","title":"Create A new Job","text":"<p>We can create this jobs in different ways, two main are, with the commands and with commands plus comments</p> <p><pre><code>cron.new(command='my command')\n</code></pre> now with a comment <pre><code>cron.new(command='my command',\n        comment='my comment')\n</code></pre></p> <p>so a complete example will be</p> <p><pre><code>from crontab import CronTab\n\ncron = CronTab(user='username')\njob = cron.new(command='python test.py')\njob.minute.every(1)\ncron.write()\n</code></pre> and the test file <pre><code>from datetime import datetime\n\nmy_file = open('append.txt', 'a')\nmy_file.write(f'append {datetime.now()}')\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#setting-restrictions","title":"Setting restrictions","text":"Restriction Description <code>job.minute.every(&lt;minutes&gt;)</code> Set minutes <code>&lt;minutes&gt;</code> (0-59) <code>job.hour.every(&lt;hours&gt;)</code> Set hours <code>&lt;hours&gt;</code> (0-23) <code>job.dow.on(&lt;day_of_the_week&gt;)</code>, <code>job.dow.on(&lt;day_of_the_week&gt;,&lt;day_of_the_week&gt;)</code> Set day of the week <code>&lt;day_of_the_week&gt;</code> ('MON','SAT', etc) <code>job.month.during(&lt;month&gt;)</code>,<code>job.month.during(&lt;month&gt;,&lt;month&gt;)</code> Set month <code>&lt;month&gt;</code> ('JAN', 'FEB', etc) <p>Every time we set a time restriction we cancel the previous one thus</p> <pre><code>job.hour.every(1)\njob.hour.every(15)\n</code></pre> <p>the value set will be 15 instead of 1 in order to add restriction to a previous one</p> <pre><code>job.hour.every(1)\njob.hour.also.on(15)\n</code></pre> <p>In some case we want to set up one filed and make the other field to 0, we can do something like:</p> <p><pre><code>job.every(15).hours()\n</code></pre> This will set the schedule to <code>0 */4 * * *</code>.</p> <p>Similarly for the 'day of the month', 'month' and 'day of the week' fields.</p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#set-job-to-work-every-reboot","title":"Set job to work every reboot","text":"<pre><code>job.every_reboot()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#clean-the-restrictions","title":"Clean the restrictions","text":"<pre><code>job.clear()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#enable-and-disable-jobs","title":"Enable and disable jobs","text":"<p>To enable the job <pre><code>job.enable()\n</code></pre></p> <p>To disable the job <pre><code>job.enable(False)\n</code></pre></p> <p>To check if the task is enable</p> <pre><code>job.is_enable()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#checking-validity","title":"Checking validity","text":"<pre><code>job.is_valid()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#finding-a-job","title":"Finding a job","text":"<p>Finding by the command name <pre><code>cron.find_command(\"command name\")\n</code></pre></p> <p>Finding by the comments <pre><code>cron.find_comment(\"comment\")\n</code></pre></p> <p>Finding according the time <pre><code>cron.find_time(time schedule)\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#remove-the-jobs","title":"Remove the jobs","text":"<pre><code>cron.remove(job)\n</code></pre> <p>remove base in the comment</p> <pre><code>cron.remove_all(comment='my comment')\n</code></pre> <p>or remove all <pre><code>cron.remove_all()\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Crontab/introduction.html#environment-variable","title":"Environment Variable","text":"<p>We can define environment variables</p> <pre><code>job.env['VARIABLE_NAME'] = 'Value'\n</code></pre> <p>to get the variables</p> <pre><code>job.env\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html","title":"Python-Datamuse","text":""},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html#description","title":"Description","text":"<p>Python wrapper for Datamuse API</p>"},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html#installation","title":"Installation","text":"<pre><code>pip3 install python-datamuse\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html#example","title":"Example","text":"<pre><code>from datamuse import datamuse\napi = datamuse.Datamuse()\nninth_rhymes = api.words(rel_rhy='ninth', max=5)\n#ninth_rhymes\n#[]\norange_rhymes = api.words(rel_rhy='orange', max=5)\n#orange_rhymes\n#[{'word': 'door hinge', 'score': 74, 'numSyllables': 2}]\nyellow_things = api.words(rel_jja='yellow', max=5)\n#yellow_things\n#[{'word': 'fever', 'score': 1001}, {'word': 'color', 'score': 1000}, {'word': 'flowers', 'score': 999}, {'word': 'light', 'score': 998}, {'word': 'colour', 'score': 997}]\nfoo_complete = api.suggest(s='foo', max=10)\n#foo_complete\n#[{'word': 'food', 'score': 3888}, {'word': 'foot', 'score': 3041}, {'word': 'fool', 'score': 1836}, {'word': 'football', 'score': 1424}, {'word': 'footage', 'score': 1328}, {'word': 'footprint', 'score': 1082}, {'word': 'foolish', 'score': 967}, {'word': 'foof', 'score': 930}, {'word': 'footing', 'score': 786}, {'word': 'foolproof', 'score': 697}]\n</code></pre> <p>Note that the default number of results is set to 100. You can set the default max to something else using the <code>set_max_default</code> method, e.g. <code>api.set_max_default(300)</code>. Datamuse only returns 1000 results max.</p>"},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html#parameters-for-word-methods","title":"Parameters for <code>word</code> methods","text":"<p>Description of the method</p> <p>This endpoint returns a list of words (and multiword expressions) from a given vocabulary that match a given set of constraints. See https://www.datamuse.com/api/ for the official Datamuse API documentation for the <code>/words</code> endpoint. :param <code>**kwargs</code>: Query parameters of constraints and hints. :return: A list of words matching that match the given constraints.</p> <ul> <li>Means like <code>ml</code></li> <li>Sounds like <code>sl</code></li> <li>Spelled like <code>sp</code></li> <li>Related word <code>rel_[code]</code><ul> <li><code>jja</code> Popular nouns modified by the given adjective. (gradual \u2192 increase)</li> <li><code>jjb</code> Popular adjectives used to modify the given noun. (beach \u2192 sandy)</li> <li><code>syn</code> Synonyms (ocean \u2192 sea)</li> <li><code>trg</code> \"Triggers\" (words that are statistically associated with the query word in the same piece of text.) (cow \u2192 milking)</li> <li><code>ant</code> Antonyms (late \u2192 early)</li> <li><code>spc</code> \"Kind of\" direct hypernyms (gondola \u2192 boat)</li> <li><code>gen</code> \"More genaral than\" direct hyponyms (boat \u2192 gondola)</li> <li><code>com</code> \"Comprises\" direct holonyms (car \u2192 accelerator)</li> <li><code>par</code> \"part of\" direct meronyms (trunk \u2192 tree)</li> <li><code>bga</code> Frequent followers (wreak \u2192 havoc)</li> <li><code>bgb</code> Frequent predecessors (havoc \u2192 wreak)</li> <li><code>rhy</code> Rhymes (spade \u2192 aid)</li> <li><code>nry</code> Approximate rhymes (forest \u2192 chorus)</li> <li><code>hom</code> Homophones, sound-alike (course \u2192 coarse)</li> <li><code>cns</code> Consonant match (sample \u2192 simple)</li> </ul> </li> <li>Identifier for the vocabulary to use, <code>v</code>, if none is provided will use \\(550,000\\) term from English. the value <code>es</code> specify \\(500,000\\) term, the value <code>enwiki</code> specifies and approximately 6 millions-term.</li> <li>Topic words <code>topics</code> (An optional hint to the system about the theme of the document being written)</li> <li>Left context <code>lc</code> An optional hint to the system about the word that appears immediately to the left of the target word in a sentence.</li> <li>Right context <code>rc</code> An optional hint to the system about the word that appears immediately to the right of the target word in a sentence.</li> <li>Maximum <code>max</code></li> <li> <p>Metadata flag <code>md</code> A list of single-letter codes (no delimiter) requesting that extra lexical knowledge be included with the results.</p> Letter Description <code>d</code> Definitions <code>p</code> Parts of speech <code>s</code> Syllable count <code>r</code> Pronunciation <code>f</code> word frequency </li> <li> <p>Query echo <code>qe</code> This is useful for looking up metadata about specific words. For example, <code>/words?sp=flower&amp;qe=sp&amp;md=fr</code> can be used to get the pronunciation and word frequency for flower.</p> </li> </ul>"},{"location":"Python/Libraries_and_Modules/Datamuse/introduction.html#parameters-for-suggest-methods","title":"Parameters for <code>suggest</code> methods","text":"<ul> <li><code>s</code> Prefix hint string; typically, the characters that the user has entered so far into a search box.</li> <li><code>max</code> Maximum number of results to return.</li> <li><code>v</code>     Identifier for the vocabulary to use.</li> </ul>"},{"location":"Python/Libraries_and_Modules/HTTPX/introduction.html","title":"HTTPX","text":"<p>HTTPX is a fully featured HTTP client for Python 3, which provides sync and async APIs, and support for both HTTP/1.1 and HTTP/2.</p> <ol> <li>Pypi page</li> <li>Documentation</li> </ol>"},{"location":"Python/Libraries_and_Modules/HTTPX/introduction.html#how-i-use-it-how-i-find-it","title":"How I use it/ How I find it","text":"<p>I run into this library trying to understand <code>python-onvif-zeep-async</code> and in order to know a bit more i decided to check it. I haven't done anything with it yet, so i will leave just the first code developer shows in the documentation.</p> <pre><code>import httpx\nr = httpx.get('https://www.example.org/')\nr\n# &lt;Response [200 OK]&gt;\nr.status_code\n# 200\nr.headers['content-type']\n# 'text/html; charset=UTF-8'\nr.text\n# '&lt;!doctype html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;title&gt;Example Domain&lt;/title&gt;...'\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html","title":"Itertools","text":""},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html#why-i-make-notes-about-it","title":"Why I make notes about it","text":"<p>I found many of the challenges websites can be solved using these iterators.</p>"},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html#description","title":"Description","text":"<p>Itertools is a module which is implementing of the iterator building blocks of other well known programing languages, this is the implementation on python.</p> <p>Itertools documentation</p> <p>These are memory-efficient tools that are useful either using them alone or in combination.</p> <p>They are divided in  three big main categories:</p> <ol> <li>Infinite iterators</li> <li>Iterators on the shortest input sequence</li> <li>combinatorics iterators</li> </ol>"},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html#1-infinite-iterators","title":"1. Infinite Iterators","text":"<p>These are apparently 3 different iterators to get N repetitions of the same number, Count from an N number a define number of steps in a direction, and cycle over a string.</p> Name Arg Example count() \"start, [step]\" count(10) \u21d2 10 11 12 13 14 cycle() p cycle('ABCD') \u21d2 A B C D A B C D ... repeat() \"elem [,n]\" \"repeat(10,3) \u21d2 10 10 10\""},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html#2-iterators-terminating-on-the-shortest-input-sequence","title":"2. Iterators terminating on the shortest input sequence","text":"<p>These are more difficult to understand just by reading the title, but the example will help to make it clear</p> Name arg Results Example accumulate() p [, func] p0, p0+p1. p0+p1+p2 accumulete([1,2,3,4,5]) \u21d2 1 3 6 10 15 chain() p, q, \u2026 p0, p1, \u2026 plast, q0, q1, \u2026 chain('ABC', 'DEF') \u21d2 A B C D E F chain.from_iterable() iterable p0, p1, \u2026 plast, q0, q1, \u2026 chain.from_iterable(['ABC', 'DEF']) \u21d2 A B C D E F compress() data, selectors \"(d[0] if s[0]), (d[1] if s[1]), \u2026 compress('ABCDEF', [1,0,1,0,1,1]) \u21d2 A C E F dropwhile() pred, seq seq[n], seq[n+1], starting when pred fails dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) \u21d2 6 4 1 filterfalse() pred, seq elements of seq where pred(elem) is false filterfalse(lambda x: x%2, range(10)) \u21d2 0 2 4 6 8 groupby() iterable [, key] sub-iterators grouped by value of key(v) islice() seq, [start,] stop [, step] elements from seq[start:stop:step] islice('ABCDEFG', 2, None) \u21d2 C D E F G starmap() func, seq func(*seq[0]) func(*seq[1]), \u2026 starmap(pow, [(2,5), (3,2), (10,3)]) \u2192 32 9 1000 takewhile() pred, seq seq[0], seq[1] until pred fails takewhile(lambda x: x&lt;5, [1,4,6,4,1]) \u2192 1 4\" tee() it, n it1, it2, \u2026 itn splits one iterator into n zip_longest() p, q, \u2026 (p[0], q[0]), (p[1], q[1]), \u2026 zip_longest('ABCD', 'xy', fillvalue='-') \u2192 Ax By C- D-"},{"location":"Python/Libraries_and_Modules/Itertools/introduction.html#3-combinatoric-iterator","title":"3. Combinatoric iterator","text":"Name arg Result Results product() p, q, \u2026 [repeat=1] AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD cartesian product, equivalent to a nested for-loop permutations() p[, r] AB AC AD BA BC BD CA CB CD DA DB DC r-length tuples, all possible orderings, no repeated elements combinations() p, r AB AC AD BC BD CD r-length tuples, in sorted order, no repeated elements combinations_with_replacement() p, r AA AB AC AD BB BC BD CC CD DD r-length tuples, in sorted order, with repeated elements <p>Icons made by Freepik</p>"},{"location":"Python/Libraries_and_Modules/Itertools/Combinatoric_iterator/combinations.html","title":"Itertools.combinations","text":"<p>This are use for combinatory construct, the usage of this methods is focus provide a series of tuples with all the sequence or set of numbers or letters used in the iterator.</p> <pre><code>combinations(iterator, r)\n</code></pre> <p>Here <code>r</code> is an input, it represent the size of different combinations that are possible</p> <pre><code>from itertools import combinations\n\nletters =\"victor\"\n\n# size of combination is set to 3\na = combinations(letters, 3)\ncomb = [' '.join(i) for i in a]\n\nprint(comb)\n\n#['vic', 'vit', 'vio', 'vir', 'vct', 'vco', 'vcr', 'vto', 'vtr', 'vor', 'ict', 'ico', 'icr', 'ito', 'itr', 'ior', 'cto', 'ctr', 'cor', 'tor']\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Itertools/Combinatoric_iterator/combinations.html#itertoolscombinations_1","title":"Itertools.combinations","text":"<p>itertools.combinations() | HackerRank</p>"},{"location":"Python/Libraries_and_Modules/Itertools/Combinatoric_iterator/combinations.html#problem-definition","title":"Problem definition","text":"<p>Task</p> <p>You are given a string.Your task is to print all possible combinations, up to size, of the string in lexicographic sorted order.</p> <p>Input Format</p> <p>A single line containing the string and integer value separated by a space.</p> <p>Output Format</p> <p>Print the different combinations of string on separate lines.</p> <p>Sample Input</p> <p><code>HACK 2</code></p>"},{"location":"Python/Libraries_and_Modules/Itertools/Combinatoric_iterator/combinations.html#implementation","title":"Implementation","text":"<pre><code>from itertools import combinations\n\ns , n  = input().split()\n\nfor i in range(1, int(n)+1):\n    for j in combinations(sorted(s), i):\n        print(''.join(j))\n</code></pre> <ul> <li><code>s</code> is the string</li> <li><code>n</code> the length of the combination</li> <li><code>for</code> loop, using a range that will be from <code>1</code> to the <code>n+1</code> , range upper limit not inclusive thus the <code>+1</code></li> <li>Second <code>for</code> loop this time using the <code>combination</code> it is using <code>sorted()</code> to sort the string.</li> </ul>"},{"location":"Python/Libraries_and_Modules/Itertools/Combinatoric_iterator/permutations.html","title":"Itertools permutations","text":"<p><code>Itertool</code> is a module provided by Python for creating iterators for efficient looping. It also provides various features or functions that work with iterators to produce complex iterators and help us to solve problems easily and efficiently in terms of time as well as memory.</p> <p>permutation will receive two values</p> <p><code>permutations(iterator,r)</code></p> <ul> <li>Iterator: will be the string or list that will be using as base for the permutation</li> <li>r: will be the length of the permutation item results</li> </ul> <pre><code>from itertools import permutations\n\na = \"geEk\"\n\np = permutatations(a,2)\n\nfor j in p:\n    print(j)\n</code></pre> <p>Results:</p> <p>('g', 'e') ('g', 'E') ('g', 'k') ('e', 'g') ('e', 'E') ('e', 'k') ('E', 'g') ('E', 'e') ('E', 'k') ('k', 'g') ('k', 'e') ('k', 'E')</p>"},{"location":"Python/Libraries_and_Modules/Itertools/Infinite_iterators/count.html","title":"count()","text":"<p>Documentation</p> <p>Return an iterator with evenly spaced starting from the start, space by the step, default step is 1.</p> <pre><code>from itertools import count\n\nn = count(start=10)\n\nfor i in range(1,7):\n    print(n.next())\n\n&gt;&gt; 10\n&gt;&gt; 11\n&gt;&gt; 12\n&gt;&gt; 13\n&gt;&gt; 14\n&gt;&gt; 15\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Itertools/Infinite_iterators/cycle.html","title":"cycle()","text":"<p>Arg: p Example: cycle('ABCD') \u21d2 A B C D A B C D ...</p> <p>It will return elements of the iterable and save a copy of each, when the iterator is exhausted it will rerun the elements of the iterable</p> <pre><code>for itertool import cycle\n\nstr_cycle = \"victor\"\n\nn = cylce(str_cycle)\n\nfor _ in range(1,12):\n    print(n.next())\n\n&gt;&gt; v\n&gt;&gt; i\n&gt;&gt; c\n&gt;&gt; t\n&gt;&gt; o\n&gt;&gt; r\n&gt;&gt; v\n&gt;&gt; i\n&gt;&gt; c\n&gt;&gt; t\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Itertools/Infinite_iterators/repeat.html","title":"repeat()","text":"<p>Arg: elem [,n] Example: repeat(10,3) \u21d2 10 10 10</p> <p>Make iterable that will return objects over and over again, it will run infinitely at less the time is specify, that time will be the value of <code>n</code>.</p> <pre><code>from itertools import repeat\n\nr = repeat(10,4)\n\nwhile True:\n    try:\n        print(m.next())\n    except:\n        break\n\n&gt;&gt; 10\n&gt;&gt; 10\n&gt;&gt; 10\n&gt;&gt; 10\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Itertools/Shortest_input_sequence/groupby.html","title":"groupby()","text":"<p>Syntax: itertools.groupby(iterable, key_func)*</p> <p>Parameters:</p> <ul> <li>iterable: Iterable can be of any kind (list, tuple, dictionary).</li> <li>key: A function that calculates keys for each element present in iterable.</li> </ul> <p>This method calculates the keys for each element present in iterable. It returns key and iterable of grouped items.</p> <p>It is still not a good description of this method, in the following example we will use a lambda function as part of the key.</p> <pre><code>from iter import groupby\n\nL = [(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"b\", 4)]\n\n# Key function\nkey_func = lambda x: x[0]\n\nfor key, group in groupby(L, key_func):\n    print(key + \" :\", list(group))\n\n# output\n#a : [('a', 1), ('a', 2)]\n#b : [('b', 3), ('b', 4)]\n</code></pre> <p>In this case the Lambda function will extract the first element of the tuple inside the list ( the <code>a</code> and <code>b</code> ) and use them as Keys, later the same iterable will be group base on the key.</p>"},{"location":"Python/Libraries_and_Modules/Itertools/Shortest_input_sequence/tee.html","title":"tee()","text":"<p>This iterator splits the container into a number of iterators mentioned in the argument.</p> <p>Syntax:</p> <pre><code>tee(iterator, count)\n</code></pre> <p>Parameter: This method contains two arguments.</p> <ul> <li>First argument is iterator</li> <li>Second argument is a integer</li> </ul> <p>Return Value: This method returns the number of iterators mentioned in the argument.</p> <pre><code>from itertools import tee\n\niterator1, iterator2 = tee([1,2,3,4,5,6], 2)\n\nprint (list(iterator1))\nprint (list(iterator2))\n\n#&gt;&gt;[1, 2, 3, 4, 5, 6]\n#&gt;&gt;[1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html","title":"Numpy Crash course","text":"<p>This notes  are notes for the Numpy crash course.</p> <p>Numpy is a linear library for Python, it is an essential building block for other PyData ecosystem ( Pandas, scipy, scikit-lean, etc)</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#using-numpy","title":"Using NumPy","text":"<p>Normally numpy is import as <code>np</code></p> <pre><code>import numpy as np\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#numpy-arrays","title":"NumPy Arrays","text":"<p>NumPy came in vector and matrices, Vectors are 1 dimension, matrix are 2D dimensions.</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#create-numpy-arrays","title":"Create NumPy Arrays","text":"<p>we can create an array from a python list</p> <pre><code>my_list = [1,2,3]\nnp.array(my_list)\n# array([1, 2, 3])\n</code></pre> <p>and can be a list of list as well</p> <pre><code>my_matrix = [[1,2,3],[4,5,6],[7,8,9]]\nnp.array(my_matrix)\n#array([[1, 2, 3],\n#       [4, 5, 6],\n#       [7, 8, 9]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#build-in-methods","title":"Build-in Methods","text":""},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#arange","title":"<code>arange</code>","text":"<p>Return evenly spaced value within a given interval</p> <pre><code>np.arange(0,10)\n# array([0,1,2,3,4,5,6,7,8,9])\nnp.arange(0,11,2)\n# array([0, 2, 4, 6, 8, 10])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#zeros-and-ones","title":"<code>zeros</code> and <code>ones</code>","text":"<p>Generate vectors or matrix of zeros or ones</p> <pre><code>np.zero(3)\n# array([0. , 0. , 0.])\n\nnp.zero((5,5))\n# array([[0., 0., 0., 0., 0.],\n#        [0., 0., 0., 0., 0.],\n#        [0., 0., 0., 0., 0.],\n#        [0., 0., 0., 0., 0.],\n#        [0., 0., 0., 0., 0.]])\n\nnp.ones(3)\n# array([1., 1., 1.])\n\nnp.ones((3,3))\n# array([[1., 1., 1.],\n#       [1., 1., 1.],\n#       [1., 1., 1.]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#linspace","title":"<code>linspace</code>","text":"<p>Return evenly spaced numbers over a specific interval</p> <pre><code>np.linspace(0,10,3)\n# array([0., 5., 10.])\n\nnp.linspace(0,5,20)\n# array([0.        , 0.26315789, 0.52631579, 0.78947368, 1.05263158,\n#       1.31578947, 1.57894737, 1.84210526, 2.10526316, 2.36842105,\n#       2.63157895, 2.89473684, 3.15789474, 3.42105263, 3.68421053,\n#       3.94736842, 4.21052632, 4.47368421, 4.73684211, 5.        ])\n\n#Note that .linspace() includes the stop value. To obtain an array of common fractions, increase the number of items:\n\nnp.linspace(0,5,21)\n# array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  , 2.25, 2.5 ,\n#       2.75, 3.  , 3.25, 3.5 , 3.75, 4.  , 4.25, 4.5 , 4.75, 5.  ])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#eye-identity-matrix","title":"<code>eye</code> identity matrix","text":"<p>Create a identity matrix</p> <pre><code>np.eye(4)\n# array([[1., 0., 0., 0.],\n#       [0., 1., 0., 0.],\n#       [0., 0., 1., 0.],\n#       [0., 0., 0., 1.]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#random","title":"Random","text":"<p>Here some of the ways we can create random numbers</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#rand","title":"<code>rand</code>","text":"<p>Creates an array of the given shape with random uniform distribution over <code>[0,1)</code></p> <pre><code>np.random.rand(2)\n# array([0.37065108, 0.89813878])\nnp.random.rand(5,5)\n# array([[0.03932992, 0.80719137, 0.50145497, 0.68816102, 0.1216304 ],\n#       [0.44966851, 0.92572848, 0.70802042, 0.10461719, 0.53768331],\n#       [0.12201904, 0.5940684 , 0.89979774, 0.3424078 , 0.77421593],\n#       [0.53191409, 0.0112285 , 0.3989947 , 0.8946967 , 0.2497392 ],\n#       [0.5814085 , 0.37563686, 0.15266028, 0.42948309, 0.26434141]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#randint","title":"<code>randint</code>","text":"<p>This generate a integer from low (inclusive) to high (exclusive)</p> <pre><code>np.random.randint(1,100)\n#61\nnp.random.randint(1,100,10)\n# array([39, 50, 72, 18,27, 59, 15, 97, 11, 14])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#seed","title":"<code>seed</code>","text":"<p>It is use to create a random state that can be reproducible, i means, the result will be the same everything we use the same seed</p> <pre><code>np.random.seed(42)\nnp.random.rand(4)\n# array([0.37454012, 0.95071431, 0.73199394, 0.59865848])\n\nnp.random.seed(42)\nnp.random.rand(4)\n# array([0.37454012, 0.95071431, 0.73199394, 0.59865848])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#array-attributes-and-methods","title":"Array Attributes and Methods","text":"<p>To explain the attributes and methods we need to create a vector and matrix</p> <pre><code>arr = np.arange(25)\n# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n#       17, 18, 19, 20, 21, 22, 23, 24])\nranarr = np.random.randint(0,50,10)\n# array([38, 18, 22, 10, 10, 23, 35, 39, 23,  2])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#reshape-reshape","title":"Reshape - <code>reshape</code>","text":"<p>Return the same data of the vector or matrix but in a different shape</p> <pre><code>arr.reshape(5,5)\n# array([[ 0,  1,  2,  3,  4],\n#       [ 5,  6,  7,  8,  9],\n#       [10, 11, 12, 13, 14],\n#       [15, 16, 17, 18, 19],\n#       [20, 21, 22, 23, 24]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#max-min-argmax-argmin-maxminargmaxargmin","title":"max, min, argmax, argmin - <code>max</code>,<code>min</code>,<code>argmax</code>,<code>argmin</code>","text":"<p>Let start with <code>ranarr</code> <pre><code>ranarr = np.random.randint(0,50,10)\n# array([38, 18, 22, 10, 10, 23, 35, 39, 23,  2])\n</code></pre></p> <p>the maximum number in the array <pre><code>ranarr.max()\n# 39\n</code></pre> the index of this maximum number <pre><code>ranarr.argmax()\n# 7\n</code></pre> now for the minimum <pre><code>ranarr.min()\n# 2\nranarr.argmin()\n# 9\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#shape-shape","title":"Shape - <code>shape</code>","text":"<p>shape is an attribute and not a method</p> <pre><code># Vector\narr.shape\n#(25,)\n\n# Notice the two sets of brackets\narr.reshape(1,25)\n# array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n#        16, 17, 18, 19, 20, 21, 22, 23, 24]])\n\narr.reshape(1,25).shape\n# (1, 25)\n\narr.reshape(25,1)\n#array([[ 0],\n#       [ 1],\n#       [ 2],\n#       [ 3],\n#       [ 4],\n#       [ 5],\n#       [ 6],\n#       [ 7],\n#       [ 8],\n#       [ 9],\n#       [10],\n#       [11],\n#       [12],\n#       [13],\n#       [14],\n#       [15],\n#       [16],\n#       [17],\n#       [18],\n#       [19],\n#       [20],\n#       [21],\n#       [22],\n#       [23],\n#       [24]])\n\narr.reshape(25,1).shape\n# (25, 1)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#dtype","title":"<code>dtype</code>","text":"<p>In order to know the data type of the object</p> <pre><code>arr.dtype\n# dtype('int32')\n\narr2 = np.array([1.2, 3.4, 5.6])\narr2.dtype\n\n#dtype('float64')\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#numpy-indexing-and-selection","title":"Numpy Indexing and Selection","text":"<p>To select an item in the array we can use a syntax similar to the one use to pick up elements of a list, in the following example we will:</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#1-create-an-array","title":"1. Create an array","text":"<pre><code>import numpy as np#create an array\narr = np.arange(0,11)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#2-select-a-single-element","title":"2. Select a single element","text":"<pre><code>arr[7]\n#7\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#3-select-a-range-of-elements","title":"3. Select a range of elements","text":"<pre><code>arr[0:5]\n#array([0,1,2,3,4])\\\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#broadcasting","title":"Broadcasting","text":"<p>The differences between Python list and Numpy arrays can be simplify as; python list you can only reassign values to part of the list with the same size and shape, if you want to replace X number of elements you will need to pass in a new x element list, this is explain better with an example.</p> <p>In the example: 1. Create an array. 2. Slice part of the array. 3. We will change the sliced array. 4. Display the original array.</p> <p>Notice the elements of the array, that belong to the sliced array, were change. This is because the data is not copied in order to avoid memory problems.</p> <p></p> <pre><code>import numpy as np\n#create an array\narr= np.arange(0,10)\n#slice the array\nsliced_arr = arr[0:6]\n#change the values in the slice\nsliced_arr[:] = 100\n# print the original array to show the changes\nprint(arr)\n#array([100, 100, 100, 100, 100, 100,   6,   7,   8,   9])\n</code></pre> <p>If you want to make a copy of the array you can use <code>copy()</code> like <code>new_arr = arr.copy()</code></p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#indexing-2d-arrays-matrices","title":"Indexing 2d arrays (matrices)","text":"<p>The syntax will be arr_2d[row][col] or arr_2d[row,col], the latter the most common used.</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#1-create-the-matrix","title":"1. Create the matrix","text":"<pre><code>import numpy as np\narr_2d = np.arange([5,10,15],[20,25,30],[35,40,45])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#2-select-base-in-index","title":"2. Select base in index","text":"<p>a row <pre><code>arr_2d[1]\n#array([20,25,30])\n</code></pre> a value <pre><code>arr_2d[1][0]\n#20\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#3-select-a-matrix-inside-the-matrix","title":"3. select a matrix inside the matrix","text":"<pre><code>arr_2d[:2,1:] # top right corner\n# array([25,30],\n#       [40,45])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#conditional-selection","title":"Conditional selection","text":"<p>We can select elements of the arrays base in a condition, let say we want to know what elements are bigger than 4.</p> <p><pre><code>import numpy as np\narr = np.arange(0,10)\nprint(arr&gt;4)\n#array([False, False, False, False,  True,  True,  True,  True,  True,\n#        True])\n</code></pre> we can save this array of boolean values and use it to slice or select elements of the original array base in this condition</p> <pre><code>bool_arr = arr&gt;4\narr[bool_arr]\n# array([ 5,  6,  7,  8,  9, 10])\narr[arr&gt;4]\n# array([ 5,  6,  7,  8,  9, 10])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#operations","title":"Operations","text":""},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#arithmetic","title":"Arithmetic","text":"<p>Numpy allows operation including matrix with matrix and scalar with matrix.</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#1-addition-multiplication-subtraction-and-division","title":"1. Addition, multiplication , subtraction and division","text":"<pre><code>import numpy as np\n\narr = np.arange(0,10)\narr\n#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n#addition\narr + arr\n#array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n\n# Multiplication\narr * arr\n#array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])\n\n#Subtraction\narr - arr\n#array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n#Division\narr/arr\n#array([nan,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])\n</code></pre> <p>numpy will notify us when the division is not possible or the division by 0</p> <pre><code>1/arr\n#array([       inf, 1.        , 0.5       , 0.33333333, 0.25      ,\n#       0.2       , 0.16666667, 0.14285714, 0.125     , 0.11111111])\n</code></pre> <p>and we have the exponential as well</p> <pre><code>arr**3\n#array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#universal-array-function","title":"Universal Array function","text":"<p>With Numpy we can perform different function to the matrices, square root, logarithmic and geometric functions.</p> <pre><code> np.sqrt(arr)\n #array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n #      2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\n# Exponential (e^)\nnp.exp(arr)\n#array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n#       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n#       2.98095799e+03, 8.10308393e+03])\n\n#Trigonometric\nnp.sin(arr)\n#array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,\n#       -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849])\n\n#Natural Logarithm\nnp.log(arr)\n#array([      -inf, 0.        , 0.69314718, 1.09861229, 1.38629436,\n#       1.60943791, 1.79175947, 1.94591015, 2.07944154, 2.19722458])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#statistics","title":"Statistics","text":"<p>as an example of the statistic function that can be perform in numpy we have sum, mean and max</p> <pre><code>arr = np.arange(0,10)\n\narr.sum()\n#45\n\narr.mean()\n#4.5\n\narr.max()\n#9\n</code></pre> <p>and other examples of statistic functions</p> <p></p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy%20Crash%20course.html#axis-logic","title":"Axis Logic","text":"<p>Wen we work with 2D arrays (Matrix) the array term , axis 0 is the vertical axis ( rows ), and axis 1 is the horizontal ( columns )</p> <p>so let do sum on the 0 axis, basically sum all the elements vertically, it make sense after the code.</p> <pre><code>arr_2d = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\narr_2d\n#array([[ 1,  2,  3,  4],\n#       [ 5,  6,  7,  8],\n#       [ 9, 10, 11, 12]])\n\narr_2d.sum(axis=0)\n#array([15, 18, 21, 24])\n#[(1+5+9), (2+6+10), (3+7+11), (4+8+12)]\n\narr_2d.sum(axis=1)\n#array([10, 26, 42])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html","title":"Numpy Basic (Part 1)","text":"<p>This session will cover numpy, this is specially useful since the images are going to be represented as numpy arrays most of the time, here the numpy documentation</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#the-basics","title":"The Basics","text":"<p>NumPy\u2019s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers. In NumPy dimensions are called axes.</p> <p>For example, the coordinates of a point in 3D space <code>[1, 2, 1]</code>has one axis. That axis has 3 elements in it, so we say it has a length of 3. In the example pictured below, the array has 2 axes.</p> <pre><code>[[1.,0.,0.],\n[0.,1.,2.]]\n</code></pre> <p>The NumPy's class is call <code>ndarray</code> also know by its alias <code>array</code>, but make sure not confuse it with the Standard Python library class <code>array.array</code>, in this case the NumPy is <code>numpy.array</code>, the Standard python <code>array</code> only handles one-dimensional arrays and offers less functionality.</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#the-important-objects","title":"the Important objects","text":"<p>The most importation objects for the <code>ndarray</code>:</p> <ul> <li><code>ndarray.ndim</code>: the number of axis (dimensions) of the array</li> <li><code>ndarray.shape</code>: this is a tuple that indicate the size of the array in each direction, for example, shape of (m,n) will be a matrix with n rows and m columns, the length of the tuple is the numbers of axis, <code>ndim</code>.</li> <li><code>ndarray.size</code>: total number of elements in the array, this is equal to the product of the elements in the shape.</li> <li><code>ndarray.dtype</code>: an object describing the type of the elements in the array.</li> <li><code>ndarray.itemsize</code>: the size in bytes of each element on the array.</li> <li><code>ndarray.data</code>:the buffer that contain the actual elements of the array, normally is not use since we access the elements using the indexing facilities</li> </ul>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#the-code-example","title":"The code Example","text":"<pre><code>import numpy as np\na = np.arange(15).reshape(3,5)\n# a\n# array([ [0,  1,  2,  3,  4,],\n#         [5,  6,  7,  8,  9],\n#         [10, 11, 12, 13, 14]])\n\na.shape\n# (3,5)\na,ndim\n# 2\na.dtype.name\n#'int64'\na.itemsize\n#8\na.size\n#15\ntype(a)\n# &lt;type 'numpy.ndarray'&gt;\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#numpy-arrays","title":"Numpy arrays","text":""},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#the-creation-or-a-numpy-array","title":"The Creation or a NumPy array","text":"<p>you can create a NumPy array with a simple python list</p> <pre><code>import numpy as np\n\na = np.array([1,2,3])\n# array([1, 2, 3])\na.dtype\n#dtype('int64')\n</code></pre> <p>A frequent error consists in calling array with multiple numeric arguments, rather than providing a single list of numbers as an argument.</p> <p><pre><code>a = np.array(1,2,3,4)    # WRONG\na = np.array([1,2,3,4])  # RIGHT\n</code></pre> now, if you use <code>np.array</code> in a sequence of sequence, example <code>[(1,2,3), (4,5,6)]</code> you will get a two-dimension array</p> <pre><code>b = np.array([(1,2,3),(4,5,6)])\n# array([[1, 2, 3],\n#       [4, 5, 6]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#creation-functions","title":"Creation Functions","text":"<p>Often, the elements of an array are originally unknown, but its size is known. Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#create-array-of-zeros-with-zeros-function","title":"Create array of zeros with <code>zeros</code> Function","text":"<p>The function <code>zeros</code> will create an array and will be use as placeholder <code>0.</code> this means a float 0, at least you specify the <code>dtype</code></p> <p>Syntax</p> <pre><code>np.zeros(shape=(n,m), dtype= np type)\n</code></pre> <p>shape is optional, instead we can use just the tuple (n,m), and the dtype if it is not specify it will use the float.</p> <pre><code>c = np.zeros(shape=(3,5))\n#array([[0., 0., 0., 0., 0.],\n#       [0., 0., 0., 0., 0.],\n#       [0., 0., 0., 0., 0.]])\n\nd = np.zeros((3,5))\n#array([[0., 0., 0., 0., 0.],\n#       [0., 0., 0., 0., 0.],\n#       [0., 0., 0., 0., 0.]])\ntype(d)\n# numpy.ndarray\n\ne = np.zeros((3,5), dtype=np.int16)\n#array([[0, 0, 0, 0, 0],\n#       [0, 0, 0, 0, 0],\n#       [0, 0, 0, 0, 0]], dtype=int16)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#create-array-of-ones-with-ones-function","title":"Create array of ones with <code>ones</code> Function","text":"<p>The function <code>ones</code> in the same way that <code>zeros</code> will create and array but instead of use <code>0</code> it will use the placeholder <code>1</code>.</p> <p>Syntax</p> <pre><code>np.ones(shape=(n,m), dtype= np type)\n</code></pre> <p>shape is optional, instead we can use just the tuple (n,m), and the dtype if it is not specify it will use the float.</p> <pre><code>c = np.ones(shape=(3,5))\n#array([[1., 1., 1., 1., 1.],\n#       [1., 1., 1., 1., 1.],\n#       [1., 1., 1., 1., 1.]])\n\ne = np.ones((3,5), dtype=np.int16)\n#array([[1, 1, 1, 1, 1],\n#       [1, 1, 1, 1, 1],\n#       [1, 1, 1, 1, 1]], dtype=int16)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#create-array-of-random-numbers-with-empty-function","title":"Create array of random numbers with <code>empty</code> Function","text":"<p>This will create an array with random numbers, the numbers will depend of the state of the memory in that moment</p> <pre><code>np.empty( (2,3) )\n#array([[  3.73603959e-262,   6.02658058e-154,   6.55490914e-260],\n#       [  5.30498948e-313,   3.14673309e-307,   1.00000000e+000]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#create-sequence-of-numbers-arangelinspace","title":"Create sequence of numbers (<code>arange</code>,<code>linspace</code>)","text":"<p>To create sequences of numbers, NumPy provides a function analogous to <code>range</code> that returns arrays instead of lists.</p> <p>Syntax <pre><code>np.arange(start, end, step)\n</code></pre> Example:</p> <pre><code>np.arange( 10, 30, 5 )\n# array([10, 15, 20, 25])\nnp.arange( 0, 2, 0.3 )                 # it accepts float arguments\n# array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])\n</code></pre> <p>Although when we want to be completely sure of the number o elements that we want we can use <code>linspace</code></p> <p>Syntax <pre><code>np.linspace(start, end, number_of_elements)\n</code></pre> Example:</p> <pre><code>np.linspace( 0, 2, 9 )                 # 9 numbers from 0 to 2\n# array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#numpy-useful-methods-for-data-manipulation","title":"Numpy Useful methods for data manipulation","text":"<p>Here will be a couple of operation that will be useful in some cases</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#random-numbers","title":"Random numbers","text":"<p>To start the generation of random numbers we can start by creating a seed</p> <pre><code># Start making a seed\nnp.random.seed(101)\n</code></pre> <p>the <code>101</code> can be different in this case we use his to keep constant the numbers with the course followed</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#get-the-number","title":"Get the number","text":"<p>Syntax</p> <pre><code>np.random.randint(starting, ending, step)\n</code></pre> <pre><code>np.random.seed(101)\narr =  np.random.randint(0, 100,10)\n#array([95, 11, 81, 70, 63, 87, 75,  9, 77, 40])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#find-the-max-and-min-and-it-location","title":"Find the <code>max</code> and <code>min</code> and it location","text":"<p>It is always useful to find the <code>min</code> and the <code>max</code> values of the array and where they are, their index</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#find-max-value-and-its-index","title":"Find <code>max</code> value and its index","text":"<p>assuming the array is:</p> <pre><code>arr =  np.random.randint(0, 100,10)\n# array([95, 11, 81, 70, 63, 87, 75,  9, 77, 40])\n</code></pre> <p>then</p> <p>Syntax</p> <pre><code>arr.max()\n# 95\narr.argmax()\n# 0\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#find-the-min-and-its-index","title":"Find the <code>min</code>  and its index","text":"<p>assuming the array is:</p> <pre><code>arr =  np.random.randint(0, 100,10)\n# array([95, 11, 81, 70, 63, 87, 75,  9, 77, 40])\n</code></pre> <p>then</p> <p>Syntax</p> <pre><code>arr.min()\n# 9\narr.argmin()\n# 7\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_1.html#average-value","title":"Average value","text":"<p>assuming the array is:</p> <pre><code>arr =  np.random.randint(0, 100,10)\n# array([95, 11, 81, 70, 63, 87, 75,  9, 77, 40])\n</code></pre> <p>then</p> <p>Syntax</p> <pre><code>arr.mean()\n# 60.8\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html","title":"Numpy Basic (Part 2)","text":""},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#shape-and-reshape","title":"Shape and Reshape","text":"<p>Something really useful is be able to change or create an array in a specific shape, we will start with the same array that before:</p> <pre><code>np.random.seed(101)\narr =  np.random.randint(0, 100,10)\n#array([95, 11, 81, 70, 63, 87, 75,  9, 77, 40])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#find-the-shape","title":"Find the shape","text":"<p>now we can use <code>shape</code> to find what shape our array has in this moment</p> <p><pre><code>arr.shape\n# (10,)\n</code></pre> this mean that is an array, or, better a vector with 10 items.</p>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#how-to-reshape","title":"How to <code>reshape</code>","text":"<p>we can use the function <code>reshape</code> to change the previous vector</p> <p>Syntax</p> <pre><code>arr.reshape((2,5))\n# array([[95, 11, 81, 70, 63],\n#       [87, 75,  9, 77, 40]])\n</code></pre> <p>we need to reshape to values that make sense, in this case 2 rows and 5 columns does, because \\(2*5 = 10\\)</p> <p>if i try to create a shape that is not correct i will get a <code>valueError</code> exception, like here</p> <pre><code> arr.reshape((2,10))\n ---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-35-ef8eb80c29ad&gt; in &lt;module&gt;()\n----&gt; 1 arr.reshape((2,10))\n\nValueError: cannot reshape array of size 10 into shape (2,10)\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#indexing","title":"Indexing","text":"<p>it is important to be able to get back rows, columns or slice of the matrix we create, in this case we enter to scope of indexing.</p> <pre><code>mat = np.arange(0,100).reshape(10,10)\n# array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n#       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n#       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n#       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n#       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n#       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n#       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n#       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n#       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n#       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#find-a-single-digit-in-the-matrix","title":"Find a single digit in the matrix","text":"<p>let say that i want to get the element in <code>row = 0</code> and <code>col = 1</code></p> <p>Syntax</p> <pre><code>mat[row,col]\n# 1\n</code></pre> <p>we don't need to define the variables 'row' and 'col' we can simply</p> <pre><code>mat[5,5]\n# 55\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Numpy/Numpy_Basic_part_2.html#how-to-slice-a-matrix","title":"How to slice a matrix","text":"<p>let say that we want</p> <p>1. Get all the values in a row or column we want to get all the values in the row 1</p> <p>Syntax</p> <pre><code>mat[:,1]\n# array([ 1, 11, 21, 31, 41, 51, 61, 71, 81, 91])\n</code></pre> <p>now for the column</p> <pre><code>mat[1,:]\n# array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n</code></pre> <p>we can change the shape of the new array</p> <pre><code>mat[1,:].reshape(10,1)\n# array([[10],\n#       [11],\n#       [12],\n#       [13],\n#       [14],\n#       [15],\n#       [16],\n#       [17],\n#       [18],\n#       [19]])\n</code></pre> <p>2. Get all the values from n rows and m columns We want to get back part of the original matrix</p> <pre><code>mat[:3,:3]\n# array([[ 0,  1,  2],\n#       [10, 11, 12],\n#       [20, 21, 22]])\n</code></pre> <p>we can replace part of the matrix as well</p> <pre><code>mat[0:4,0:4] = 0\n#array([[ 0,  0,  0,  0,  4,  5,  6,  7,  8,  9],\n#       [ 0,  0,  0,  0, 14, 15, 16, 17, 18, 19],\n#       [ 0,  0,  0,  0, 24, 25, 26, 27, 28, 29],\n#       [ 0,  0,  0,  0, 34, 35, 36, 37, 38, 39],\n#       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n#       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n#       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n#       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n#       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n#       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/ONVIF_python_zeep_async/introduction.html","title":"<code>python-onvif-zeep-async</code>","text":"<p>ONVIF Client Implementation in Python 3 (using https://github.com/mvantellingen/python-zeep instead of suds as SOAP client)</p> <ol> <li>Pypi page</li> <li>Github page</li> </ol>"},{"location":"Python/Libraries_and_Modules/ONVIF_python_zeep_async/introduction.html#how-i-use-it-how-i-find-it","title":"How I use it/ How I find it","text":"<p>I was looking for libraries in python that can help me to get the video streaming form CCTV cameras, i run into a version of this project using non asynchronous \"architecture\"/\"implementation\" but i found this async version more suitable for what i want to achieve in my personal project <code>Project_Horus</code>.</p> <p>The following example, will log in in a camera (we need to input the IP address) and get the profiles and save it in a .txt.</p> <pre><code>from onvif import ONVIFCamera\nimport asyncio\n\nasync def fetch_profiles(cam_ip, cam_port, cam_user, cam_password ):\n    mycam = ONVIFCamera(cam_ip, cam_port, cam_user, cam_password)\n    await mycam.update_xaddrs()\n    media_service = mycam.create_media_service()\n    profiles = await media_service.GetProfiles()\n    print(f'profile {profiles[0].Name} :\\n {profiles[0]}')\n    with open('profile.txt','w') as file:\n        file.write(str(profiles))\n    # token = profiles[0].token\n    # print(token)\n    return await mycam.close()\n\ncam_ip = input(\"Camera IP: \")\ncam_port = input(\"Camera cam_port: \") or 80\ncam_user = input(\"Camera User: \") or 'admin'\ncam_password = input(\"Camera password: \") or '123456'\nasyncio.run(fetch_profiles(cam_ip, cam_port, cam_user, cam_password))\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html","title":"PIP notes","text":"<p><code>pip</code> is a package installer python, it can be use to install packages fro the python packages index.</p> <ol> <li>Documentation</li> <li>PyPI</li> <li>GitHub</li> </ol>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#check-if-pip-is-install","title":"Check if <code>pip</code> is install","text":"<p>pip is already installed in python 2 and python 3, but we can double check the version in the following way:</p> <pre><code>python -m pip --version\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#installation","title":"Installation","text":"<p>There are two was to install packages using <code>pip</code> one will be for machines with access to a network and other without access</p> <pre><code>python -m pip &lt;pip arguments&gt;\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#with-access-to-a-network","title":"With access to a network","text":"<p>We can install packages like:</p> <pre><code>python -m pip install SomePackage\n</code></pre> <p>Normally we will be able to use:</p> <pre><code>pip install SomePackage\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#without-access-to-network","title":"Without access to network","text":"<p>We can download the packages from PyPI or obtained elsewhere, and installed in the following way:</p> <pre><code>python -m pip install SomePackages-1.0-py2.py3-none-any.whl\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#installation-of-specific-version-of-the-packages","title":"Installation of specific version of the packages","text":"<pre><code>python -m pip install SomePackage            # latest version\npython -m pip install SomePackage==1.0.4     # specific version\npython -m pip install 'SomePackage&gt;=1.0.4'     # minimum version\n</code></pre>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#get-packages-installed","title":"Get packages installed","text":"<p>to get a list of packages and versions install in a machine we can use</p> <pre><code>pip freeze  &gt; requirements.txt\n</code></pre> <p>with the previous command we will get all the packages and save it in the document requirements.txt file</p>"},{"location":"Python/Libraries_and_Modules/PIP/pip_notes.html#uninstall-packages","title":"Uninstall packages","text":"<p>For uninstall packages: <pre><code>pip uninstall SomePackages\n</code></pre> to uninstall all the packages</p> <p><pre><code>pip freeze | xargs pip uninstall -y\n</code></pre> or</p> <p><pre><code>pip uninstall -r requirements.txt\n</code></pre> it will ask if we want to uninstall one by one. to uninstall everything</p> <pre><code>pip uninstall -r requirements.txt -y\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html","title":"Pandas Crash course","text":"<p>For the review or refresh of pandas we will follow the structure bellow:</p> <ul> <li>Series.</li> <li>DataFrames.</li> <li>Missing Data.</li> <li>GroupBy.</li> <li>Operations.</li> <li>Data Input and Output.</li> </ul>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#series","title":"Series","text":"<p>Series are similar to Numpy arrays ( they are build on top of Numpy arrays)  and the difference is that SEris can have axis labels, that means that can be located not just by numbers but by labels, and they can hold much more than just numbers, they can hold any type of python object.</p> <p>We are going to create Series in different ways:</p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#creating-a-series","title":"Creating a series.","text":"<p>First we will need to import numpy and pandas</p> <pre><code>import numpy as np\nimport pandas as pd\n</code></pre> <p>now we are going to create a list, a numpy array and a dictionary that later will be use to create the series</p> <pre><code>lables = ['a','b','c']\nmy_list = [10,20,30]\narr = np.array([10,20,30])\nd = {'a':10,'b':20,'c':30}\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#1-using-list","title":"1. Using List","text":"<p><pre><code>pd.Series(data=mylist)\n#0    10\n#1    20\n#2    30\n#dtype: int64\n</code></pre> The about is a Series that use just number as labels, now let use the labels defined before with the list <code>lables</code></p> <p><pre><code>pd.Series(data=my_list,index=labels)\n#a    10\n#b    20\n#c    30\n#dtype: int64\n</code></pre> now a shorter way</p> <pre><code>pd.Series(my_list,labels)\n#a    10\n#b    20\n#c    30\n#dtype: int64\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#2-using-numpy-arrays","title":"2. Using NumPy arrays","text":"<p><pre><code>pd.Series(arr)\n#0    10\n#1    20\n#2    30\n#dtype: int64\n</code></pre> now with the labels</p> <pre><code>pd.Series(arr,labels)\n#a    10\n#b    20\n#c    30\n#dtype: int64\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#3-using-dictionaries","title":"3. Using Dictionaries","text":"<pre><code>pd.Series(d)\n#a    10\n#b    20\n#c    30\n#dtype: int64\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#using-index","title":"Using Index","text":"<p>Pandas use the index name or numbers which allow to access the information ( the index are the rows).</p> <pre><code>sales_Q1 = pd.Series(data=[250,450,200,150], index=['USA','China','India','Brazil'])\nSales_Q1\n#USA       250\n#China     450\n#India     200\n#Brazil    150\n#dtype: int64\n\nsales_Q2 = pd.Series([260,500,210,100],index = ['USA', 'China','India', 'Japan'])\nsales_Q2\n#USA      260\n#China    500\n#India    210\n#Japan    100\n#dtype: int64\n\nsales_Q1['USA']\n#250\n\nsales_Q1 + sales_Q2\n#Brazil      NaN\n#China     950.0\n#India     410.0\n#Japan       NaN\n#USA       510.0\n#dtype: float64\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#dataframes","title":"DataFrames","text":"<p>Datafarames are inspire in R programming they look like a group of series put together to share the same index.</p> <p><pre><code>import pandas as pd\nimport numpy as np\nfrom numpy.random import randint\n\n# define columns and index to use later in the DataFrame\ncolumns = ['W','X','Y','Z'] # four columns\nindex = ['A','B','C','D','E'] # five rows\n\nnp.random.seed(42)\ndata = randint(-100,100,(5,4))\n# randint(low,high, size)\n\nprint(data)\n#array([[  2,  79,  -8, -86],\n#       [  6, -29,  88, -80],\n#       [  2,  21, -26, -13],\n#       [ 16,  -1,   3,  51],\n#       [ 30,  49, -48, -99]])\n\ndf = pd.DataFrame(data,index,columns)\nprint(df)\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#selection-and-indexing","title":"Selection and indexing","text":"<p>We can select and grad columns or parts of the DataFrame</p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#columns","title":"Columns","text":"<p>To grap a single column</p> <pre><code>print(df['W'])\n#A     2\n#B     6\n#C     2\n#D    16\n#E    30\n#Name: W, dtype: int64\n</code></pre> <p>Grap multiple Columns</p> <pre><code>print[['W','Z']]\n#   W   Z\n# A 2   -86\n# B 6   -80\n# C 2   -13\n# D 16  51\n# E 30  -99\n</code></pre> <p>If we use the method <code>type()</code> we can see that the columns are just pandas series</p> <pre><code>print(type(df['W']))\n# pandas.core.series.Series\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#create-a-new-column","title":"Create a new column","text":"<pre><code>df[\"new\"] = df['W'] + df['Y']\nprint(df['new'])\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#removing-columns","title":"Removing Columns","text":"<p>for the removing of a column is important to understand that if it is not reassigned (df = de.drop()) the removal wont be save, see in the example:</p> <pre><code># axis=1 because its a column\nprint(df.drop('new',axis=1))\n#   W   X   Y   Z\n# A 2   79  -8  -86\n# B 6   -29 88  -80\n# C 2   21  -26 -13\n# D 16  -1  3   51\n# E 30  49  -48 -99\n\nprint(df)\n#   W   X   Y   Z   new\n# A 2   79  -8  -86 -6\n# B 6   -29 88  -80 94\n# C 2   21  -26 -13 -24\n# D 16  -1  3   51  19\n# E 30  49  -48 -99 -18\n\ndf = df.drop('new',axis=1)\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#working-with-rows","title":"Working with Rows","text":"<p>Now to select a row we will need to use a bit different approach, in this case we will need to use <code>df.loc[]</code> we use <code>loc</code> and the name or number of the row.</p> <pre><code>print(df.loc['A'])\n#W     2\n#X    79\n#Y    -8\n#Z   -86\n#Name: A, dtype: int64\n</code></pre> <p>The selection by numerical index will be</p> <pre><code>print(df.iloc[0])\n#W     2\n#X    79\n#Y    -8\n#Z   -86\n#Name: A, dtype: int32\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#multi-row-selection","title":"Multi-row selection","text":"<p>Similar with columns we can select multiple rows at the same time <pre><code>print(df.loc[['A'.'C']])\n#   W   X   Y   Z\n# A 2   79  -8  -86\n# C 2   21  -26 -13\n</code></pre></p> <p>now by numerical index</p> <p><pre><code>print(df.iloc[0:2])\n\n#    W   X   Y   Z\n# A  2   79  -8  -86\n# B  6  -29  88  -80\n</code></pre> Now we can select a subset of rows and columns</p> <pre><code>print(df.loc[['A','C'],['W','Y']])\n#    W   Y\n# A  2   -8\n# C  2   -26\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#removing-a-row","title":"Removing a row","text":"<p>To remove a row we use <code>drop()</code> but this time the parameter <code>axis=0</code>, and in the same way with columns, if this is not reassigned the removal wont take place.</p> <pre><code>print(df.drop('C',axis=0))\n#    W  X   Y   Z\n# A  2  79  -8  -86\n# B  6  -29 88  -80\n# D  16 -1  3   51\n# E  30 49  -48 -99\n\nprint(df)\n#    W  X   Y   Z\n# A  2  79  -8  -86\n# B  6  -29 88  -80\n# C  2  21  -26 -13\n# D  16 -1  3   51\n# E  30 49  -48 -99\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#select-a-specific-cell","title":"Select a specific cell","text":"<p>You can select a specific cell in the DataFrame, you can use the function <code>at()</code></p> <pre><code>df = pd.DataFrame([[0, 3, 4], [0, 5, 2], [20, 30, 40]],\n                  index=[1, 2, 3], columns=['P', 'Q', 'R'])\ndf.at[1, 'Q']\n# 3\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#conditional-selection","title":"Conditional Selection","text":"<p>Pandas allow the conditional selection similar to NumPy, for the examples of this we will use the DataFrame:</p> <p></p> <pre><code>print(df&gt;0)\n#       W       X       Y       Z\n# A  True    True    False   False\n# B  True    False   True    False\n# C  True    True    False   False\n# D  True    False   True    True\n# E  True    True    False   False\n\nprint(df[df&gt;0])\n#    W   X      Y    Z\n# A  2   79.0   NaN  NaN\n# B  6   NaN    88.0 NaN\n# C  2   21.0   NaN  NaN\n# D  16  NaN    3.0  51.0\n# E  30  49.0   NaN  NaN\n</code></pre> <p>More examples</p> <p><pre><code>print(df['X']&gt;0)\n#A     True\n#B    False\n#C     True\n#D    False\n#E     True\n#Name: X, dtype: bool\n\nprint(df[df['X']&gt;0])\n#   W   X   Y   Z\n#A  2   79  -8  -86\n#C  2   21  -26 -13\n#E  30  49  -48 -99\n\nprint(df[df['X']&gt;0]['Y'])\n#A    -8\n#C   -26\n#E   -48\n#Name: Y, dtype: int64\n\nprint(df[df['X']&gt;0][['Y','Z']])\n#    Y    Z\n#A  -8  -86\n#C  -26 -13\n#E  -48 -99\n</code></pre> If we want to use more than one conditional we can us binary operator like \"|\" or \"&amp;\". <pre><code>print(df[(df['W']&gt;0) &amp; (df['Y'] &gt; 1)])\n#   W   X   Y   Z\n#B  6   -29 88  -80\n#D  16  -1  3   51\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#more-about-index","title":"More about index","text":"<p>We can reset the index, this means change the index selected ( in this case the letters A to E) for the number (starting in 0), lit copy if this change is not reassigned it wont take place.</p> <p>Again we start with </p> <pre><code># Reset to default 0,1...n index\ndf.reset_index()\n\n#   index   W   X   Y   Z\n#0  A   2   79  -8  -86\n#1  B   6   -29 88  -80\n#2  C   2   21  -26 -13\n#3  D   16  -1  3   51\n#4  E   30  49  -48 -99\n</code></pre> <p>now we can create new index, in the following example we will create a new index starting from a string</p> <pre><code>newid = 'CA NY WY OR CO'.split()\ndf['states'] = newind\ndf = df.set_index('states')\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#summaries","title":"Summaries","text":"<p>THere are 3 methods we can use to get information about the data in the DataFrames they are:</p> <ul> <li><code>describe()</code> which will give a statistic description of the values</li> </ul> <pre><code>df.describe()\n</code></pre> <p></p> <ul> <li> <p><code>info()</code> overall description of what is in the table <pre><code>df.info()\n</code></pre> </p> </li> <li> <p><code>dtypes()</code> to display the data type</p> </li> </ul> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#missing-data","title":"Missing Data","text":"<p>There are some methods in POandas that allow you to handle missing data in the DataFrames or series,</p> <p>First lets create a new DataFrame with missing data</p> <pre><code>import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,np,nan,4],\n                    'B':[5,np,nan,np,nan,8],\n                    'C':[10,20,30,40]})\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#removing-missing-data","title":"Removing missing data","text":"<p>To remove horizontally</p> <pre><code>df.dropna()\n#   A   B   C\n#0  1.0 5.0 10\n#3  4.0 8.0 40\n</code></pre> <p>To do it Vertically</p> <pre><code>df.dropna(axis=1)\n#    C\n# 0 10\n# 1 20\n# 2 30\n# 3 40\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#threshold","title":"Threshold","text":"<p>We can set a threshold for each column or row, if the row or column has equal or more of specific number of non-NaN</p> <pre><code>df.dropna(thresh=2)\n#   A   B   C\n#0  1.0 5.0 10\n#1  2.0 NaN 20\n#3  4.0 8.0 40\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#filling-missing-data","title":"Filling missing data","text":"<p>Now to fill the empty values we can use <code>fillna(value=0)</code>  using as a argument for the parameter <code>value</code> either a string of an integer</p> <pre><code>df.fillna(value='FILL VALUE')\n\n#   A           B           C\n#0  1           5           10\n#1  2           FILL VALUE  20\n#2  FILL VALUE  FILL VALUE  30\n#3  4           8           40\n</code></pre> <pre><code>df['A'].fillna(value=0)\n\n#0    1.0\n#1    2.0\n#2    0.0\n#3    4.0\n#Name: A, dtype: float64\n</code></pre> <pre><code>df['A'].fillna(df['A'].mean())\n\n#0    1.000000\n#1    2.000000\n#2    2.333333\n#3    4.000000\n#Name: A, dtype: float64\n</code></pre>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#groupby","title":"Groupby","text":"<p>the Method <code>groupby()</code> allow me to group different rows and call other functions ( aggregate functions)</p> <p>first we will need to choose the column that we are going to use as a categorical column, which is the same that we are going to use with <code>groupby</code>, Second choose the aggregated function (e.g. max,min, mean, std, etc...)</p> <p></p> <p>let make and example, we are going to read a file called \"Universities.csv\"  and use the column 'Year' to group.</p> <pre><code>import pandas as pd\n\n#read the csv file\ndf = pd.read_csv('Universities.cvs')\n\n#now we can show the first rows\ndf.head()\n</code></pre> <p></p> <pre><code>#now group by Year\ndf.groupby('Year')\n#&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000220102EC048&gt;\n# the groupby will be a DataFrame\n\n# we can use the the aggregated\ndf.groupby('Year'),mean()\n</code></pre> <p></p> <p>As well as the <code>groupby</code> the result of <code>df.groupby('Year').mean()</code> will be a DataFrame as well.</p> <p>we can sort the results of <code>mean()</code></p> <p><pre><code>df.groupby('Year').mean().sort_index(ascending=False)\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#groupby-by-multiple-columns","title":"Groupby by multiple columns","text":"<p>We can make the grouping by multiple columns we just need to</p> <pre><code>df.groupby(['Year','Sector']).mean()\n</code></pre> <p></p> <p>Now we are going to use <code>describe()</code> which will give use information about this dataFrame, but we will combine it with <code>transpose()</code> so we can change the columns for the rows and display it in a more readable way ( we are going to use just <code>groupby</code> with \"Year\")</p> <pre><code>df.groupby('Year').describe().transpose()\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#operations","title":"Operations","text":"<p>There are a set of operation that are useful but don't fall in a specific category</p> <p>for the next operation we will create the following DataFrame:</p> <pre><code>import pandas as pd\n\ndf_one = pd.DataFrame({'k1':['A','A','B','B','C','C'],'col1':[100,200,300,300,400,500],'col2':['NY','CA','WA','WA','AK','NV']})\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#unique-values","title":"Unique Values","text":"<ul> <li> <p>Get the unique values. <pre><code>df_one['col2'].unique()\n# array(['NY', 'CA', 'WA', 'AK', 'NV'], dtype=object)\n</code></pre></p> </li> <li> <p>Get number of unique values. <pre><code>df_one['col2'].nunique()\n# 5\n</code></pre></p> </li> <li> <p>Count and Get the number of times a value is repeated <pre><code>df_one['col2'].value_counts()\n# WA    2\n# CA    1\n# NV    1\n# NY    1\n# AK    1\n</code></pre></p> </li> <li> <p>To remove duplicated rows</p> </li> </ul> <pre><code>df_one['col2'].drop_duplicates()\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#create-new-columns-with-operations-and-functions","title":"Create new Columns with Operations and Functions","text":"<pre><code>def_one['New col'] = df_one['col1'] * 10\n</code></pre> <p>or we can use the method <code>apply()</code> and pass a customize function as a parameter</p> <p><pre><code>def grab_first_letter(state):\n    return state[0]\n\n\ndf_one['first letter'] = df_one['col2'].apply(grab_first_letter)\n</code></pre> </p> <p>Be aware that we are not making a call of the function <code>grab_first_letter()</code>, there is not \"()\".</p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#mapping","title":"Mapping","text":"<p>now we are going to mapped some value to other lets check the column \"k1\"</p> <p></p> <pre><code>df_one['k1'].map({'A':1,'B':2,'C':3})\n</code></pre> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#sorting-min-max-columns-and-index","title":"Sorting, min, max, columns and index","text":"<p>to get the max, min or their positions we use:</p> <ul> <li>To find max value: <code>df_one['col1'].max()</code></li> <li>The index of the max value: <code>df_one['col1'].idxmax()</code></li> <li>To find min value: <code>df_one['col1'].min()</code></li> <li>The index of the min value: <code>df_one['col1'].idxmin()</code></li> <li>Now for sorting: <code>df_one.sort_values('col2')</code></li> </ul>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#concatenate-dataframes-and-dummy-variables","title":"Concatenate DataFrames and Dummy variables","text":"<p>to concatenate we need to be careful in which axis we want to work with,</p> <p><pre><code>features = pd.DataFrame({'A':[100,200,300,400,500],\n                        'B':[12,13,14,15,16]})\npredictions = pd.DataFrame({'pred':[0,1,1,0,1]})\n\npd.concat([features,predictions])\n</code></pre> </p> <p><pre><code>pd.concat([features,predictions],axis=1)\n</code></pre> </p> <p>for the dummy variables, first, we are going to change the name of the columns</p> <p><pre><code>df_one.columns = ['C1','C2','C3','C4','C5','C6']\n</code></pre> later we can make the dummy variable</p> <p><pre><code>pd.get_dummies(df_one['C1'])\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#data-input-and-data-output","title":"Data input and Data Output","text":"<p>for more detailed information of the different type of files and please visit the pandas documentation</p> <p></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#csv","title":"CSV","text":"<p>To be able to read this type of files we need two additional libraries:</p> <ul> <li>xlrd ( <code>pip install xlrd</code> ).</li> <li>openpyxl ( <code>pip install openpyxl</code>).</li> </ul> <p>for reading CSV: <pre><code>df = pd.read_csv('example.csv')\n</code></pre></p> <p>for the Output <pre><code>df = df.to_csv('example.csv', index = False)\n</code></pre></p>"},{"location":"Python/Libraries_and_Modules/Pandas/Pandas%20Crash%20course.html#html","title":"HTML","text":"<p>Pandas is able to read table tabs of the HTML (if the firewall allow pandas to read the HTML) but it is necessary to add the following libraries:</p> <ul> <li>lxml ( <code>pip install lxml</code>).</li> <li>html5lib (<code>pip install html5lib</code>).</li> <li>beautifulsoap4 ( <code>pip install beautifulsoap4</code>).</li> </ul> <p>for the input, the <code>read_html</code> function willl read tables of the webpage and return a list of DataFrame object:</p> <p><pre><code>tables = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')\ntables[0].head()\n</code></pre> </p>"},{"location":"Python/Libraries_and_Modules/Pillow/introduction.html","title":"Pillow - Python Imaging Library (Fork)","text":"<p>Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors. As of 2019, Pillow development is supported by Tidelift.</p> <ol> <li>Pypi page</li> <li>Documentation</li> </ol> <p>Form the librtary description we know that this is a library that give image processing capabilities to python</p>"},{"location":"Python/Libraries_and_Modules/Pillow/introduction.html#how-i-use-it-how-i-find-it","title":"How I use it/ How I find it","text":"<p>I was working in my personal project <code>Project_Horus</code> and i was getting the thumbnail and snaposhot of a CCTV camera using other libraries, but this snapshot and the thumbnail where given in bytes, so i need it something to render and display the image so:</p> <ol> <li>I imported the library <pre><code>from PIL import Image\nimport io\n</code></pre></li> <li>open and read the bytes, <code>snapshot</code> is a variable holding the bytes <pre><code>    #read the bytes\n    im = Image.open(io.BytesIO(snapshot))\n    #display the image\n    # im.show()\n    #display the thumbnail\n    thumbnail_size = 128,128\n    im.thumbnail(thumbnail_size)\n    im.show()\n</code></pre></li> </ol>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html","title":"Introduction","text":"<p>This is a library that help us to generate a QR Code</p> <ol> <li>pypi</li> <li>Github</li> </ol>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#installation","title":"Installation","text":"<pre><code>pip install qrcode\n</code></pre>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#usage","title":"Usage","text":"<p>There are several ways to generate the QR codes:</p> <ul> <li>Command Line.</li> <li>Basic Use.</li> <li>Advance Use.</li> </ul>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#commands","title":"Commands","text":"<p>The simple way to generate the code will be using command line.</p> <pre><code>qr \"some text\" &gt; test.png\n</code></pre>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#basic-use","title":"Basic Use","text":"<p>we can use a short code <code>make</code>:</p> <pre><code>import qrcode\nimg = qrcode.make(\"some data here\")\n</code></pre>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#advance-use","title":"Advance Use","text":"<p>We can we more control if we use the <code>QRCode</code> Class</p> <pre><code>import qrcode\n\nqr = qrcode.QRCode(\n    version=1,\n    error_correction=qrcode.constants.ERROR_CORRECT_L,\n    box_size=10,\n    border=4,)\nqr.add_data('same data')\nqr.make(fit=True)\n\nimg = qr.make_image(fill_color=\"black\", back_color=\"white\")\n</code></pre> <p>Now from the code we have:</p> <ol> <li><code>version</code> it is a integer from 1 to 40 it control the sizes smallest been the version 1, or a matrix \\(21X21\\), we can set it to <code>None</code> and later use <code>fit</code> parameter to determine the size automatically.</li> <li><code>fill_color</code> and <code>back_color</code> it can change the color of the background and the painting color of the QR.</li> <li><code>box_size</code> controls how many pixels each \"box\" of the QR Code is.</li> <li><code>border</code> Controls how many boxes thick the border should be ( default 4, which is the maximum).</li> </ol>"},{"location":"Python/Libraries_and_Modules/QRcode/introduction.html#error_correction","title":"<code>error_correction</code>","text":"<p>This parameter control the error correction use for the QR Code, it has four possible constant values:</p> <ul> <li><code>ERROR_CORRECT_L</code>: 7% or less errors can be corrected.</li> <li><code>ERROR_CORRECT_M</code>: (default) 15% or less errors can be corrected.</li> <li><code>ERROR_CORRECT_Q</code>: 25% or less error can be corrected.</li> <li><code>ERROR_CORRECT_H</code>: 30% or less error can be corrected.</li> </ul>"},{"location":"Python/Libraries_and_Modules/WS_Discovery/introduction.html","title":"WS-Dicovery in Python","text":"<p>This is WS-Discovery implementation for Python 3. It allows to both discover services and publish discoverable services. For Python 2 support, use the latest 1.x version of this package.</p> <ol> <li>Pypi page</li> <li>Documentation</li> </ol>"},{"location":"Python/Libraries_and_Modules/WS_Discovery/introduction.html#how-i-use-it-how-i-find-it","title":"How I use it/ How I find it","text":"<p>I wanted to understand some of the implementation of <code>python-onvif-zeep-async</code> so I decided to take a look to the libraries use on it, and this was one of those libraries</p> <pre><code>from wsdiscovery.discovery import ThreadedWSDiscovery as WSDiscovery\nfrom wsdiscovery import Scope\nimport re\n\n\nbase = 'onvif://www.onvif.org/'\nprofile_scope = base + 'Profile/'\n\n\nscope1 = Scope(base) # to be use later to filter just those with ONVIF services\nscope2 = Scope(profile_scope)\n\ndef fetch_devices(services):\n    for service in services:\n    #filter those devices that dont have ONVIF service\n    # print(f'\\nAddress:\\n{service.getXAddrs()[0]}\\n')\n        ipaddress = re.search('(\\d+|\\.)+', str(service.getXAddrs()[0])).group(0)\n        print(f'\\nIP Address: {ipaddress}')\n        for scope in service.getScopes():\n            #Scope methods getMatchBy, getQuotedValue, getValue\n            print(scope.getValue())\n    print(f'\\nnumber of devices detected: {len(services)}')\n\nwsd = WSDiscovery()\nwsd.start()\n# devices_services = wsd.searchServices(scopes=[scope1])\ndevices_services = wsd.searchServices()\n\nfetch_devices(devices_services)\n\nwsd.stop()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/WS_Discovery/introduction.html#searchservice","title":"searchService()","text":"<p>I remark this method since it will affect the divices we will find, there are 3 attibutes</p> <ul> <li>types.</li> <li>scopes.</li> <li>timeout.</li> </ul> <p>from the documentation:</p> <p><code>searchServices(types=None, scopes=None, address=None, port=None, timeout=3)</code> search for services given the TYPES and SCOPES in a given TIMEOUT</p> <p>Example:</p> <pre><code>def fetch_devices():\n    wsd = WSDiscovery()\n    scope1 = Scope(\"onvif://www.onvif.org/\")\n    ttype1 = QName(\"http://www.onvif.org/ver10/device/wsdl\", \"Device\")\n\n    wsd.start()\n    services = wsd.searchServices(types=[ttype1], scopes=[scope1], timeout=6)\n    ipaddresses = []\n    for service in services:\n    #filter those devices that dont have ONVIF service\n        ipaddress = re.search('(\\d+|\\.)+', str(service.getXAddrs()[0])).group(0)\n        ipaddresses.append(ipaddress)\n        print(display(service.getScopes()))\n        print('----------END')\n\n    print(f'\\nnumber of devices detected: {len(services)}')\n    wsd.stop()\n    return ipaddresses\n</code></pre>"},{"location":"Python/Libraries_and_Modules/netifaces/introduction.html","title":"Netifaces","text":"<p>The authors or maintainers alastair and opalmer made an excellent description so i will just copy it.</p> <p>It\u2019s been annoying me for some time that there\u2019s no easy way to get the address(es) of the machine\u2019s network interfaces from Python. There is a good reason for this difficulty, which is that it is virtually impossible to do so in a portable manner. However, it seems to me that there should be a package you can easy_install that will take care of working out the details of doing so on the machine you\u2019re using, then you can get on with writing Python code without concerning yourself with the nitty gritty of system-dependent low-level networking APIs. This package attempts to solve that problem.</p> <ol> <li>Pypi page</li> <li>Github page</li> </ol>"},{"location":"Python/Libraries_and_Modules/netifaces/introduction.html#how-i-use-it-how-i-find-it","title":"How I use it/ How I find it","text":"<p>I wanted to find a way to get the IP address of the computer running the python code, the idea was use it as part of my personal project <code>Project_horus</code> as part of the discovery devices.</p> <pre><code>from netifaces import interfaces, ifaddresses, AF_INET\n\n# AF_INET - Address Family - Normal internet address\n\n#Todo:\n\"\"\"set logging system for this script\"\"\"\nprint(f'\\n Interfaces: {interfaces()} \\n------------&gt;\\n')\n\ndef extract_scope_(interface):\n    \"\"\" it willl filter the Ethernet/internet interface\n    and return just the IP address \"\"\"\n    if AF_INET in ifaddresses(interface):\n        print(f'interface {interface} : {ifaddresses(interface)[AF_INET]}')\n        ip_address = ifaddresses(interface)[AF_INET][0]['addr']\n        return ip_address\n\n\nscope = None\n\n# extrat the IP \"scope\" of the IP range of the Ethernet interface\nif not scope : ips = list(map(extract_scope_,interfaces()))\n\n# Extract the first two numbers of the address\nscope = ['.'.join(ip.split('.')[:2]) for ip in ips if ip]\n\nprint(f'\\n------------&gt;\\nscope {scope}') #the scope,\n# ['127.0', '192.168']\n</code></pre>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html","title":"pyTelegramBot","text":"<ol> <li>Pypi page</li> <li>GitHub Repository</li> <li>Official Documentation</li> </ol>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#installation","title":"Installation","text":"<pre><code>pip install pyTelegramBotAPI\n</code></pre>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#synchronous-and-asynchronous-bot","title":"Synchronous and Asynchronous Bot.","text":"<p>The API provide two type of bots a synchronous and Asynchronous both with small difference on the implementation</p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#synchronous-bot-example","title":"Synchronous bot example","text":"<pre><code>import telebot\n\nAPI_TOKEN = '&lt;api_token&gt;'\n\nbot = telebot.TeleBot(API_TOKEN)\n\n\n# Handle '/start' and '/help'\n@bot.message_handler(commands=['help', 'start'])\ndef send_welcome(message):\n    bot.reply_to(message, \"\"\"\\\nHi there, I am EchoBot.\nI am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\\\n\"\"\")\n\n\n# Handle all other messages with content_type 'text' (content_types defaults to ['text'])\n@bot.message_handler(func=lambda message: True)\ndef echo_message(message):\n    bot.reply_to(message, message.text)\n\n\nbot.infinity_polling()\n</code></pre>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#asynchronous-bot-example","title":"Asynchronous bot example","text":"<pre><code>from telebot.async_telebot import AsyncTeleBot\nbot = AsyncTeleBot('TOKEN')\n\n# Handle '/start' and '/help'\n@bot.message_handler(commands=['help', 'start'])\nasync def send_welcome(message):\n    await bot.reply_to(message, \"\"\"\\\nHi there, I am EchoBot.\nI am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\\\n\"\"\")\n\n# Handle all other messages with content_type 'text' (content_types defaults to ['text'])\n@bot.message_handler(func=lambda message: True)\nasync def echo_message(message):\n    await bot.reply_to(message, message.text)\n\n\nimport asyncio\nasyncio.run(bot.polling())\n</code></pre>  Notice that they call different classes synchronous calls telebot.Telebot meanwhile Asynchronous calls telebot.async_telebot.AsyncTelebot. They also use different polling methods `bot.infinity_polling()` versus `bot.polling()`"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#the-steps-to-create-the-bot-will-be","title":"The steps to create the bot will be:","text":"<ol> <li>Search for BotFather \ud83d\udc74\ud83c\udffd.</li> <li>BotFather will provide some instructions. From those instructions, I need to use /newbot.</li> <li>I give a name to the bot <code>no_my_first</code>.</li> <li>I give a username to the bot with the postfix bot, <code>no_my_first_bot</code>.</li> <li>After assigning the username BotFather will provide the Bot API key.</li> </ol> <p>The response of the Bot father will be something like this:</p> <p></p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#up-running-and-listening","title":"Up, running, and listening.","text":"<p>The package pyTelegramBotAPI encapsulates the telegram API, with this package I can send messages and documents and several ways to parse or listen to incoming messages.</p> <ol> <li>Create an instance of the TeleBot() using the API key.</li> <li>Define Message handler.</li> <li>Keep the bot running.</li> </ol>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#create-an-instance-of-the-telebot-using-the-api-key","title":"Create an instance of the TeleBot() using the API key.","text":"<p>First, I need to install the module. <pre><code>pip install pyTelegramBotAPI\n</code></pre> Second, I need to create an instance of the TeleBot class.</p> <p></p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#define-message-handler","title":"Define Message handler.","text":"<p>To create a message handler, I will use the decorator <code>@bot.message_handler()</code>. The function decorated with this handler can have any name.</p> <p>The only requirement is a single parameter, the message itself.</p>  All handlers are tested in the order in which they are declared \u2014 PyTelegramBotAPI Documentation"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#handler-with-commands","title":"Handler with commands","text":"<p>This handler will handle or react to messages that include a command. Commands are words prefixed with / the list of commands handled by a handler is defined in the decorator as a list after the parameter commands this without /.</p> <p> </p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#handler-with-function","title":"Handler with function","text":"<p>This handler will handle the message if the result of a function is true.</p> <p>Here is an example of a function that will return always true, so the handler will echo each message that is not a command.</p> <p> </p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#handler-with-a-function-that-expects-a-keyword","title":"\u26a0\ufe0f Handler with a Function that expects a keyword","text":"<p>I can create a different function without a decorator that will track the presence of a specific word.</p> <p> </p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#keep-the-bot-running","title":"Keep the bot running","text":"<p>To keep the bot running I need to add one command to the source file <code>bot.infinity_polling()</code>.</p> <p></p>"},{"location":"Python/Libraries_and_Modules/pyTelegramBot/introduction.html#advance-bot-replies","title":"Advance Bot replies.","text":"<p>The documentation provides extensive information about the telegram API, but what I\u2019m interested in are the types and something callReply markup, this will allow me to provide different types of responses like audio, videos, and keyboard options.</p> <p>Each function <code>send_xyz</code> contains an argument <code>reply_markup</code>. This argument receives an instance of <code>ReplyKeyboardMarkup</code>, <code>ReplyKeyboardRemove</code> or <code>ForceReply</code>.</p> <p>Here is an example of what I what to do.</p> <p></p> <p>The Bot will reply with a custom keyword</p> <ol> <li>Create an instance of <code>ReplyKeyboardMarkup</code>. The instance will have 2 rows <code>row_width=2</code>.</li> <li>Create the Buttons <code>types.KeyboardButton(\u201coption\u201d)</code>.</li> <li>Add to the markup object.</li> <li>Add the keyboard to the message.</li> </ol> <p> </p>"},{"location":"Python/Projects/random_password_generator.html","title":"Random password generator - Project Davinci","text":"<p>The password generator project, Code Davinci is a random generator base in built-in library <code>secrets</code>.</p> <p>The idea is to generate random password following the good practice: * Lower and Upper case Characters. * Digits. * Punctuation marks.</p> <p>by default it will generate a 8 character password but in the future version it will allow generate longer passwords.</p> <p>The frist version will ask for the length of the password by terminal/console and give back the random generated password, future version will have a GUI. <pre><code>import string\nimport secrets\n\ndef pass_generator(size: int) -&gt; str:\n    alphabet = string.ascii_letters + string.digits + string.punctuation\n    while True:\n        password = ''.join(secrets.choice(alphabet) for i in range(size))\n        if (any(c.islower() for c in password) and\n            any(c.isupper() for c in password) and\n            sum(c.isdigit() for c in password) )&gt;= size//2:\n            break\n    return password\n\nif __name__ == \"__main__\":\n    while True:\n        try:\n            size = int(input(\"input password size: \")) or 8\n            print(f'\\n* Password:\\n{pass_generator(size)}')\n            break\n        except ValueError:\n            print(\"wrong value, please input a numeric value\")\n</code></pre></p> <p>Project git: https://github.com/CubeVic/Project_Davinci</p>"},{"location":"Python/Python_Basics/Data%20structures.html","title":"Data Structures","text":"<p>Related with data structures</p>"},{"location":"Python/Python_Basics/Data%20structures.html#data-structures","title":"Data Structures","text":"<p>Data structures are containers that organize and group data types together in different ways.</p>"},{"location":"Python/Python_Basics/Data%20structures.html#mutability-and-order","title":"Mutability and Order","text":"<p>Mutability is about whether or not we can change an object once it has been created. If an object (like a list or string) can be changed (like a list can), then it is called mutable. However, if an object cannot be changed with creating a completely new object (like strings), then the object is considered immutable.</p> <p>Order is about whether the position of an element in the object can be used to access the element. Both strings and lists are ordered. We can use the order to access parts of a list and string.</p>"},{"location":"Python/Python_Basics/Data%20structures.html#list","title":"List","text":"<p>A list is one of the most common and basic data structures in Python. List are Mutable and ordinated data structures</p> <pre><code>list_of_random_things = [1, 3.4, 'a string', True]\n</code></pre>"},{"location":"Python/Python_Basics/Data%20structures.html#tuples","title":"Tuples","text":"<p>Tuples are a data type for immutable ordered sequences of elements. They are often used to store related pieces of information, tuples are immutable - you can't add and remove items from tuples, or sort them in place</p> <p><pre><code>location = (13.4125, 103.866667)\n</code></pre> Tuples can also be used to assign multiple variables in a compact way. In the example bellow, a tuple called dimensions is created, next, the content of this tuple is unpack, in three different variables, this is called tuple unpacking.</p> <p><pre><code>dimensions = 52, 40, 100\nlength, width, height = dimensions\n</code></pre> The parentheses are optional when defining tuples, and programmers frequently omit them if parentheses don't clarify the code.</p>"},{"location":"Python/Python_Basics/Data%20structures.html#set","title":"Set","text":"<p>A set is a data type for mutable unordered collections of unique elements. One application of a set is to quickly remove duplicates from a list, it is an unordered data type, there fore if the method <code>.pop()</code> is use there is no way to know exactly with element will be eliminated.</p> <p><pre><code>numbers = [1, 2, 6, 3, 1, 1, 6]\nunique_nums = set(numbers)\nprint(unique_nums)\n</code></pre> It will output:</p> <pre><code>{1, 2, 3, 6}\n</code></pre>"},{"location":"Python/Python_Basics/Data%20structures.html#dictionaries","title":"Dictionaries","text":"<p>A dictionary is a mutable data type that stores mappings of unique keys to values.</p> <pre><code>elements = {\"hydrogen\": 1, \"helium\": 2, \"carbon\": 6}\n</code></pre> <p>Dictionaries can have keys of any immutable type, like integers or tuples, not just strings. It's not even necessary for every key to have the same type.</p> <p>If you expect lookups to sometimes fail, <code>get</code> might be a better tool than normal square bracket lookups because errors can crash your program.</p> <p><pre><code>print(\"carbon\" in elements)\nprint(elements.get(\"dilithium\"))\n</code></pre> this would output:</p> <pre><code>True\nNone\n</code></pre> <p>So, to recap</p> Data Structure Ordered Mutable Constructor Example List Yes Yes <code>[]</code> or <code>list()</code> <code>[5.7,4,'yesy',5.7]</code> Tuple Yes No <code>()</code> or <code>tuple()</code> <code>(5.7,4,'yes',5.7)</code> Set No Yes <code>{}</code><sup>1</sup> or <code>set()</code> <code>{5.7,4,'yes'}</code> Dictionary No No<sup>2</sup> <code>{}</code> or <code>dict()</code> <code>{'jun':75.'jul':89}</code> <ol> <li> <p>You can use curly braces to define a set like this: <code>{1, 2, 3}</code>. However, if you leave the curly braces empty like this: <code>{}</code> Python will instead create an empty dictionary. So to create an empty set, use <code>set()</code>.\u00a0\u21a9</p> </li> <li> <p>A dictionary itself is mutable, but each of its individual keys must be immutable.\u00a0\u21a9</p> </li> </ol>"},{"location":"Python/Python_Basics/Databases_with_Python.html","title":"Data bases with Python","text":""},{"location":"Python/Python_Basics/Databases_with_Python.html#import-connect-and-cursor","title":"Import, Connect and Cursor","text":"<p>In these examples we are going to use SQLite as database.</p> <p>To start to use SQLite with python we will need to import the library 'sqlite3', once imported we can start using it, first we will establish a connection with the database using <code>sqlite3.connect()</code>, later, to start the navigation we will need a cursor, for that we use  <code>.cursor()</code>.</p> <pre><code>import sqlite3\n\nconn = sqlite3.connect('name database')\ncur = conn.cursor()\n</code></pre> <p>This will be an example:</p> <pre><code>import sqlite3\n\nconn = sqlite3.connect('rosterdb.sqlite')\ncur = conn.cursor()\n</code></pre>  where `rosterdb.sqlite` is the name of the database"},{"location":"Python/Python_Basics/Databases_with_Python.html#executescript-and-execute","title":"<code>executescript()</code> and <code>execute()</code>","text":"<p>There are two ways to execute SQL statements in python. * <code>executescript()</code>:allow me to execute several SQL statement art the same time, if this statement finish with \";\". * <code>execute()</code>: this will be limited to one SQL statement.</p>"},{"location":"Python/Python_Basics/Databases_with_Python.html#executescript-example","title":"<code>executescript()</code> example","text":"<p>In the following code we will execute several SQL statement</p> <ol> <li>we start with <code>executescript()</code>, we are going to use \"\\'\\'\\'\".</li> </ol> <pre><code>import sqlite3\n\nconn = sqlite3.connect('rosterdb.sqlite')\ncur = conn.cursor()\n\ncur.executescript(''' SQL statements''')\n</code></pre> <ol> <li>We will delete any existing tables with the names \"User\", \"Member\", \"Course\"</li> </ol> <p><pre><code>import sqlite3\n\nconn = sqlite3.connect('rosterdb.sqlite')\ncur = conn.cursor()\n\ncur.executescript('''\nDROP TABLE IF EXISTS User;\nDROP TABLE IF EXISTS Member;\nDROP TABLE IF EXISTS Course;\n''')\n</code></pre> 3. Now we will create 3 tables; \"User\", \"Course\", \"Member\". Member table contain a primary key composed of take two parameters, this is a way to link to the other 2 tables and create the many-to-many relationship</p> <pre><code>import sqlite3\n\nconn = sqlite3.connect('rosterdb.sqlite')\ncur = conn.cursor()\n\n# Do some setup\ncur.executescript('''\nDROP TABLE IF EXISTS User;\nDROP TABLE IF EXISTS Member;\nDROP TABLE IF EXISTS Course;\n\nCREATE TABLE User (\n    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    name   TEXT UNIQUE\n);\n\nCREATE TABLE Course (\n    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    title  TEXT UNIQUE\n);\n\nCREATE TABLE Member (\n    user_id     INTEGER,\n    course_id   INTEGER,\n    role        INTEGER,\n    PRIMARY KEY (user_id, course_id)\n)\n''')\n</code></pre>"},{"location":"Python/Python_Basics/Databases_with_Python.html#insert-ignore-replace-and-select","title":"<code>INSERT</code>, <code>IGNORE</code>, <code>REPLACE</code> and <code>SELECT</code>","text":"<p>In previous steps we create the schema of the database, now we need to populate this database with information, in this case we are going to extract information from a JSON file and use it to feed the dataset.</p>"},{"location":"Python/Python_Basics/Databases_with_Python.html#getting-the-data-from-json","title":"Getting the data from JSON","text":"<p>First we need to import json</p> <pre><code>import json\n[...]\n</code></pre> <p>second we need to get the information of a JSON file, in this case we are going to use one of the JSON file examples from the book \"Python for everyone\".</p> <pre><code>[...]\nfname = input('Enter file name: ')\nif len(fname) &lt; 1:\n    fname = 'roster_data_sample.json'\n\n# [\n#   [ \"Charley\", \"si110\", 1 ],\n#   [ \"Mea\", \"si110\", 0 ],\n\nstr_data = open(fname).read()\njson_data = json.loads(str_data)\n[...]\n</code></pre> <p>Now all the information is in the variable <code>json_data</code> (a list) we will need though this list</p> <pre><code>[...]\nfname = input('Enter file name: ')\nif len(fname) &lt; 1:\n    fname = 'roster_data_sample.json'\n\n# [\n#   [ \"Charley\", \"si110\", 1 ],\n#   [ \"Mea\", \"si110\", 0 ],\n\nstr_data = open(fname).read()\njson_data = json.loads(str_data)\nprint(type(json_data))\n\nfor entry in json_data:\n\n    name = entry[0]\n    title = entry[1]\n    role = entry[2]\n\n    print((name, title, role))\n</code></pre>"},{"location":"Python/Python_Basics/Databases_with_Python.html#insert-or-ignore","title":"<code>INSERT OR IGNORE</code>","text":"<p>Now we are goin to insert the information in the different tables, for that we will use <code>INSERT</code> and we will add <code>IGNORE</code> to avoid those cases when a error appears.</p> <pre><code>   cur.execute('''INSERT OR IGNORE INTO User (name)\n        VALUES ( ? )''', ( name, ) )\n</code></pre> <p>in the previous statement <code>execute()</code> will execute an <code>INSERT</code> instruction to the \"User\" table, to the column \"name\", the \"?\" is a placeholder and the \"<code>(name,)</code>\" is a tuple that indicate that the information on the variable \"name\" is going to be place in the \"?\", and this information will be inserted in the table \"User\".</p> <p>Bellow the example of the other statement, the only remark will be the usage of <code>REPLACE</code> which will replace the value of what ever is in that column(s).</p> <pre><code>    cur.execute('''INSERT OR IGNORE INTO User (name)\n        VALUES ( ? )''', ( name, ) )\n\n\n    cur.execute('''INSERT OR IGNORE INTO Course (title)\n        VALUES ( ? )''', ( title, ) )\n\n\n    cur.execute('''INSERT OR REPLACE INTO Member\n        (user_id, course_id, role) VALUES ( ?, ?, ? )''',\n        ( user_id, course_id, role ) )\n</code></pre>"},{"location":"Python/Python_Basics/Databases_with_Python.html#select-and-fetchone0","title":"<code>SELECT</code> and <code>fetchone()[0]</code>","text":"<p>now we are going to select one of the records in the database and store the first row, for this we will execute the <code>SELECT</code> and later use <code>fetchone[0]</code> to store the first record</p> <p><pre><code>    cur.execute('SELECT id FROM User WHERE name = ? ', (name, ))\n    user_id = cur.fetchone()[0]\n</code></pre> we use \"[0]\" to be sure that we will get just the first record ( <code>fetchone()</code> will get back just one record, to get more you can use <code>fetchall()</code>)</p>"},{"location":"Python/Python_Basics/Databases_with_Python.html#commit","title":"<code>commit</code>","text":"<p>Finally, to commit this changes or this addition to the database we can use the function <code>commit()</code>, this will commit the changes to the database and wait until is done, that is one of the reason in some case the commit is done after several changes and not after each change, since this will make the execution of the script slower.</p> <pre><code>    conn.commit()\n</code></pre>"},{"location":"Python/Python_Basics/Databases_with_Python.html#the-full-script","title":"the full script","text":"<pre><code>import json\nimport sqlite3\n\nconn = sqlite3.connect('rosterdb.sqlite')\ncur = conn.cursor()\n\n# Do some setup\ncur.executescript('''\nDROP TABLE IF EXISTS User;\nDROP TABLE IF EXISTS Member;\nDROP TABLE IF EXISTS Course;\n\nCREATE TABLE User (\n    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    name   TEXT UNIQUE\n);\n\nCREATE TABLE Course (\n    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    title  TEXT UNIQUE\n);\n\nCREATE TABLE Member (\n    user_id     INTEGER,\n    course_id   INTEGER,\n    role        INTEGER,\n    PRIMARY KEY (user_id, course_id)\n)\n''')\n\nfname = input('Enter file name: ')\nif len(fname) &lt; 1:\n    fname = 'roster_data_sample.json'\n\n# [\n#   [ \"Charley\", \"si110\", 1 ],\n#   [ \"Mea\", \"si110\", 0 ],\n\nstr_data = open(fname).read()\njson_data = json.loads(str_data)\nprint(type(json_data))\n\nfor entry in json_data:\n\n    name = entry[0]\n    title = entry[1]\n    role = entry[2]\n\n    print((name, title, role))\n\n    cur.execute('''INSERT OR IGNORE INTO User (name)\n        VALUES ( ? )''', ( name, ) )\n    cur.execute('SELECT id FROM User WHERE name = ? ', (name, ))\n    user_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR IGNORE INTO Course (title)\n        VALUES ( ? )''', ( title, ) )\n    cur.execute('SELECT id FROM Course WHERE title = ? ', (title, ))\n    course_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR REPLACE INTO Member\n        (user_id, course_id, role) VALUES ( ?, ?, ? )''',\n        ( user_id, course_id, role ) )\n\n    conn.commit()\n</code></pre> <p>and an example of the JSON file</p> <pre><code>[\n  [\n    \"Alekzander\",\n    \"si110\",\n    1\n  ],\n  [\n    \"Tione\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Samy\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Alicia\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Kruz\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Dillan\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Badr\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Murry\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Ruslan\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Aliesha\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Gracielynn\",\n    \"si110\",\n    0\n  ],\n  [\n    \"Markus\",\n    \"si110\",\n    0\n  ]\n ]\n</code></pre>"},{"location":"Python/Python_Basics/Error%20and%20Exceptions.html","title":"Error and Exceptions","text":""},{"location":"Python/Python_Basics/Error%20and%20Exceptions.html#error-and-exceptions","title":"Error and Exceptions","text":"<ul> <li> <p>Syntax errors occur when Python can\u2019t interpret our code, since we didn\u2019t follow the correct syntax for Python. These are errors you\u2019re likely to get when you make a typo, or you\u2019re first starting to learn Python.</p> </li> <li> <p>Exceptions occur when unexpected things happen during execution of a program, even if the code is syntactically correct. There are different types of built-in exceptions in Python, and you can see which exception is thrown in the error message.</p> </li> </ul>"},{"location":"Python/Python_Basics/Error%20and%20Exceptions.html#try-statement","title":"<code>try</code> statement","text":"<p>We can use <code>try</code> statement to catch exceptions and define how to handle it, the <code>try</code>  statement has for parts:</p> <ul> <li><code>try</code>: this is the only mandatory clause in a <code>try</code> statement. this is the first block python will run (and is where we suspect can be and error).</li> <li><code>except</code>: if Python runs into an exception while running the <code>try</code> block, it will jump to the <code>except</code> block that handle the exception ( they are different type of exception that i will mention down).</li> <li><code>else</code>: if Python runs into no exception while running the <code>try</code> block, it will run the code in this block after running the <code>try</code>.</li> <li><code>finally</code>: before Python leave the <code>try</code> block, it will run the code in the <code>finally</code> block.</li> </ul> <p>an example of the simple <code>try</code> will be:</p> <pre><code>while True:\n    try:\n        x = int(input(\"Enter a number: \"))\n        break\n    except:\n        print(\"Please enter a number\")\n    finally:\n        print(\"Attempt input\")\n</code></pre> <p>so, in the previous code if the user enter other value that a valid <code>int</code> the <code>except</code> block will be run and after that the code in <code>finally</code></p> <p>now, if the user try to stop the execution using the <code>ctrl + c</code> in the terminal the <code>except</code>  block will be run, to avoid this we can select specific exceptions to be capture.</p>"},{"location":"Python/Python_Basics/Error%20and%20Exceptions.html#specifying-exceptions","title":"Specifying Exceptions","text":"<p>the exception to handle can be specify in the code, for example:</p> <pre><code>try:\n    # some code\nexcept valueError:\n    #some code\n</code></pre> <p>Now, in this case the <code>except</code> block will catch the exception <code>ValueErrror</code> but not other exception. We can catch the exception <code>KeyboardInterrupt</code> at the same time ( this apply to other exception not this two)</p> <pre><code>try:\n    # some code\nexcept (ValueError, KeyboardInterrupt):\n    # some code\n</code></pre> <p>in the previous case the exception are going to be handle in the same way, but if we required different response to a different exception, it can be done in the following way:</p> <pre><code>try:\n    #some code\nexcept ValueError:\n    #some code\nexcept KeyboardInterrupt:\n    # some code\n</code></pre>"},{"location":"Python/Python_Basics/Error%20and%20Exceptions.html#accessing-error-messages","title":"Accessing Error Messages","text":"<p>Previously we saw how to handle the error, basically how to avoid the program crash when a error appears, but we don't get information about the error, but, there is a way to display this errors, and it is as follow:</p> <pre><code>try:\n    # some code\nexcept ZeroDivisionError as e:\n    #some code\n    print(\"ZeroDivisionErro occurred: {}\".format(e))\n</code></pre> <p>this would print something like this:</p> <pre><code>ZeroDivisionError occurred: integer division or modulo by zero\n</code></pre> <p>so in that way you can handle errors, preventing the program for crashing and at the same time get information about the error.</p> <p>In those case where there are not specific errors to handle, you can use a general form to access to those messages:</p> <pre><code>try:\n    #some code\nexcept Exception as e:\n    #some code\n    print(\"Exception occurred: {} \".format(e))\n</code></pre> <p>for more information about exception check this link</p>"},{"location":"Python/Python_Basics/Generator%20and%20Iterator.html","title":"Generator and Iterators","text":""},{"location":"Python/Python_Basics/Generator%20and%20Iterator.html#iterators-and-generators","title":"Iterators And Generators","text":"<p>Iterables are objects that can return one of their elements at a time, such as a list. Many of the built-in functions we\u2019ve used so far, like 'enumerate,' return an iterator.</p> <p>An iterator is an object that represents a stream of data. This is different from a list, which is also an iterable, but is not an iterator because it is not a stream of data.</p> <p>Generators are a simple way to create iterators using functions. You can also define iterators using classes, here documentation about it</p> <p>Here is an example of a generator function called my_range, which produces an iterator that is a stream of numbers from 0 to (x - 1).</p> <pre><code>def my_range(x):\n    i = 0\n    while i &lt; x:\n        yield i\n        i += 1\n</code></pre> <p>Notice that instead of using the return keyword, it uses yield. This allows the function to return values one at a time, and start where it left off each time it\u2019s called. This yield keyword is what differentiates a generator from a typical function.</p> <p>we can use  the for loop to iterate over the iterator.</p> <pre><code>for x in my_range(5):\n    print(x)\n</code></pre> <p>outputs:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>Another example will be the implementation of the built-in function <code>enumerate</code></p> <p>having this:</p> <pre><code>lessons = [\"Why Python Programming\", \"Data Types and Operators\", \"Control Flow\", \"Functions\", \"Scripting\"]\n\nfor i, lesson in my_enumerate(lessons, 1):\n    print(\"Lesson {}: {}\".format(i, lesson))\n</code></pre> <p>We need to output:</p> <pre><code>Lesson 1: Why Python Programming\nLesson 2: Data Types and Operators\nLesson 3: Control Flow\nLesson 4: Functions\nLesson 5: Scripting\n</code></pre> <p>so the code will be:</p> <pre><code>lessons = [\"Why Python Programming\", \"Data Types and Operators\", \"Control Flow\", \"Functions\", \"Scripting\"]\n\ndef my_enumerate(iterable, start=0):\n    # Implement your generator function here\n   count = start\n   for item in iterable:\n        yield count, item\n        count += 1\n\nfor i, lesson in my_enumerate(lessons, 1):\n    print(\"Lesson {}: {}\".format(i, lesson))\n</code></pre>"},{"location":"Python/Python_Basics/Generator%20and%20Iterator.html#chunker","title":"Chunker","text":"<p>If you have an iterable that is too large to fit in memory in full (e.g., when dealing with large files), being able to take and use chunks of it at a time can be very valuable.</p> <p>Implement a generator function, <code>chunker</code>, that takes in an iterable and yields a chunk of a specified size at a time.</p> <pre><code>def chunker(iterable, size):\n    \"\"\"Yield successive chunks from iterable of length size.\"\"\"\n    for i in range(0, len(iterable), size):\n        yield iterable[i:i + size]\n\nfor chunk in chunker(range(25), 4):\n    print(list(chunk))\n</code></pre> <p>Output:</p> <pre><code>[0, 1, 2, 3]\n[4, 5, 6, 7]\n[8, 9, 10, 11]\n[12, 13, 14, 15]\n[16, 17, 18, 19]\n[20, 21, 22, 23]\n[24]\n</code></pre>"},{"location":"Python/Python_Basics/Generator%20and%20Iterator.html#why-generators","title":"Why Generators?","text":"<p>Generators are a lazy way to build iterables. They are useful when the fully realized list would not fit in memory, or when the cost to calculate each list element is high and you want to do it as late as possible. But they can only be iterated over once.</p>"},{"location":"Python/Python_Basics/Generator%20and%20Iterator.html#generator-expressions","title":"Generator Expressions","text":"<p>Here's a cool concept that combines generators and list comprehensions! You can actually create a generator in the same way you'd normally write a list comprehension, except with parentheses instead of square brackets. For example:</p> <pre><code>sq_list = [x**2 for x in range(10)]  # this produces a list of squares\n\nsq_iterator = (x**2 for x in range(10))  # this produces an iterator of squares\n</code></pre>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html","title":"Import Local Scripts","text":""},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#import-local-scripts","title":"Import Local Scripts","text":"<p>Import is helpful when working on bigger projects where you want to organize the code into multiple files  and reuse the code in those files, if the python script is in the same directory  of the current script we can use <code>import</code> follow by the name of the file , without the .py extension.</p> <pre><code>import useful_functions\n</code></pre> <p>to make it easier to use we can create aliases for the different script imported</p> <pre><code>import usefull_functions as uf\nuf.add_five([1,2,3,4])\n</code></pre> <p>now, in many occasions the is code in this scripts that is not useful, or not useful in a script that is calling them, so in this case we use the \"main\"  block</p>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#using-a-main-block","title":"Using a main block","text":"<p>To avoid running executable statements in a script when it's imported as a module in another script, include these lines in an <code>if __name__ == \"__main__\"</code>block. Or alternatively, include them in a function called main() and call this in the <code>if main</code> block.</p> <p>The code inside the block main will be execute just when we are running the script in specific and not when we are colling it as module in a script.</p> <pre><code># demo.py\n\nimport useful_functions as uf\n\nscores = [88, 92, 79, 93, 85]\n\nmean = uf.mean(scores)\ncurved = uf.add_five(scores)\n\nmean_c = uf.mean(curved)\n\nprint(\"Scores:\", scores)\nprint(\"Original Mean:\", mean, \" New Mean:\", mean_c)\n\nprint(__name__)\nprint(uf.__name__)\n</code></pre> <pre><code># useful_functions.py\n\ndef mean(num_list):\n    return sum(num_list) / len(num_list)\n\ndef add_five(num_list):\n    return [n + 5 for n in num_list]\n\ndef main():\n    print(\"Testing mean function\")\n    n_list = [34, 44, 23, 46, 12, 24]\n    correct_mean = 30.5\n    assert(mean(n_list) == correct_mean)\n\n    print(\"Testing add_five function\")\n    correct_list = [39, 49, 28, 51, 17, 29]\n    assert(add_five(n_list) == correct_list)\n\n    print(\"All tests passed!\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#most-common-use-python-standard-library-modules","title":"Most common use Python Standard Library modules","text":"<p>The Python Standard Library has a lot of modules, here are a selection of our Python Standard Library modules and why we use them!</p> <ul> <li><code>csv</code>: very convenient for reading and writing csv files</li> <li><code>collections</code>: useful extensions of the usual data types including OrderedDict, defaultdict and namedtuple</li> <li><code>random</code>: generates pseudo-random numbers, shuffles sequences randomly and chooses random items</li> <li><code>string</code>: more functions on strings. This module also contains useful collections of letters like string.digits (a string containing all characters which are valid digits).</li> <li><code>re</code>: pattern-matching in strings via regular expressions</li> <li><code>math</code>: some standard mathematical functions</li> <li><code>os</code>: interacting with operating systems</li> <li><code>os.path</code>: submodule of os for manipulating path names</li> <li><code>sys</code>: work directly with the Python interpreter</li> <li><code>json</code>: good for reading and writing json files (good for web work)</li> </ul>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#techniques-for-importing-modules","title":"Techniques for Importing Modules","text":"<p>there are some variants of <code>import</code> that are useful in different situation.</p> <ol> <li>To import an individual function or class:</li> </ol> <pre><code>from module_name import object_name\n</code></pre> <ol> <li>To import multiple individual object from a module:</li> </ol> <pre><code>from module_name import firts_object, second_object\n</code></pre> <ol> <li>To rename a module:</li> </ol> <pre><code>import module_name as new_name\n</code></pre> <ol> <li>To import an object from a module and rename it:</li> </ol> <p><pre><code>from module_name import object_name as new_name\n</code></pre> 5. To import everything</p> <pre><code>import module_name\n</code></pre>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#modules-packages-and-names","title":"Modules, packages, and Names","text":"<p>In order to manage the coder better, the modules of python are contain in package, this package is just a container for the modules, to call the sub-module from one package we use the dot notation:</p> <pre><code>import package_name.submodule_name\n</code></pre>"},{"location":"Python/Python_Basics/Import%20Local%20Scripts.html#third-party-packages","title":"Third-party packages","text":"<p>normally in a project you will find a document call requirements.txt which is a list that contain all the modules, packages and its version us in the specific script, the requirements.txt file looks like:</p> <p><pre><code>beautifulsoup4==4.5.1\nbs4==0.0.1\npytz==2016.7\nrequests==2.11.1\n</code></pre> to install all the packages on this file we can use pip, the command will be: <pre><code>pip install -r requirements.txt\n</code></pre> Some of the popular third-party packages are:</p> <ul> <li>IPython - A better interactive Python interpreter</li> <li>requests - Provides easy to use methods to make web requests. Useful for accessing web APIs.</li> <li>Flask - a lightweight framework for making web applications and APIs.</li> <li>Django - A more featureful framework for making web applications. Django is particularly good for designing complex, content heavy, web applications.</li> <li>Beautiful Soup - Used to parse HTML and extract information from it. Great for web scraping.</li> <li>pytest - extends Python's builtin assertions and unittest module.</li> <li>PyYAML - For reading and writing YAML files.</li> <li>NumPy - The fundamental package for scientific computing with Python. It contains among other things a powerful N-dimensional array object and useful linear algebra capabilities.</li> <li>pandas - A library containing high-performance, data structures and data analysis tools. In  particular, pandas provides dataframes!</li> <li>matplotlib - a 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.</li> <li>ggplot - Another 2D plotting library, based on R's ggplot2 library.</li> <li>Pillow - The Python Imaging Library adds image processing capabilities to your Python interpreter.</li> <li>pyglet - A cross-platform application framework intended for game development.</li> <li>Pygame - A set of Python modules designed for writing games.</li> <li>pytz - World Timezone Definitions for Python</li> </ul>"},{"location":"Python/Python_Basics/Reading%20and%20Writing%20Files.html","title":"Reading and Writing Files","text":""},{"location":"Python/Python_Basics/Reading%20and%20Writing%20Files.html#reading-and-writing-files","title":"Reading and Writing Files","text":"<p>Python has the ability to open, create, write and \"modify\" files, write and modify has some point to take in count that we will address later.</p>"},{"location":"Python/Python_Basics/Reading%20and%20Writing%20Files.html#reading-a-file","title":"Reading a File","text":"<p>To read a file you will need to:</p> <ol> <li>Open the file with the built-in function <code>open</code>, for this we will need a string with the location or path to this file, this will return an object file, this object is what Python use to interact with the document.</li> <li>There are optional parameters you can specify in the <code>open</code> function. One is the mode in which we open the file. if we use <code>r</code> ( which is the value by default) the mode will be read only.</li> <li>Use the <code>read</code> method to access the contents from the file object. this <code>read</code> method takes the text content in the file and puts into a string.</li> <li>(IMPORTANT) when finished with the file, use the <code>close</code> method to free up any system resources taken up by the file.</li> </ol> <p>the code will be something like:</p> <pre><code>f = open('my_path/my_file.txt', 'r')\nfile_data = f.read()\nf.close()\n</code></pre>"},{"location":"Python/Python_Basics/Reading%20and%20Writing%20Files.html#writing-to-file","title":"Writing to File","text":"<p>Now, to write we need to the open the file in write mode, but it is important to know that this will remove any previous content in the document.</p> <ol> <li>Open the file in writing ('w') mode. if the file does not exist, Python will create it for you, if the file exist all the content will be delete, if the intention is to add information to this document we will need to open it in append mode ('a').</li> <li>Use the write method to add text to the file.</li> <li>Close the file when finished.</li> </ol> <p>so the code will look like:</p> <pre><code>f = open('my_path/my_file.txt', 'w')\nf.write(\"Hello there!\")\nf.close()\n</code></pre> <p>Now it is important to close the files after use them, but in some case can be easy to forget to close the files, in that case we can use the block <code>with</code>, we will be able to access the file within this block and after we finish the file will be close automatically, example:</p> <pre><code>with open('my_path/my_file.txt','r') as f:\n    file_data = f.data()\n</code></pre> <p>so in this case the <code>as f</code>  is equal to <code>f = open('my_path/my_file.txt','r')</code> we can access the file using f within the indented <code>with</code>block and we don't need to use <code>f.close()</code>.</p>"},{"location":"Python/Python_Basics/Reading%20and%20Writing%20Files.html#about-reading-the-files","title":"About Reading the Files","text":"<p>By default the <code>read()</code> method has no argument and it gives back the content of the file, but, we can use integer argument, this will give back the number of characters pass as argument and leave the window open, this will be easy to understand in a example:</p> <p>let assume the document <code>camelot.txt</code> contain:</p> <pre><code>We're the knights of the round table\nWe dance whenever we're able\n</code></pre> <p>and we have the following code:</p> <pre><code>with open(\"camelot.txt\") as song:\n    print(song.read(2))\n    print(song.read(8))\n    print(song.read())\n</code></pre> <p>the output will be:</p> <pre><code>We\n're the\nknights of the round table\nWe dance whenever we're able\n</code></pre> <p>this will be really difficult to know in which position are we after each <code>read()</code> statement.</p> <p>Now, python is smart enough to understand that <code>\\n</code> which is a character that means newline means that the sentences finish and there is a new line. For this cases we can use <code>readline()</code>.</p> <p>although there is a way to loop over the lines of the file, this can be done with the syntax <code>for line in file</code> and using the <code>.strip()</code> we can remove the <code>\\n</code>.</p> <p><pre><code>camelot_lines = []\nwith open(\"camelot.txt\") as f:\n    for line in f:\n        camelot_lines.append(line.strip())\n\nprint(camelot_lines)\n</code></pre> the output will be:</p> <pre><code>[\"We're the knights of the round table\", \"We dance whenever we're able\"]\n</code></pre>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html","title":"Trick and tips for better code in python","text":"<p>This notes are base in the Medium post called \"five Python tricks you need to learn today\" and different articles or answers i found on Internet.</p>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#tip-1-clean-powerful-one-liners","title":"TIp 1: Clean - Powerful One-liners","text":""},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#conditional-statements","title":"Conditional statements","text":"<p>A normal If conditional will look like this:</p> <pre><code>if alpha &gt; 7 :\n    beta = 999\nelif alpha == 7:\n    beta = 99\nelse:\n    beta = 0\n</code></pre> <p>but this can be one line, it can be simplified in this way:</p> <pre><code>beta == 999 if alpha &gt; 7 else 99 if alpha == 7 else 0\n</code></pre>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#for-loops","title":"<code>for</code> loops","text":"<p>for example, doubling a list of integers in four lines:</p> <pre><code>lst = [1,3,5]\ndoubled = []\nfor num in lst:\n    doubled.append(num*2)\n</code></pre> <p>and it can be simplify to just one line:</p> <pre><code>double = [num * 2 for num in lst]\n</code></pre>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#tip-2-string-manipulation","title":"Tip 2: String Manipulation","text":""},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#reverse-a-string","title":"Reverse a string","text":"<p>we can use <code>::-1</code> to reverse a string, like this:</p> <pre><code>a = \"ilovemyjob\"\nprint a[::-1]\n#bojymevoli\n</code></pre>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#join-strings","title":"<code>join</code> strings","text":"<p>we can print the result of join different strings, or item of a list together:</p> <p>let say we have this: <pre><code>str1 = \"Totally\"\nstr2 = \"Awesome\"\nlst3 = [\"Omg\", \"You\", \"Are\"]\n</code></pre></p> <p>so we can use <code>join()</code> method to create the outcome:</p> <pre><code>print ' '.join(lst3)\n#Omg You Are\nprint ' '.join(lst3)+' '+str1+' '+str2\n#Omg You Are Totally Awesome\n</code></pre>"},{"location":"Python/Python_Basics/Tricks_tips_better_code_python.html#tip-3-replace-loops-for-map-filter-and-reduce","title":"Tip 3: Replace loops for Map, Filter, and Reduce","text":"<p>In some cases what we want to achieve with the loops can be done by <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>, we need to keep in mine the following:</p> <ul> <li>Map: Apply the same set of steps to each item, storing the result.</li> <li>Filter: Apply validation criteria, storing items that evaluate True.</li> <li>Reduce: Return a value that is passed from element to element.</li> </ul> <p>here a simple example, first how it will be done by loops</p> <pre><code>numbers = [1,2,3,4,5,6]\nodd_numbers = []\nsquared_odd_numbers = []\ntotal = 0\n# filter for odd numbers\nfor number in numbers:\n   if number % 2 == 1:\n      odd_numbers.append(number)\n# square all odd numbers\nfor number in odd_numbers:\n   squared_odd_numbers.append(number * number)\n# calculate total\nfor number in squared_odd_numbers:\n   total += number\n# calculate average\n</code></pre> <p>now let's do it with the functions</p> <p><pre><code>from functools import reduce\nnumbers = [1,2,3,4,5,6]\nodd_numbers = filter(lambda n: n % 2 == 1, numbers)\nsquared_odd_numbers = map(lambda n: n * n, odd_numbers)\ntotal = reduce(lambda acc, n: acc + n, squared_odd_numbers)\n</code></pre> Few things to keep in mine:</p> <ul> <li><code>map()</code> and <code>filter()</code> are native available, but <code>reduce()</code> is part of the library <code>functools</code>.</li> <li>The lambda expression is the first argument, and the second is an iterable.</li> <li>The lambda expression for <code>reduce()</code> requires two arguments: the accumulator (the value that is passed to each element) and the individual element itself.</li> </ul>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html","title":"Useful functions or Statements","text":""},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#reduce-from-functools","title":"<code>reduce()</code> from functools","text":"<p>The <code>reduce(fun,seq)</code> function is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in \u201cfunctools\u201d module.</p> <p>Working :</p> <ul> <li>First two elements of sequence are picked and the result is obtained.</li> <li>Next step is to apply the same function to the previously attained result and the number just succeeding the second element and the result is again stored.</li> <li>This process continues till no more elements are left in the container.</li> <li>The final returned result is returned and printed on console.</li> </ul> <pre><code>import sys\nfrom math import gcd\nfrom functools import reduce\n\nn,m = input().strip().split(' ')\nn,m = [int(n),int(m)]\nA = map(int,input().strip().split(' '))\nB = map(int,input().strip().split(' '))\n\ndef LCM(a, b):\n    return (a*b)//gcd(a,b)\n\nlcm = reduce(LCM, A, 1)\ngcd = reduce(gcd, B)\n\nlcm_copy = lcm\n\ncount = 0\nwhile lcm &lt;= gcd:\n    if(gcd % lcm) == 0:\n        count += 1\n    lcm = lcm + lcm_copy\n\nprint(count)\n</code></pre> <p>in the previous code the idea to solve the problem Between Two Sets</p> <p>here more information about GCD and LCM</p>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#gcd-from-math","title":"<code>GCD()</code> from math","text":"<p>The Highest Common Factor (HCF) , also called gcd, can be computed in python using a single function offered by math module and hence can make tasks easier in many situations.</p> <pre><code># Python code to demonstrate gcd()\n# method to compute gcd\n\nimport math\n\n# prints 12\nprint (\"The gcd of 60 and 48 is : \",end=\"\")\nprint (math.gcd(60,48))\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#counter-from-collection","title":"<code>Counter()</code> from collection","text":"<p>A <code>Counter</code> is a <code>dict</code> subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts.</p> <p>for example: assume an array <code>arr=[1,1,2,2,3]</code> and you are asked to find the number of occurrence of each integer, in this case you can use <code>Counter</code> whihc will return a dictionary using the value as key and the count as value, like this:</p> <pre><code>from collection import Counter\n\narr=[1,1,2,2,3]\n\ndict_arr=Counter(arr)\nprint(dict_arr)\n</code></pre> <p>the result will be:</p> <pre><code>{1:2, 2:2, 3:1}\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#iter-from-the-build-in-functions","title":"<code>iter()</code> from the build-in functions","text":"<p>Before start to talk about <code>iter()</code> better start by remembering what is a Iterator and what is the difference with iterable</p>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#python-iterators","title":"Python Iterators","text":"<p>An iterator is an object that contains a countable number of values, and it can be iterated upon, meaning that you can traverse through all the values.</p> <p>Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods iter() and next().</p>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#iterator-vs-iterable","title":"Iterator vs Iterable","text":"<p>Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.</p> <p>All these objects have a <code>iter()</code> method which is used to get an iterator:</p> <p><pre><code>mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\n</code></pre> it will output:</p> <pre><code>apple\nbanana\ncherry\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#setdefault-method-from-dictionaries","title":"<code>setdefault()</code> method from Dictionaries","text":"<p>The setdefault() method returns the value of the item with the specified key.</p> <p>If the key does not exist, insert the key, with the specified value, see example below</p> <p>Syntax <pre><code>dictionary.setdefault(keyname,value)\n</code></pre></p> <p>Example <pre><code>car = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\n\nx = car.setdefault(\"color\", \"white\")\n\nprint(x.color)\n</code></pre>  the output will be:</p> <pre><code>White\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#map-built-in-function","title":"<code>map()</code> Built-in function","text":"<p>Basic Syntax <pre><code>map(functions_object, iterable1, iterable2,...)\n</code></pre> <code>map</code> functions expects a function object and any number of iterables like list, dictionary, etc. It executes the function_object for each element in the sequence and returns a list of the elements modified by the function object.</p> <p>Example: <pre><code>def multiply2(x):\n  return x * 2\n\nmap(multiply2, [1, 2, 3, 4])  # Output [2, 4, 6, 8]\n</code></pre> In the above example, map executes multiply2 function for each element in the list i.e. 1, 2, 3, 4 and returns [2, 4, 6, 8]</p> <p>Let\u2019s see how we can write the above code using map and lambda.</p> <pre><code>map(lambda x : x*2, [1, 2, 3, 4]) #Output [2, 4, 6, 8]\n</code></pre> <p>We can pass multiple sequences to the map functions as shown below: <pre><code>list_a = [1, 2, 3]\nlist_b = [10, 20, 30]\n\nmap(lambda x, y: x + y, list_a, list_b) # Output: [11, 22, 33]\n</code></pre> Neither we can access the elements of the map object with index nor we can use len() to find the length of the map object</p> <p>We can force convert the map output i.e. the map object to list as shown below:</p> <pre><code>map_output = map(lambda x: x*2, [1, 2, 3, 4])\nprint(map_output) # Output: map object: &lt;map object at 0x04D6BAB0&gt;\n\nlist_map_output = list(map_output)\n\nprint(list_map_output) # Output: [2, 4, 6, 8]\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#filter-built-in-function","title":"<code>filter()</code> Built-in function","text":"<p>Basic Syntax <pre><code>filter(function_object, iterable)\n</code></pre></p> <p>filter function expects two arguments, function_object and an iterable. function_object returns a boolean value. function_object is called for each element of the iterable and filter returns only those element for which the function_object returns true.</p> <p>Like map function, filter function also returns a list of element. Unlike map function filter function can only have one iterable as input.</p> <p>Example:</p> <p>Even number using filter function <pre><code>a = [1, 2, 3, 4, 5, 6]\nfilter(lambda x : x % 2 == 0, a) # Output: [2, 4, 6]\n</code></pre></p> <p>Similar to map, filter function in Python3 returns a filter object or the iterator which gets lazily evaluated. Neither we can access the elements of the filter object with index nor we can use len() to find the length of the filter object.</p> <pre><code>list_a = [1, 2, 3, 4, 5]\n\nfilter_obj = filter(lambda x: x % 2 == 0, list_a) # filter object &lt;filter at 0x4e45890&gt;\n\neven_num = list(filter_obj) # Converts the filer obj to a list\n\nprint(even_num) # Output: [2, 4]\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#pass-statement","title":"<code>pass</code> Statement","text":"<p>The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:</p> <p><pre><code>while True:\n     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n</code></pre> This is commonly used for creating minimal classes:</p> <pre><code>class MyEmptyClass:\n     pass\n</code></pre> <p>Another place pass can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The pass is silently ignored:</p> <pre><code>def initlog(*args):\n     pass   # Remember to implement this!\n</code></pre>"},{"location":"Python/Python_Basics/Useful%20or%20researched%20built-in%20functions.html#max-and-the-key-argument","title":"<code>max()</code> and the <code>key</code> argument","text":"<p>The <code>max()</code> function returns the largest of the input values.</p> <p>Its syntax is as follows:</p> <p><pre><code>max(iterable[, default=obj, key=func]) -&gt; value\n</code></pre> we will focus in <code>key</code> this is an optional argument and it receive a function, and this function is applied to every member of the iterable</p> <p>from python documentation <code>key</code> (optional)  It refers to the single argument function to customize the sort order. The function is applied to each item on the iterable.</p>"},{"location":"Python/Python_Basics/Useful_snippets.html","title":"Useful Snippets","text":""},{"location":"Python/Python_Basics/Useful_snippets.html#1-all-unique","title":"1. All Unique","text":"<p>This method check if there is any duplicate element <pre><code>def all_unique(lst):\n        return len(str) == len(set(lst))\n\nx = [1,1,2,2,3,2,3,4,5,6]\ny = [1,2,3,4,5]\nall_unique(x) # False\nall_unique(y) # True\n</code></pre></p>"},{"location":"Python/Python_Basics/Useful_snippets.html#2-anagrams","title":"2. Anagrams","text":"<p>Check if a string is an anagram</p> <pre><code>from collections import Counter\n\ndef anagram(first, second):\n    return Counter(first) == Counter(second)\n\nanagram(\"abcd3\",\"3acdb\") #True\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#3-memory","title":"3. Memory","text":"<p>This is use to check the memory usage of an object</p> <pre><code>import sys\n\nvariable = 30\nprint(sys.getsizeof(variable))# 24\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#4-byte-size","title":"4. Byte size","text":"<p>This Method return the length of a string in bytes</p> <pre><code>def byte_size(string):\n    return(len(String.encode('utf-8')))\n\nbyte_size('\ud83d\ude00') # 4\nbyte_size('Hello World') # 11\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#5-print-a-string-n-times","title":"5. Print a String N times","text":"<p>This will print a string N times</p> <pre><code>n = 2;\ns = 'programing'\n\nprint(s*n) # ProgrammingProgramming\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#6-capitalize-first-letters","title":"6. Capitalize first letters","text":"<pre><code>s = \"programming is awesome\"\n\nprint(s.title()) # Programming Is Awesome\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#7-chunk","title":"7. Chunk","text":"<p>This method chunk a list in a smaller list of specific size</p> <pre><code>from math import ceil\n\ndef chunk(lst, size):\n    return list(map(lambda x: lst[x * size:x * size + size],list(range(0, ceil(len(lst) / size)))))\n\nchunk([1,2,3,4,5],2) # [[1,2],[3,4],5]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#8-compact","title":"8. Compact","text":"<p>This method remove the \"Falsy\" values, in other words, False, 0, None,\"\".</p> <pre><code>def compact(lst):\n    return list(filter(bool,lst))\n\ncompact([0, 1, False, 2, '', 3, 'a', 's', 34]) # [ 1, 2, 3, 'a', 's', 34 ]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#9-count-by","title":"9. Count by","text":"<p>This use ZIP() method to transpose a 2D array</p> <pre><code>array = [['a'.'b'],['c','d'],['e'.'f']]\ntransposed = zip(*array)\nprint(transposed) # [('a', 'c', 'e'), ('b', 'd', 'f')]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#10-chained-comparison","title":"10. chained comparison","text":"<p>multiple comparison in a single line</p> <pre><code>a = 3\nprint( 2 &lt; a &lt; 8) # True\nprint(1 == a &lt; 2) # False\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#11-comma-separated","title":"11. Comma-separated","text":"<p>This snippet use the method <code>.join()</code> turn a list of strings into a single string with each element from the list separated by commas.</p> <pre><code>hobbies = [\"basketball\", \"football\", \"swimming\"]\n\nprint(\"My hobbies are: \" + \", \".join(hobbies)) # My hobbies are: basketball, football, swimming\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#12-count-vowels","title":"12. Count vowels","text":"<p>This method counts the number of vowels (\u2018a\u2019, \u2018e\u2019, \u2018i\u2019, \u2018o\u2019, \u2018u\u2019) found in a string, using regular expressions.</p> <pre><code>import re\n\ndef count_vowels(str):\n    return len(len(re.findall(r'[aeiou]', str, re.IGNORECASE)))\n\n\ncount_vowels('foobar') # 3\ncount_vowels('gym') # 0\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#13-decapitalize","title":"13. Decapitalize","text":"<p>This method can be used to turn the first letter of the given string into lowercase.</p> <pre><code>def decapitalize(string):\n    return str[:1].lower() + str[1:]\n\n\ndecapitalize('FooBar') # 'fooBar'\ndecapitalize('FooBar') # 'fooBar'\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#14-flatten","title":"14. Flatten","text":"<p>The following methods flatten a potentially deep list using recursion.</p> <pre><code>def spread(arg):\n    ret = []\n    for i in arg:\n        if isinstance(i, list):\n            ret.extend(i)\n        else:\n            ret.append(i)\n    return ret\n\ndef deep_flatten(lst):\n    result = []\n    result.extend(\n        spread(list(map(lambda x: deep_flatten(x) if type(x) == list else x, lst))))\n    return result\n\n\ndeep_flatten([1, [2], [[3], 4], 5]) # [1,2,3,4,5]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#15-difference","title":"15. Difference","text":"<p>This method finds the difference between two iterables and display just the different number in the first iterable</p> <pre><code>def difference(a, b):\n    set_a = set(a)\n    set_b = set(b)\n    comparison = set_a.difference(set_b)\n    return list(comparison)\n\n\ndifference([1,2,3], [1,2,4]) # [3]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#16-difference-by","title":"16. Difference by","text":"<p>The following method returns the difference between two lists after applying a given function to each element of both lists.</p> <pre><code>def difference_by(a, b, fn):\n    b = set(map(fn, b))\n    return [item for item in a if fn(item) not in b]\n\n\nfrom math import floor\ndifference_by([2.1, 1.2], [2.3, 3.4],floor) # [1.2]\ndifference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']) # [ { x: 2 } ]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#17-chained-function-call","title":"17. Chained function call","text":"<p>You can call multiple functions inside a single line.</p> <pre><code>def add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\na, b = 4, 5\nprint((subtract if a &gt; b else add)(a, b)) # 9\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#18-has-duplicates","title":"18. Has duplicates","text":"<p>The following method checks whether a list has duplicate values by using the fact that <code>set()</code> contains only unique elements.</p> <pre><code>def has_duplicates(lst):\n    return len(lst) != len(set(lst))\n\n\nx = [1,2,3,4,5,5]\ny = [1,2,3,4,5]\nhas_duplicates(x) # True\nhas_duplicates(y) # False\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#19-merge-two-dictionaries","title":"19. Merge two dictionaries","text":"<p>The following method can be used to merge two dictionaries.</p> <pre><code>def merge_dictionaries(a, b)\n   return {**a, **b}\n\n\na = { 'x': 1, 'y': 2}\nb = { 'y': 3, 'z': 4}\nprint(merge_dictionaries(a, b)) # {'y': 3, 'x': 1, 'z': 4}\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#20-convert-two-lists-into-a-dictionary","title":"20. Convert two lists into a dictionary","text":"<p>The following method can be used to convert two lists into a dictionary.</p> <pre><code>def to_dictionary(keys, values):\n    return dict(zip(keys, values))\n\n\nkeys = [\"a\", \"b\", \"c\"]\nvalues = [2, 3, 4]\nprint(to_dictionary(keys, values)) # {'a': 2, 'c': 4, 'b': 3}\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#21-use-enumerate","title":"21. Use enumerate","text":"<p>This method gets a dictionary as an input and then returns only the keys that are in this dictionary.</p> <pre><code>list = [\"a\", \"b\", \"c\", \"d\"]\nfor index, element in enumerate(list):\n    print(\"Value\", element, \"Index \", index, )\n# ('Value', 'a', 'Index ', 0)\n# ('Value', 'b', 'Index ', 1)\n#('Value', 'c', 'Index ', 2)\n# ('Value', 'd', 'Index ', 3)\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#22-time-spent","title":"22. Time spent","text":"<p>This snippet can be used to calculate the time it takes to execute a particular code.</p> <pre><code>import time\n\nstart_time = time.time()\n\na = 1\nb = 2\nc = a + b\nprint(c) #3\n\nend_time = time.time()\ntotal_time = end_time - start_time\nprint(\"Time: \", total_time)\n\n# ('Time: ', 1.1205673217773438e-05)\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#23-try-else","title":"23. Try else","text":"<p>You can have an else clause as part of a try/except block, which is executed if no exception is thrown.</p> <pre><code>try:\n    2*3\nexcept TypeError:\n    print(\"An exception was raised\")\nelse:\n    print(\"Thank God, no exceptions were raised.\")\n\n#Thank God, no exceptions were raised.\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#24-most-frequent","title":"24. Most frequent","text":"<p>This method returns the most frequent element that appears in a list.</p> <pre><code>def most_frequent(list):\n    return max(set(list), key = list.count)\n\n\nlist = [1,2,1,2,3,2,1,4,2]\nmost_frequent(list)\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#25-palindrome","title":"25. Palindrome","text":"<p>This method checks whether a given string is a palindrome. It initially converts the string into lower case, then removes non-alphanumeric characters from it. In the end, it compares the new string with the reversed version.</p> <pre><code>def palindrome(string):\n    from re import sub\n    s = sub('[\\W_]', '', string.lower())\n    return s == s[::-1]\n\n\npalindrome('taco cat') # True\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#26-calculator-without-if-else","title":"26. Calculator without if-else","text":"<p>The following snippet shows how you can write a simple calculator without the need to use if-else conditions.</p> <pre><code>import operator\naction = {\n    \"+\": operator.add,\n    \"-\": operator.sub,\n    \"/\": operator.truediv,\n    \"*\": operator.mul,\n    \"**\": pow\n}\nprint(action['-'](50, 25)) # 25\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#27-shuffle","title":"27. Shuffle","text":"<p>This algorithm randomizes the order of the elements in a list by implementing the Fisher-Yates algorithm to do the ordering in the new list.</p> <pre><code>from copy import deepcopy\nfrom random import randint\n\ndef shuffle(lst):\n    temp_lst = deepcopy(lst)\n    m = len(temp_lst)\n    while (m):\n        m -= 1\n        i = randint(0, m)\n        temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]\n    return temp_lst\n\n\nfoo = [1,2,3]\nshuffle(foo) # [2,3,1] , foo = [1,2,3]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#28-spread","title":"28. Spread","text":"<p>This method flattens a list similarly like <code>[].concat(\u2026arr)</code> in JavaScript.</p> <pre><code>def spread(arg):\n    ret = []\n    for i in arg:\n        if isinstance(i, list):\n            ret.extend(i)\n        else:\n            ret.append(i)\n    return ret\n\n\nspread([1,2,3,[4,5,6],[7],8,9]) # [1,2,3,4,5,6,7,8,9]\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#29-swap-values","title":"29. Swap values","text":"<p>A really quick way for swapping two variables without having to use an additional one.</p> <pre><code>def swap(a, b):\n  return b, a\n\na, b = -1, 14\nswap(a, b) # (14, -1)\n</code></pre>"},{"location":"Python/Python_Basics/Useful_snippets.html#30-get-default-value-for-missing-keys","title":"30. Get default value for missing keys","text":"<p>This snippet shows how you can get a default value in case a key you are looking for is not included in the dictionary.</p> <pre><code>d = {'a': 1, 'b': 2}\n\nprint(d.get('c', 3)) # 3\n</code></pre>"},{"location":"Python/Python_Basics/control%20flow.html","title":"Control Flow","text":""},{"location":"Python/Python_Basics/control%20flow.html#iterating-through-dictionaries-with-for-loops","title":"Iterating through Dictionaries with <code>For</code> loops","text":"<p>The iteration through Dictionaries in pyhton is a different than Swift, in this case to iterate and get back both key and value you need to use a built-in method <code>item</code>.</p> <p>For example:</p> <pre><code>cast = {\n           \"Jerry Seinfeld\": \"Jerry Seinfeld\",\n           \"Julia Louis-Dreyfus\": \"Elaine Benes\",\n           \"Jason Alexander\": \"George Costanza\",\n           \"Michael Richards\": \"Cosmo Kramer\"\n       }\n\nfor key,value in cast.items():\n    print(\"Actor: {}   Role: {}\".format(key,value))\n</code></pre> <p>which will result in something like:</p> <pre><code>Actor: Jerry Seinfeld    Role: Jerry Seinfeld\nActor: Julia Louis-Dreyfus    Role: Elaine Benes\nActor: Jason Alexander    Role: George Costanza\nActor: Michael Richards    Role: Cosmo Kramer\n</code></pre>"},{"location":"Python/Python_Basics/control%20flow.html#for-loops-vs-while-loops","title":"<code>for</code> Loops vs. <code>while</code> Loops","text":"<p><code>for</code> loops are idea when the number of iteration are known or finite.</p> <p>Examples:</p> <ul> <li> <p>When you have an iterable collection (list, string, set, tuple, dictionary): <pre><code>for name in names:\n</code></pre></p> </li> <li> <p>When you want to iterate through a loop for a definite number of times, using <code>range()</code> <pre><code>for i in range(5):\n</code></pre></p> </li> </ul> <p><code>while</code> loop are ideal when the iterations are to continue until a condition is met</p> <p>Examples:</p> <ul> <li> <p>When you want to use comparison operations: <pre><code>while count &lt;= 100:\n</code></pre></p> </li> <li> <p>When you want to loop base on receiving specific user input <pre><code>while user_input == 'y'\n</code></pre></p> </li> </ul> <p>the following are required to build a correct <code>while</code> loop:</p> <ul> <li>The condition for existing the while loop should be included.</li> <li>Check if the iteration conditions is met.</li> <li>Body of the loop should change the value of condition variables.</li> </ul>"},{"location":"Python/Python_Basics/control%20flow.html#break-and-continue","title":"Break and continue.","text":"<ul> <li><code>break</code> terminates a loop.</li> <li><code>continue</code> skips one iteration of a loop.</li> </ul>"},{"location":"Python/Python_Basics/control%20flow.html#zip-and-enumerate","title":"Zip and Enumerate","text":"<p><code>zip</code> and <code>enumerate</code> are build-in functions that can come handy when dealing with loops.</p> <p>Zip</p> <p><code>zip</code> will return  an iterator that combine multiples iterables into one sequence of tuples, this will be more clear with an example:</p> <pre><code>list(zip(['a','b','c'], [1,2,3]))\n</code></pre> <p>which out put will be:</p> <pre><code>[('a',1),('b',2),('c',3)]\n</code></pre> <p>In this case we can see that <code>zip</code> create a iterator that combine the two provided iterables and each iterator is a tuple with items in the position of the original iterable.</p> <p>the reverse or Unzip process can be done using the *</p> <p><pre><code>letters = ['a','b','c']\nnums = [1,2,3]\n\nfor letter, num in zip(letters,nums):\n    print(\"{}:{}\".format(letter,num))\n\nsome_list = [('a',1),('b',2),('c',3)]\nletters, nums = zip(*some_list)\n</code></pre> In Python3, zip methods returns a zip object instead of a list. This zip object is an iterator. Iterators are lazily evaluated.</p> <p>Lazy evaluation, or call-by-need is an evaluation strategy which delays the evaluation of an expression until its value is needed and which also avoids repeated evaluations</p> <p>Iterators returns only element at a time. len function cannot be used with iterators. We can loop over the zip object or the iterator to get the actual list</p> <p>Consider the below example:</p> <pre><code>list_a = [1, 2, 3]\nlist_b = [4, 5, 6]\n\nzipped = zip(a, b) # Output: Zip Object. &lt;zip at 0x4c10a30&gt;\n\nlen(zipped) # TypeError: object of type 'zip' has no len()\n\nzipped[0] # TypeError: 'zip' object is not subscriptable\n\nlist_c = list(zipped) #Output: [(1, 4), (2, 5), (3, 6)]\n\nlist_d = list(zipped) # Output []... Output is empty list becuase by the above statement zip got exhausted.\n</code></pre> <p>Enumerate <code>enumerate</code> is a built in function that return an iterator of tuples containing indexes and values of a list, example:</p> <pre><code>letters = ['a','b','c','d','e']\n\nfor i, letter in enumerate(letters):\n    print(i, letter)\n</code></pre> <p>this will be the output:</p> <pre><code>0 a\n1 b\n2 c\n3 d\n4 e\n</code></pre> <p>an example of <code>enumerate</code>, here:</p> <pre><code>cast = [\"Barney Stinson\", \"Robin Scherbatsky\", \"Ted Mosby\", \"Lily Aldrin\", \"Marshall Eriksen\"]\nheights = [72, 68, 72, 66, 76]\n\nfor i, character in enumerate(cast):\n    cast[i] = character + \" \" + str(heights[i])\n\nprint(cast)\n</code></pre> <p>It will take 2 list and it will out put a single list of items that include a both original list as a single string</p> <pre><code>['Barney Stinson 72', 'Robin Scherbatsky 68', 'Ted Mosby 72', 'Lily Aldrin 66', 'Marshall Eriksen 76']\n</code></pre>"},{"location":"Python/Python_Basics/control%20flow.html#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions are just present in python and not in other languages, this are normally use to create a list in a quickly and concisely way, for example:</p> <pre><code>capitalized_cities = []\nfor city in cities:\n    capitalized_cities.append(city.title())\n</code></pre> <p>can be reduce to:</p> <pre><code>capitalized_cities = [city.title() for city in cities]\n</code></pre> <p>Conditional can be added to this list comprehensions (listcomps). be aware that if the conditional has a <code>else</code> statement the syntax will be a bit different.</p> <p>Lets start with a simply conditional.</p> <pre><code>squares = [x**2 for x in range(9) if x % 2 == 0]\n</code></pre> <p>this will create a list with the power of the even numbers</p> <p>if you want to add a <code>else</code>, you will get a syntax error</p> <pre><code>squares = [x**2 for x in range(9) if x % 2 == 0 else x + 3] # this will produce a syntax error\n</code></pre> <p>in this case, it is necessary move all the block to the beginning.</p> <pre><code>squares = [x**2 if x % 2 == 0 else x + 3 for x in range(9)]\n</code></pre>"},{"location":"Python/Python_Basics/control%20flow.html#exercise-using-the-dictionaries-and-for-loops","title":"Exercise using the dictionaries and for loops","text":"<p>Provide a list with the name(s) of the director(s) with the most Oscar wins. We are asking for a list because there could be more than 1 director tied for the most Oscar wins.</p> <pre><code>winners = {1931: ['Norman Taurog'], 1932: ['Frank Borzage'], 1933: ['Frank Lloyd'], 1934: ['Frank Capra'], 1935: ['John Ford'], 1936: ['Frank Capra'], 1937: ['Leo McCarey'], 1938: ['Frank Capra'], 1939: ['Victor Fleming'], 1940: ['John Ford'], 1941: ['John Ford'], 1942: ['William Wyler'], 1943: ['Michael Curtiz'], 1944: ['Leo McCarey'], 1945: ['Billy Wilder'], 1946: ['William Wyler'], 1947: ['Elia Kazan'], 1948: ['John Huston'], 1949: ['Joseph L. Mankiewicz'], 1950: ['Joseph L. Mankiewicz'], 1951: ['George Stevens'], 1952: ['John Ford'], 1953: ['Fred Zinnemann'], 1954: ['Elia Kazan'], 1955: ['Delbert Mann'], 1956: ['George Stevens'], 1957: ['David Lean'], 1958: ['Vincente Minnelli'], 1959: ['William Wyler'], 1960: ['Billy Wilder'], 1961: ['Jerome Robbins', 'Robert Wise'], 1962: ['David Lean'], 1963: ['Tony Richardson'], 1964: ['George Cukor'], 1965: ['Robert Wise'], 1966: ['Fred Zinnemann'], 1967: ['Mike Nichols'], 1968: ['Carol Reed'], 1969: ['John Schlesinger'], 1970: ['Franklin J. Schaffner'], 1971: ['William Friedkin'], 1972: ['Bob Fosse'], 1973: ['George Roy Hill'], 1974: ['Francis Ford Coppola'], 1975: ['Milos Forman'], 1976: ['John G. Avildsen'], 1977: ['Woody Allen'], 1978: ['Michael Cimino'], 1979: ['Robert Benton'], 1980: ['Robert Redford'], 1981: ['Warren Beatty'], 1982: ['Richard Attenborough'], 1983: ['James L. Brooks'], 1984: ['Milos Forman'], 1985: ['Sydney Pollack'], 1986: ['Oliver Stone'], 1987: ['Bernardo Bertolucci'], 1988: ['Barry Levinson'], 1989: ['Oliver Stone'], 1990: ['Kevin Costner'], 1991: ['Jonathan Demme'], 1992: ['Clint Eastwood'], 1993: ['Steven Spielberg'], 1994: ['Robert Zemeckis'], 1995: ['Mel Gibson'], 1996: ['Anthony Minghella'], 1997: ['James Cameron'], 1998: ['Steven Spielberg'], 1999: ['Sam Mendes'], 2000: ['Steven Soderbergh'], 2001: ['Ron Howard'], 2002: ['Roman Polanski'], 2003: ['Peter Jackson'], 2004: ['Clint Eastwood'], 2005: ['Ang Lee'], 2006: ['Martin Scorsese'], 2007: ['Ethan Coen', 'Joel Coen'], 2008: ['Danny Boyle'], 2009: ['Kathryn Bigelow'], 2010: ['Tom Hooper']}\n</code></pre> <p>first step, is \"open the dictionary\", i will need to list the directors as a key and the number of wins as a value, for that i can use the for loops and the <code>get</code> method of dictionaries</p> <pre><code>most_win_director = [] # i will use this list later to print the results\n\nwin_dict = {} # this Dictionary will hold the directors and the values ( number of wins)\n\nfor year, winner_name in winner.item():\n    for winner in winner_name:\n        win_dict[winner] = win_dict.get(winner,0) + 1\n</code></pre> <p>so in this step i get a dictionary that holds the name and the number of wins</p> <pre><code>{'Peter Jackson': 1, 'Anthony Minghella': 1, 'Robert Redford': 1, 'Clint Eastwood': 2, 'Ron Howard': 1, 'Billy Wilder': 2, 'Steven Spielberg': 2, 'Richard Attenborough': 1, 'Mel Gibson': 1, 'Leo McCarey': 2, 'William Friedkin': 1, 'Barry Levinson': 1, 'Oliver Stone': 2, 'Warren Beatty': 1, 'Ang Lee': 1, 'Joseph L. Mankiewicz': 2, 'Sydney Pollack': 1, 'Robert Wise': 2, 'Woody Allen': 1, 'John Ford': 4, 'Bob Fosse': 1, 'Jerome Robbins': 1, 'Robert Benton': 1, 'Elia Kazan': 2, 'Frank Lloyd': 1, 'John G. Avildsen': 1, 'Tom Hooper': 1, 'Frank Borzage': 1, 'Sam Mendes': 1, 'John Huston': 1, 'Carol Reed': 1, 'Francis Ford Coppola': 1, 'Joel Coen': 1, 'Fred Zinnemann': 2, 'William Wyler': 3, 'Jonathan Demme': 1, 'Kathryn Bigelow': 1, 'Delbert Mann': 1, 'Danny Boyle': 1, 'George Cukor': 1, 'Norman Taurog': 1, 'Tony Richardson': 1, 'George Roy Hill': 1, 'James L. Brooks': 1, 'Martin Scorsese': 1, 'David Lean': 2, 'Franklin J. Schaffner': 1, 'Bernardo Bertolucci': 1, 'John Schlesinger': 1, 'Ethan Coen': 1, 'Michael Cimino': 1, 'Milos Forman': 2, 'Mike Nichols': 1, 'Michael Curtiz': 1, 'Steven Soderbergh': 1, 'Robert Zemeckis': 1, 'Kevin Costner': 1, 'Frank Capra': 3, 'Vincente Minnelli': 1, 'James Cameron': 1, 'George Stevens': 2, 'Roman Polanski': 1, 'Victor Fleming': 1}\n</code></pre> <p>now I will need to create a variable <code>highest_wins</code> I will change the value of this variable every time I encounter a director with a higher number of wins, and I will clean the <code>most_win_director</code> and append the a new name.</p> <p><pre><code>highest_wins = 0\n\nfor director, wins in win_dict.items():\n    if wins &gt; highest_wins:\n        highest_wins = wins\n        most_win_director.clear()\n        most_win_director.append(director)\n    elif wins == highest_wins:\n        most_win_director.append(director)\n    else:\n        continue\n</code></pre>  finally print the solution:</p> <pre><code> print(\"most_win_director = {}\".format(most_win_director))\n</code></pre> <p>and here a more compact solution using <code>max</code> and list comprehension:</p> <pre><code>highest_count = max(win_count_dict.values())\n\nmost_win_director = [key for key, value in win_count_dict.items() if value == highest_count]\n</code></pre>"},{"location":"Python/Python_Basics/functions.html","title":"Functions","text":""},{"location":"Python/Python_Basics/functions.html#default-arguments","title":"Default arguments","text":"<p>We can add default arguments in a function to have default values for parameters that are unspecified in a function call:</p> <pre><code>def cylinder_volume(height, radius=5):\n    pi = 3.14159\n    return height * pi * radius ** 2\n</code></pre>"},{"location":"Python/Python_Basics/functions.html#variable","title":"Variable","text":"<p>check the code</p> <pre><code>egg_bag = 0\n\ndef buy_eggs()\n    egg_bag += 12\n\nbuy_eggs()\n</code></pre> <p>This causes an UnboundLocalError, since Python doesn't allow functions to modify variables that are outside the function's scope. A better way would be to pass the variable as an argument and reassign it outside the function.</p> <p>a better solution will be:</p> <pre><code>egg_count = 0\n\ndef buy_eggs(count):\n    return count + 12  # purchase a dozen eggs\n\negg_count = buy_eggs(egg_count)\n</code></pre>"},{"location":"Python/Python_Basics/functions.html#lambda-expressions","title":"Lambda Expressions","text":"<p>You can use lambda expressions to create anonymous functions. These are functions that don\u2019t have a name. They are helpful for creating quick functions that aren\u2019t needed later in your code. This can be especially useful for higher order functions, or functions that take in other functions as arguments.</p> <p>With a lambda expression, this function:</p> <pre><code>def multiply(x, y):\n    return x * y\n</code></pre> <p>can be reduced to:</p> <pre><code>multiply = lambda x, y: x * y\n</code></pre> <p>Components of a Lambda Function</p> <ol> <li>The <code>lambda</code> keyword is used to indicate that this is a lambda expression.</li> <li>Following <code>lambda</code> are one or more arguments for the anonymous function separated by commas, followed by a colon <code>:</code>. Similar to functions, the way the arguments are named in a lambda expression is arbitrary.</li> <li>Last is an expression that is evaluated and returned in this function. This is a lot like an expression you might see as a return statement in a function.</li> </ol> <p><code>map()</code> is a higher-order built-in function that takes a function and iterable as inputs, and returns an iterator that applies the function to each element of the iterable.</p> <pre><code>numbers = [\n              [34, 63, 88, 71, 29],\n              [90, 78, 51, 27, 45],\n              [63, 37, 85, 46, 22],\n              [51, 22, 34, 11, 18]\n           ]\n\naverages = list(map(lambda num_list: sum(num_list) / len(num_list), numbers))\nprint(averages)\n</code></pre> <p>in this case <code>maps()</code> is getting the value of numbers (an iterable variable) and use it in the <code>lambda</code> expression, it will get the values in <code>numbers</code>  and will get the average.</p> <p><code>filter()</code> is a higher-order built-in function that takes a function and iterable as inputs and returns an iterator with the elements from the iterable for which the function returns True, here and example:</p> <pre><code>cities = [\"New York City\", \"Los Angeles\", \"Chicago\", \"Mountain View\", \"Denver\", \"Boston\"]\n\nshort_cities = list(filter(lambda name: len(name) &lt; 10, cities))\nprint(short_cities)\n</code></pre>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html","title":"Multi-threading and Multi-processing","text":"<p>Here we will have some information about thread and processes.</p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#how-to-choose","title":"How to choose?","text":"<p>A simple way to know when to use processes and when to use threads will be to think in terms of task CPU-bound or External-bound ( like API calls), When the task we are executing depends of the CPU, it might be a good idea to use processes, but when the task depends of an external response, example; API calls, the best options, in most cases, will be Threads.</p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#what-is-a-thread","title":"What is a thread","text":"<p>A thread is a separate flow of execution. Threads share memory and then can exchange information, simple way to see it, is use any word processing program, the program will be the process and inside this process we will have different threads, on to process the keystrokes, one to display the letters in the screen, one to auto-save and other to highlight spelling mistakes.</p> <p>Because of the way CPython implementation of Python works, threading may not speed up all tasks. This is due to interactions with the GIL that essentially limit one Python thread to run at a time, but still in some cases this will speed up the execution.</p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#how-to-create-threads-in-python","title":"How to create Threads in python?","text":"<p>there are several ways to create the threads and there are even more ways to control them, for now we will check 3 basic ways:</p> <ol> <li>As instance of the class Thread</li> <li>By Extending the Thread class</li> <li>with a class but without extending the Thread Class</li> </ol>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#as-instance-of-the-class-thread","title":"As instance of the class Thread","text":"<pre><code>import threading as th\n\nprint(th.current_thread().getName())\n\ndef mt():\n        print('child Thread')\n\nchild = th.Thread(target=mt)\nchild.start()\nprint(\"Executing thread name :\", th.current_thread().getName())\n</code></pre> <p>Output</p> <p></p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#by-extending-the-thread-class","title":"By Extending the Thread class","text":"<p>When a child class is created by extending the Thread class, the child class represents that a new thread is executing some task. When extending the Thread class, the child class can override only two methods i.e. the <code>__init__()</code> method and the <code>run()</code> method.</p> <pre><code>import threading\nimport time\n\nclass myThread(threading.Thread):\n    \"\"\"docstring for ClassName\"\"\"\n    def run(self):\n        for x in range(7):\n            print('Hi from child')\n\nprint(threading.current_thread().getName())\na = myThread()\na.start()\na.join()\nprint(\"Bye from\",threading.current_thread().getName())\n</code></pre> <p>Output </p> <p>The output shows that the child thread executes the <code>run()</code> method and the main thread waits for the child execution to complete. To tell one thread to wait for another thread to finish, you call <code>.join()</code> in this case the child thread is telling theMaind thread that the execute has finished.</p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#deamon-threads","title":"Deamon Threads","text":"<p>In computer science, a <code>daemon</code> is a process that runs in the background.</p> <p>Python threading has a more specific meaning for <code>daemon</code>. A <code>daemon</code> thread will shut down immediately when the program exits. One way to think about these definitions is to consider the <code>daemon</code> thread a thread that runs in the background without worrying about shutting it down.</p> <p>If a program is running Threads that are not daemons, then the program will wait for those threads to complete before it terminates. Threads that are daemons, however, are just killed wherever they are when the program is exiting.</p> <pre><code>import threading as th\n\nprint(th.current_thread().getName())\n\ndef mt():\n        print('child Thread')\n\nchild = th.Thread(target=mt, deamon=True)\nchild.start()\nprint(\"Executing thread name :\", th.current_thread().getName())\n</code></pre>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#join","title":"<code>.join()</code>","text":"<p><code>.jpin()</code> tell one thread to wait for another thread to finish</p> <p><pre><code>import threading\nimport time\n\nclass myThread(threading.Thread):\n    \"\"\"docstring for ClassName\"\"\"\n    def run(self):\n        for x in range(7):\n            print('Hi from child')\n\nprint(threading.current_thread().getName())\na = myThread()\na.start()\na.join()\nprint(\"Bye from\",threading.current_thread().getName())\n</code></pre> in this case the line</p> <p><pre><code>a.join()\n</code></pre> tell the main thread to wait until the thread a finish.</p>"},{"location":"Python/Python_intermediate/Multithreading_and_multiprocessing.html#threadpoolexecutor-another-way-to-work-with-threads","title":"<code>ThreadPoolExecutor()</code> Another way to work with threads","text":"<p>There is another way to work with threads and that is using <code>ThreadPoolExecutor</code>, this is part of the library <code>concurrent.future</code>, the best way to work with <code>ThreadPoolExecutor</code> will be by using the context manager, using <code>with</code> statement to manage and destruction of the pool</p> <p>Here an example using <code>ThreadPoolExecutor</code></p> <pre><code>import logging\nimport time\nimport concurrent.futures\n\ndef thread_function(name):\n    logging.info(\"Thread %s: starting\", name)\n    time.sleep(2)\n    logging.info(\"Thread %s: finishing\", name)\n\nif __name__ == \"__main__\":\n    format = \"%(asctime)s: %(message)s\"\n    logging.basicConfig(format=format, level=logging.INFO,\n                        datefmt=\"%H:%M:%S\")\n\n    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n        executor.map(thread_function, range(3))\n</code></pre> <p>the code create a <code>ThreadPoolExecutor</code> as a context manager  telling how many working it wants on the pool, then use the function <code>map()</code> to step through an iterable of things, in this case a <code>range(3)</code>. The <code>.join()</code> is not necessary since the context manager will take care of it.</p> <p></p>"},{"location":"Python/Python_intermediate/configuration_files.html","title":"Configuration Files in Python","text":"<ol> <li>Quick Overview (Basic configuration file).</li> <li>How to make it.</li> <li>How to access them.</li> <li>How to update it.</li> <li>Real Example.</li> </ol>"},{"location":"Python/Python_intermediate/configuration_files.html#quick-overview-basic-configuration-file","title":"Quick Overview (Basic Configuration File)","text":"<ul> <li>The Files consist of sections.</li> <li>Name of the section is withing <code>[]</code> , Example: <code>[DEFAULT]</code> or <code>[testing]</code>.</li> <li>Each section will contain keys with values</li> <li>The extension of the file is <code>.ini</code></li> </ul>"},{"location":"Python/Python_intermediate/configuration_files.html#supported-structure","title":"Supported structure","text":"<ul> <li>Section names are case-sensitive <code>[Default]</code> is different than <code>[default]</code>.</li> <li>Spaces are allowed in the keys and the values, <code>my key = my value</code></li> <li><code>=</code> or <code>:</code> can be used to separate keys and values.</li> <li>keys with no values can omit <code>=</code> or it can be used if is not followed by any character, <code>my key without value</code> or <code>my key without value =</code> are correct.</li> <li>Comments can be added with <code>#</code> or <code>;</code> like <code># I am a comment</code> and <code>; me too</code>.</li> <li>A section can be indented.</li> </ul>"},{"location":"Python/Python_intermediate/configuration_files.html#how-to-make-it","title":"How to make it","text":"<p>I can make a config file in two ways:</p> <ol> <li>Creating the file and saving it with a .ini extension.</li> <li>Creating the file programmatically.</li> </ol> <p>Creating a file programmatically can be done using a code similar to this:</p> <pre><code>import configparser\n\nconfig = configparser.ConfigParser()\nconfig['DEFAULT'] = {'API key': 'MYLONGAPIKEY99999',\n                      'endpoint': 'http://nosecure.endpoint',\n                      'sandbox_endpoint': 'https://secure.endpoint'}\n\n# creating an empty section\nconfig['Debugging'] = {}\nconfig['Debugging']['logger_level'] = 'DEBUG'\n\nconfig['superSecretData'] = {}\n#assigning section to a variable\nsupersecret = config['superSecretData']\nsupersecret ['myPassword'] = '123456'\nsupersecret ['username'] = 'me'\n\n#adding to an existing section\nconfig['DEFAULT']['onLine'] = 'yes'\n\nwith open('myExample.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre> <p></p>  \ud83d\udd25 Section names are case-sensitive but keys are not.   <p>All the values store<code>d</code> in the keys are strings, however<code>,</code> there is one method I can use to get a boolean value for keys holding strings like <code>yes</code>, <code>no</code> <code>'on'</code>,<code>'off'</code>,<code>'true'</code>,<code>'false'</code>,<code>'1'</code>,<code>'0'</code>.</p>"},{"location":"Python/Python_intermediate/configuration_files.html#how-to-access-them","title":"How to access them","text":"<p>ConfigParser class provides methods to interact with the configuration file.</p> <p><code>read()</code></p> <p>Allow me to read the .ini file</p> <p><code>sections()</code></p> <p>returns the section names present in the config file.</p> <p><code>getboolean()</code></p> <p>will return a Boolean value depending on the value store in the key, values most be <code>'yes'/'no'</code>, <code>'on'/'off</code>', <code>'true'/'false'</code> and <code>'1'/'0'</code>.</p> <p>Here are some examples of interactions with a config file.</p> <pre><code>import configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('myExample.ini')\nprint(f'config.sections() =&gt; {config.sections()}')\nprint(f'config[\"DEFAULT\"][\"API key\"] =&gt; {config[\"DEFAULT\"][\"API key\"] }')\ndefault = config['DEFAULT']\nprint(f'default[\"onLine\"]  =&gt; {default[\"onLine\"] }')\n</code></pre> <p></p> <p>Like the dictionaries I can provide a Fallback value, that is when the key doesn't I can create it and give it a value.</p> <pre><code>&gt;&gt;&gt; default.get('last_name','Fernandez')\nFernandez\n</code></pre>"},{"location":"Python/Python_intermediate/configuration_files.html#how-to-update-it","title":"How to update it.","text":"<p>To update it  I can use the following methods:</p> <p><code>add_section()</code> to add a new section.</p> <p><code>set(\u2019my_section\u2019,\u2019my_new_key\u2019,\u2019my_new_value\u2019)</code> To add a new key-value pair to an specific session.</p> <pre><code>import configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('myExample.ini')\nprint(f'current sections: {config.sections()}')\n\n#adding new section and key-value\nconfig.add_section('new_section')\nconfig.set(section='new_section', option='new_key', value='new_value')\n\nwith open('myExample.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre> <p>Notice I need to \u201csave the changes\u201d by writing the configuration file one more time.</p>"},{"location":"Python/Python_intermediate/context_manager_python.html","title":"Context Managers 'with'","text":"<p>In other programming languages we use the <code>try/expect/finally</code> block to handle resource or to manage those resources, in python we can use the <code>with</code> statement and context managers to simplify that operation</p> <p>Here and example in of how <code>try</code> statement is use to handle open and close a file</p> <pre><code>try:\n    f = open('text.txt','r')\n    print(f.read())\nfinally:\n    f.close()\n</code></pre> <p>Now the same operation but using the <code>with</code> statement</p> <pre><code>with open('text.txt','r') as f:\n    print(f.read())\n</code></pre> <p>the context manager will take care of opening the file and later close it when we are done.</p>"},{"location":"Python/Python_intermediate/context_manager_python.html#usages-of-with-statement","title":"Usages of <code>with</code> statement","text":""},{"location":"Python/Python_intermediate/context_manager_python.html#database","title":"Database","text":"<pre><code>def database_example():\n    with sqlite3.connect('db/test.db') as connection:\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT * FROM test ORDER BY id desc\")\n        test_data = cursor.fetchall()\n        return test_data\n</code></pre>"},{"location":"Python/Python_intermediate/context_manager_python.html#locks","title":"Locks","text":"<pre><code>lock = threading.Lock()\nwith lock:\n    #do something\n</code></pre>"},{"location":"Python/Python_intermediate/context_manager_python.html#tensorflow","title":"TensorFlow","text":"<pre><code>#using the context manager\nwith tf.Session() as sess:\n    sess.run(...)\n</code></pre>"},{"location":"Python/Python_intermediate/context_manager_python.html#context-manager","title":"Context Manager","text":"<p>Although the definition of context manager was a bit confusing for me the first time i read it, it make sense with the time. A context Manager is an object that defines the runtime context to be establish when executing a <code>with</code> statement.</p> <p>The context manager will handle the enter into, and exit from a desired runtime.</p>"},{"location":"Python/Python_intermediate/context_manager_python.html#the-syntax","title":"The Syntax","text":"<pre><code>with EXPR as VAR:\n    Block\n</code></pre> <ul> <li><code>with</code> and <code>as</code> are keywords</li> <li><code>VAR</code> is just a variable it can be use to call the result of the expression</li> <li><code>Block</code> just the block of code.</li> </ul>"},{"location":"Python/Python_intermediate/context_manager_python.html#implementing-a-context-manager","title":"Implementing a Context manager","text":"<p>Like in everything we can create our own implementation of a context manager. There are two ways to do it:</p> <ul> <li>User-defined classes.</li> <li>Generators.</li> </ul>"},{"location":"Python/Python_intermediate/context_manager_python.html#user-defined-classes","title":"User-defined Classes","text":"<p>to implement a context manager we will need to create a class that contain two methods <code>__enter__()</code> and <code>__exit__()</code>.</p> <pre><code>class OpenFile(object):\n\n  def __init__(self, file_name, mode):\n    print('calling __init__ Method')\n    self.file_name = file_name\n    self.mode = mode\n    self.file = None\n    return\n\n  def __enter__(self):\n    print('calling __enter__ Method')\n    self.file_handler = open(self.file_name, self.mode)\n    return self.file_handler\n\n  def __exit__(self, exc_type, exc_val, traceback):\n    print('calling __exit__:', exc_type, exc_val, traceback)\n    if self.file_handler:\n      self.file_handler.close()\n    return True\n\n# Using OpenFile\nwith OpenFile('test.txt', 'r') as f:\n  print('Read a file:')\n  print(f.read())\n\n\n# test.txt\n# Hello World, Implementing the Context Manager as a Class.\n\n# Expected Output:\n# calling __init__ Method\n# calling __enter__ Method\n# Read a file:\n# Hello World, Implementing the Context Manager as a Class.\n# calling __exit__: None None None\n</code></pre> <p>Few things to remark in the example:</p> <ol> <li>We have two variables <code>file_name</code> and <code>mode</code>. <code>mode</code> is how we wnat to open the file, write mode or read mode.</li> <li>In the method <code>__enter__()</code> we open the file.</li> <li>In the method <code>__exit__()</code> whe make sure to close the file.</li> </ol> <p>In some cases we can use this implementation to handle exceptions.</p>"},{"location":"Python/Python_intermediate/context_manager_python.html#implementing-the-context-manager-with-generator","title":"Implementing the context manager with generator","text":"<p>To implemented in this way we will need the library <code>contextlib.contextmanager</code> this library will provide a decorator <code>@contextmanager</code>  If a generator function is decorated with the <code>contextlib.contextmanager</code> decorator, it will return a context manager implementing the necessary<code>__enter__()</code> and <code>__exit__()</code> methods.</p> <p><pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef open_file(filename, mode):\n    try:\n        # __enter__ method\n        f = open(filename, mode)\n        # yield method\n        yield f\n    finally:\n        # __exit__ method\n        f.close()\n\nwith open_file('test.txt', 'r') as f:\n    print(f.read())\n\n# Expect output:\n# Hello World, Implementing the Context Manager as a Class.\n</code></pre> The Python interpreter recognizes the yield statement in the middle of the function definition. The code before the yield statement is equivalent to<code>__enter__()</code> method. and the code after the yield statement is equivalent to<code>__exit__()</code> method.</p>"},{"location":"Python/Python_intermediate/logging_python.html","title":"Logging in Python","text":"Why should I use it: The module Logging will allow me to get an overview of errors or the data flow in specific code. For small projects, a simple print will help to check results or errors in specific statements. But in a more complex project, where I have several functions and modules, logging is a better and more organized option. The configuration of the logger can get complicated however it is worth it."},{"location":"Python/Python_intermediate/logging_python.html#the-basics","title":"The Basics:","text":"<p>The Logging module is a built-in module, so installation is not necessary. I only need to import it. <pre><code>import logging\n</code></pre></p> <p>There are several elements in the logging, but the most important are: * Logging levels. * Handler. * Formatter.</p>"},{"location":"Python/Python_intermediate/logging_python.html#logging-levels","title":"Logging Levels","text":"<p>Logging levels will allow me to log more specific things, such as; debugging statements, information, or reports errors.</p> Levels Descriptions DEBUG Detailed information, mostly for diagnostics. INFO Mostly to confirm that something is working. WARNING Something happens that can create problems in the future. ERROR A serious problem, the software cannot perform the action. CRITICAL Serious Error, unable to continue.  \ud83d\udd25 The default level is set to \"WARNING\". If the logging level is not configured, the only messages logged are those higher than WARNING, in other words, ERROR and CRITICAL."},{"location":"Python/Python_intermediate/logging_python.html#example-of-a-basic-logging","title":"Example of a basic logging","text":"<p>This example will show the simple logging configuration. There is no configuration for a handler or a formatter. However, the implementation will allow me to decide whether I want to log the information in a file and in what format I want the information.</p>"},{"location":"Python/Python_intermediate/logging_python.html#just-with-the-logging-level-the-default-output-will-be-the-console","title":"Just with the logging level, the default output will be the console.","text":""},{"location":"Python/Python_intermediate/logging_python.html#adding-a-destination-file","title":"Adding a destination file","text":""},{"location":"Python/Python_intermediate/logging_python.html#changing-the-format-of-the-output","title":"Changing the format of the output","text":"<p>In the above example, I configure the logs to display the time and a message, But these are not the only attributes I can use. python documentation provides an extensive list of LogRecord attributes here:</p> <p>Logging documentation</p> <p>The complete code of the basic example will be:</p> <p></p>"},{"location":"Python/Python_intermediate/logging_python.html#advanced-logging","title":"Advanced Logging","text":"<p>I have just one logger in the following example -a good option if I deal with one script at a time. But for a more complex app, I will need more loggers and probably more output. To achieve a more functional logger, I can make use of the elements mentioned previously * Logging levels. * Handler. * Formatter.</p> <p>The following code can be duplicated in each script to have a logger in each one of them</p>"},{"location":"Python/Python_intermediate/logging_python.html#creating-a-logger-for-a-specific-script","title":"Creating a logger for a specific script","text":"<p>I start by creating a variable:  </p> <p>The argument name is a deeper topic that I won't cover here. but a bad explanation or rather a not accurate one will say; \"this will help the lower to know in which module and function it is been call\".</p>"},{"location":"Python/Python_intermediate/logging_python.html#logging-levels_1","title":"Logging Levels","text":"<p>To add the logging level to the logger, I use the function <code>setLevel()</code>. </p>"},{"location":"Python/Python_intermediate/logging_python.html#handler","title":"Handler","text":"<p>In this case refer to which output I will use, the console or a document.</p> <p> I created a file handler, but it is not linked to the logger yet, I need to add it.</p> <p></p> <p>Be aware that I haven't changed the format of the output, I just define what will be the output for the <code>logger</code>. To add a stream handler or an output to the console, I can use <code>StreamHandler()</code>.</p> <p></p>"},{"location":"Python/Python_intermediate/logging_python.html#formatter","title":"Formatter","text":"<p>Now with the logger added I can think in the format I want. To modify the format I can use <code>setFormatter()</code>.</p> <p></p> <p>The extra argument <code>datefmt</code> allows me to modify how the time is displayed. Similar to Handler, I have to register it with the logger. <code>setFormatter()</code> is used to add the format to the logger. </p> <p>Now, all together: </p>  \ud83d\udd25 Every time I need to call the logger, I will need to use the variable I create for it rather than the logging. Example: logger.info(f'Starting script')"},{"location":"Python/Python_intermediate/logging_python.html#notes","title":"Notes:","text":"<p>When using <code>try/except</code> blocks is a good idea to log the traceback when the action fails by using the function <code>.exception()</code> with the logger.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html","title":"SQLAlchemy","text":"<p>the website describe it as the Python SQL toolkit and Object Relational Mapper Although the description is deeper and for sure I'm been shallow in my description, SQLAlchemy abstract all the code necessary to interact with the database, and do it in a way that make it easy to change databases, example the development can be done in <code>sqlite</code> and production can be in <code>PostgreSQL</code> and the changes will be minimum.</p> <p>SQLAlchemy docs 1.3</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-introduction","title":"SQLAlchemy Introduction","text":"<p>this library facilitate the communication between python and databases, the library use <code>Object Relational Mapper (ORM)</code>  tool to translate python classes into relational tables, and automatically convert functions calls to SQL statements. thanks to the SQLAlchemy boilerplate code handling task like database connection is abstracted away then the developer can focus in the business logic.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#python-dbapi","title":"Python DBAPI","text":"<p>The Python DataBase API or DBAPI was created to specify how Python modules that integrate with the database should expose their interface, i wont go in details about it, just because is a deeper topic and SQLAlchemy works as a facade to it, so common functions like <code>connect</code>, <code>close</code> , <code>commit</code> and <code>rollback</code> are already defined on the library.</p> <p>I will follow an article that use the most popular PostgrSQL DBAPI implementation available (<code>psycopg</code>), again I wont go deeper into it.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-engines","title":"SQLAlchemy Engines","text":"<p>we can install SQLAlchemy using pip. <pre><code>pip install sqlalchemy\n</code></pre></p> <p>In SQLAlchemy to interact with the database we will  need to create an <code>Engine</code>. This \"Engine\" is use to  manage two crucial factors: Pools and Dialects ( see more details bellow)</p> <p><pre><code>from sqlalchemy import create_engine\nengine = create_engine('postgresql://usr:pass@localhost:5432/mydatabase')\n</code></pre> from the previous code:</p> <ul> <li><code>usr:pass</code> are the credentials for the <code>mydatabase</code> database.</li> <li><code>localhost</code> the host.</li> <li><code>5432</code> refers to the <code>port</code> in this case the default postgresql port.</li> </ul> <p>In this case the URI doesn't show the Dialect but most of the common databases and Dialect are integrated we can get more information in the official documentation, as example (from the documentation):</p> <p><pre><code># default\nengine = create_engine('postgresql://scott:tiger@localhost/mydatabase')\n# psycopg2\nengine = create_engine('postgresql+psycopg2://scott:tiger@localhost/mydatabase')\n# pg8000\nengine = create_engine('postgresql+pg8000://scott:tiger@localhost/mydatabase')\n</code></pre> I think in more of the case for the small applications the database use will be <code>sqlite</code>, SQLite is connects to local files, the URL format is slightly different. The \"file\" portion of the path is going to be the filename of the database. For a relative file path, this requires three slashes (four slashes for a specific one):</p> <pre><code>engine = create_engine('sqlite:///foo.db')\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-connection-polls","title":"SQLAlchemy Connection Polls","text":"<p>The connection pools is a implementation of the object pool pattern, this allow the re-usage of pre-initialized objects ready to use, instead of create new instances of create object that are frequently needed  ( like db connection) the program fetch an existing object from the pool, used it as desired and puts back when done.</p> <p>There are various implementation of the connection pool pattern in SQLAlchemy, as an example, when we create the Engine using <code>create_engine()</code> this function generate a <code>QueuePool</code>, the default configuration is a reasonable default, like maximum pool size of 5 connections.</p> <p>The most common options with their description:</p> <ul> <li><code>pool_size</code>: Sets the number of connections that the pool will handle.</li> <li><code>max_overflow</code>: Specifies how many exceeding connections ( relative to <code>pool_size</code>) the pool supports.</li> <li><code>pool_recycle</code>: Configures the maximum age (in seconds) of connections in the pool.</li> <li><code>pool_timeout</code>: Identifies how many seconds the program will wait before giving up on getting a connection from the pool.</li> </ul> <p>and example of this concept will be:</p> <pre><code>engine = create_engine('postgresql://me@localhost/mydb', pool_size=20, max_overflow=0 )\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-dialects","title":"SQLAlchemy Dialects","text":"<p>SQLAchelmy serve as a facade that allow us to connect to different databases engines using the same API, the most of the database follow SQL (Structured Query Language) standard, but there are different variations, this is the reason of dialects.</p> <ul> <li> <p>Microsoft SQL <pre><code>SELECT TOP 10* FROM people;\n</code></pre></p> </li> <li> <p>MySQL <pre><code>SELECT *FROM people LIMIT 10;\n</code></pre></p> </li> </ul> <p>Therefore, to know precisely what query to issue, SQLALchemy needs to be aware of the type of the database that it is dealing with</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-orm","title":"SQLALchemy ORM","text":"<p>Object Relational Mapper, is a specialization of the Data Mapper design pattern that addresses relational databases, Mappers are responsible for moving data between objects and a database while keeping them independent of each other.</p> <p>for example to create <code>Product</code> class and an <code>Order</code> class to relate as many instance as needed from one class to another (many to many), but in a relational database , we will need three entities, one for products, another for orders, and the third one to relate (through foreign key) products and orders.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-data-types","title":"SQLAlchemy Data Types","text":"<p>This library provide support for the common data types found in relational databases, example, booleans, dates, times, string, and numeric values, SQLALchemy implements some vendor-specific type such as JSON.</p> <pre><code>class Product(Base):\n    __tablename__ = 'product'\n    id = Column(Integer, primary_key=True)\n    title = Column('title', String(32))\n    in_stock = Column('in_stock', Boolean)\n    quantity  Column('quatity', Integer)\n    price = Column('price', Numeric)\n</code></pre> <ul> <li>The <code>__tablename__</code> property tells SQLAlchemy that rows of the products table must be mapped to this class.</li> <li>The <code>id</code>  property identifies that this is the <code>primary_key</code> in the table and it is an Integer.</li> <li>The <code>title</code> property indicate the a column in the table  and is a String.</li> <li>The <code>in_strock</code> property type Boolean.</li> <li>The <code>quantity</code> property type Integer.</li> <li>The <code>price</code> property type Numeric.</li> </ul> <p>This type are different to the type we will see in a pure implementation or SQL but this is part of the abstraction, SQLALchemy will translate to the correct type depending of the dialect.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-relationship-pattern","title":"SQLAlchemy Relationship Pattern","text":"<p>SQLAlchemy support 4 type of relationships:</p> <ul> <li>One to Many.</li> <li>Many to One.</li> <li>One to One.</li> <li>Many to Many.</li> </ul>"},{"location":"Python/Python_intermediate/sqlalchemy.html#one-to-many","title":"One to Many","text":"<p>One instance of a class can be associated with many instance of another class</p> <pre><code>class Article(Base):\n    __tablename__ = 'articles'\n    id = Column(Integer, primary_key=True)\n    comments = relationship('Comment')\n\nclass Comment(Base):\n    __tablename__ = 'comments'\n    id = Column(Integer, Primary_key=True)\n    article_id = Column(Integer, ForeignKey('article.id'))\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#many-to-one","title":"Many to One","text":"<p>it is similar to the relationship describe about</p> <pre><code>class Tire(Base):\n    __tablename__ = 'tires'\n    id = Column(Integer, primary_key=True)\n    car_id = Column(Integer, ForeignKey('car.id'))\n    car = relationship('Car')\n\nclass Car(Base):\n    __tablename__ = 'cars'\n    id = Column(Integer, primary_key=True)\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#one-to-one","title":"One to One","text":"<pre><code>class Person(Base):\n    __tablename__ = 'people'\n    id = Column(Integer, primary_key=True)\n    mobile_phone = relationship('MobilePhone', uselist=False, back_populates=\"person\" )\n\nclass MobilePhone(Base):\n    __tablename__ = 'mobile_phones'\n    id = Column(Integer, primary_key=True)\n    person_id = Column(Integer, ForeignKey('people.id'))\n    person = relationship(\"Person\", back_populates=\"mobile_phone\")\n</code></pre> <p>two new parameter in the <code>relationship</code> method:</p> <ul> <li><code>uselist=False</code> Make SQLAlchemy understand that <code>mobile_phone</code> will hold only a single instance and not an array.</li> <li><code>back_populates</code> instruct SQLAlchemy to populate the other side of the mapping.</li> </ul>"},{"location":"Python/Python_intermediate/sqlalchemy.html#many-to-many","title":"Many to Many","text":"<pre><code>student_classes_association = Table('students_classes', Base.metadata,\n        Column('stundent_id', Integer, ForeignKey('student.id')),\n        Column('class_id', Integer, ForeignKey('classes.id'))\n)\n\nclass Student(Base):\n    __tablename__ = 'students'\n    id = Column(Integer, primary_key=True)\n    classes = relationship(\"Class\", secondary=student_classes_association)\n\nclass Class(Base):\n    __tablename__ = 'classes'\n    id = Column(Integer, primary_key=True)\n</code></pre> <p>In this case a secondary table or a helper table must be created to persist the association between instances of <code>student</code> and instances of <code>Class</code>, to make SQLAlchemy aware of the helper table, we passed it in the <code>secondary</code> parameter of the <code>relationship</code> function.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-orm-cascade","title":"SQLAlchemy ORM Cascade","text":"<p>Sometimes wen we update one table we need to propagate those changes to the other related tables, these changes can be simple updates (cascade updates) or deletes ( cascade deletes). SQLAlchemy ORM enables developers to map cascade behavior when using <code>relationship()</code>  the most common cascade:</p> <ul> <li><code>save-update</code>: Indicates that when a parent object is saved/updated, child objects are saved/updated as well.</li> <li><code>delete</code>: Indicates that when a parent object is deleted, children of this object will be deleted as well.</li> <li><code>delete-orphan</code>: Indicates that when a child object loses reference to a parent, it will get deleted.</li> <li><code>merge</code>: Indicates that <code>merge()</code> operations propagate from parent to children.</li> </ul> <p>The default behavior of cascade is limited to cascades of the so-called <code>save-update</code> and <code>merge</code> settings. The typical \u201calternative\u201d setting for cascade is to add the <code>delete</code> and <code>delete-orphan</code> options; these settings are appropriate for related objects which only exist as long as they are attached to their parent, and are otherwise deleted.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#sqlalchemy-sessions","title":"SQLAlchemy Sessions","text":"<p>Sessions are an implementation of the design patter called unit of work which idea is maintain a list of objects affected by a business transaction and to coordinate the writing of these changes, in other words, all modifications tracked by Sessions (Units of Works) will be applied to the underlying database together, or none of them will.</p> <p>the Session establishes all conversations with the database and represents a \u201cholding zone\u201d for all the objects which you\u2019ve loaded or associated with it during its lifespan.</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm  import sessionmaker\n\n# create an engine\nmy_engine = create_engine('postgresql://user:pass@localhost:5432/sqlachemy')\n\n#create a configured \"Session\" class\nSession = sessionmaker(bind=my_engine)\n\n#create a Session\nsession = Session()\n\n#example of the usage\nmy_object = MyObject('foo', 'bar')\nsession.add(my_object)\nsession.commit()\n</code></pre> <p>In the code above we create a session factory bind to our engine and later we create our session.</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#about-queries-and-querying","title":"About Queries and Querying","text":"<p>Lets assume that we already establish a connections and a session with the database, let call the table \"census\"</p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#selecting","title":"Selecting","text":"<p>SQL <pre><code>SELECT * FROM census\n</code></pre></p> <p>SQLAlchemy <pre><code>quey = db.select([census])\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#filtering-data","title":"Filtering data","text":""},{"location":"Python/Python_intermediate/sqlalchemy.html#where","title":"where","text":"<p>SQL <pre><code>SELECT * FROM census\nWHERE sex = F\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([census]).where (census.columns.sex == 'F')\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#in","title":"in","text":"<p>SQL <pre><code>SELECT state, sex\nFROM census\nWHERE state in (Texas, New York)\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([census.columns.state, census.columns.sex]).where(census.columns.state.in_(['Texas', 'New York']))\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#and-or-not","title":"and, or, not","text":"<p>SQL <pre><code>SELECT * FROM census\nWHERE state = 'California' AND NOT sex = 'M'\n</code></pre></p> <p>SQLAlchemy <pre><code>db.census([census]).where(db.and_(census.columns.state == 'California', census.columns.sex != 'M'))\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#order-by","title":"order by","text":"<p>SQL <pre><code>SELECT * FROM census\nORDER by state DESC, pop2000\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([census]).order_by(db.desc(census.columns.state), census. columns.pop2000)\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#function","title":"function","text":"<p>SQL <pre><code>SELECT SUM(pop2008)\nFROM census\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([db.func.sum(census.columns.pop2008)])\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#group-by","title":"group by","text":"<p>SQL <pre><code>SELECT Sum(POP2008) as pop 2008, sex\nFROM census\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([db.func.sum(census.columns.pop2008).label('pop2008'), census. comuns.sex]). group_by(census.columns.sex)\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#distinct","title":"distinct","text":"<p>SQL <pre><code>SELECT DISTINCT state\nFROM census\n</code></pre></p> <p>SQLAlchemy <pre><code>db.select([census.columns.state.distinct()])\n</code></pre></p>"},{"location":"Python/Python_intermediate/sqlalchemy.html#creating-and-inserting-data-into-tables","title":"Creating and Inserting Data Into Tables","text":""},{"location":"Python/Python_intermediate/sqlalchemy.html#creating-database-and-table","title":"Creating Database and table","text":"<p>Although above we create the table using classes in this case we will Create it as a functions.</p> <p>I haven't found a good explanation of which method use, or what is the best to create tables, but i guess the one using classes will be better.</p> <pre><code>engine = db.create_engine('sqlite:///test.sqlite') #Create test.sqlite automatically\nconnection = engine.connect()\nmetadata = db.MetaData()\n\nemp = db.Table('emp', metadata,\n              db.Column('Id', db.Integer()),\n              db.Column('name', db.String(255), nullable=False),\n              db.Column('salary', db.Float(), default=100.0),\n              db.Column('active', db.Boolean(), default=True)\n              )\n\nmetadata.create_all(engine) #Creates the table\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#inserting-data","title":"Inserting Data","text":"<pre><code>#Inserting record one by one\nquery = db.insert(emp).values(Id=1, name='naveen', salary=60000.00, active=True)\nResultProxy = connection.execute(query)\n</code></pre> <pre><code>query = db.insert(emp)\nvalues_list = [{'Id':'2', 'name':'ram', 'salary':80000, 'active':False},\n               {'Id':'3', 'name':'ramesh', 'salary':70000, 'active':True}]\nResultProxy = connection.execute(query,values_list)\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#updating-data","title":"Updating Data","text":"<pre><code>db.update(table_name).values(attribute = new_value).where(condition)\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#delete-table","title":"Delete Table","text":"<pre><code>db.delete(table_name).where(condition)\n</code></pre>"},{"location":"Python/Python_intermediate/sqlalchemy.html#dropping-the-table","title":"Dropping the Table","text":"<pre><code>table_name.drop(engine) #drops a single table\nmetadata.drop_all(engine) #drops all the tables in the database\n</code></pre>"},{"location":"Python/Scripts/JSON%20Objects%20in%20Python.html","title":"JSON Object in python","text":"<p>JSON Object in python</p> <p>let start for the basic and the well know definition of what is JSON</p> <p>JSON stand for Java Script Object Notation and it is a light weight data format with many similarities to python dictionaries. JSON objects can be parse by many, if not all, modern browsers, which is ideal for transporting data between a client and a server.</p>"},{"location":"Python/Scripts/JSON%20Objects%20in%20Python.html#defining-a-json","title":"Defining a JSON","text":"<p>First let make and example file, that can be copy and save as a .txt and it will represent our JSON file</p> <p><pre><code>{\n     \"album_title\" : \"Yellow Submarine\",\n     \"release_year\" : 1966,\n     \"won_grammy\" : false,\n     \"band\" : \"The Beatles\",\n     \"album_sale\": null,\n     \"musicians\" : [\"John Lennon\", \"Paul McCartney\", \"George   Harrison\", \"Ringo Starr\"],\n     \"studio\" : {\"studio_name\": \"Abbey Road Studios\", \"location\": \"London, England\"}\n     }\n</code></pre> First, what we know, the keys are strings and the values can be strings, numbers (floats or ints), boolean values, lists, null, or another JSON object. second, what are the difference with Python dictionaries; A JSON objects, for example, represent the boolean values as lower case and empty values are <code>null</code>.</p> <p>A python dictionary equivalent is:</p> <pre><code>{\n     \"album_title\" : \"Yellow Submarine\",\n     \"release_year\" : 1966,\n     \"won_grammy\" : False,\n     \"band\" : \"The Beatles\",\n     \"album_sale\": None,\n     \"musicians\" : [\"John Lennon\", \"Paul McCartney\", \"George   Harrison\", \"Ringo Starr\"],\n     \"studio\" : {\"studio_name\": \"Abbey Road Studios\", \"location\": \"London, England\"}\n     }\n</code></pre> <p>Notice that in python dictionaries boolean values are capitalize and empty value are <code>None</code></p> <p>I will save this JSON in a .txt and called 'album.txt', later import <code>json</code> library and use <code>dir()</code> to check the available methods:</p> <pre><code>import json\nprint(dir(json))\n</code></pre> <p></p>"},{"location":"Python/Scripts/JSON%20Objects%20in%20Python.html#load-and-dump","title":"<code>load()</code> and <code>dump()</code>","text":"<p>We will focus in <code>load()</code> and <code>dump()</code> methods, for that we will open the file, and album.txt that contain a JSON object, we will open this file using <code>open()</code> and we can choose if open in writing mode or reading mode, this case will be reading so the second argument will be <code>'r'</code></p> <p><pre><code>import json as j\n\nalbum_json_file = open(\"album.TXT\",'r')\nalbum = j.load(album_json_file)\nprint(album)\n</code></pre> </p> <p>if we use <code>print(type(album))</code> the result will be a python dictionary type</p> \\[ &lt;class 'dict'&gt; \\] <p>We can verify this by checking two values, the value of \u2018won_grammy\u2019 that now is <code>False</code> and the value of \u2018album_sale\u2019 that now is <code>None</code>.</p> <p>Not that is parse as a dictionary we can call the different values as a dictionary:</p> <p><pre><code>print(\"Album Title: \", album['album_title'])\n</code></pre> or <pre><code>print(\"Release Year: \", album['release_year'])\n</code></pre></p>"},{"location":"Python/Scripts/JSON%20Objects%20in%20Python.html#json-in-a-string-form-and-the-method-loads","title":"JSON in a string form and the method <code>loads()</code>","text":"<p>In client server applications it is common for JSON objects to arrive in the form of strings. For example, our JSON object for album information can look something like this:</p> <pre><code>album_string = \"\"\"{\"album_title\" : \"Yellow Submarine\",\n     \"release_year\" : 1966,\n     \"won_grammy\" : false,\n     \"band\" : \"The Beatles\",\n     \"album_sale\": null,\n     \"musicians\" : [\"John Lennon\", \"Paul McCartney\", \"George   Harrison\", \"Ringo Starr\"],\n     \"studio\" : {\"studio_name\": \"Abbey Road Studios\", \"location\": \"London, England\"}\n     }\"\"\"\n</code></pre> <p>To load this data using the JSON module, we use the <code>loads()</code> method:</p> <pre><code>album_s = json.loads(album_string)\nalbum_string.close()\nprint(album_s)\n</code></pre> <p>Now, suppose we start with dictionary formatted data and wish to send this data to a database in JSON format.</p> <p>We can use the <code>dumps()</code> methods to convert dictionaries to string JSON objects. <pre><code>album2 = {'album_title': 'Yellow Submarine', 'release_year': 1966, 'won_grammy': False,\n 'band': 'The Beatles', 'album_sale': None, 'musicians': ['John Lennon', 'Paul McCartney', 'George   Harrison', 'Ringo Starr'],\n 'studio': {'studio_name': 'Abbey Road Studios', 'location': 'London, England'}}\nprint(json.dumps(album2))\nprint(type(json.dumps(album2)))\n</code></pre> </p> <p>We see that the \u2018album_sale\u2019 value, \u2018None\u2019, is now \u2018null\u2019 and the \u2018won_grammy\u2019 value, \u2018False\u2019, is now \u2018false\u2019.</p> <p>Finally, we can write this JSON object to a \u2018.txt\u2019 file using the dump method:</p> <p><pre><code>file2 = open(\"album2.txt\", \"w\")\njson.dump(album2, file2)\n</code></pre> </p>"},{"location":"Python/Scripts/Magic_square.html","title":"Magic Square","text":"<p>The following was a challenge in HackerRank the name of the challenge Forming a Magic Square</p> <p>First lets define what is a Magic square</p>"},{"location":"Python/Scripts/Magic_square.html#what-is-a-magic-square","title":"What is a Magic square","text":"<p>A magic square of order \\(n\\) is an arrangement of \\(n^2\\) numbers, usually distinct integers, in a square, such that the n numbers in all rows, all columns, and both diagonals sum to the same constant. A magic square contains the integers from \\(1\\) to \\(n^2\\).</p> 2 7 6 9 5 1 4 3 8 <p>The constant sum in every row, column and diagonal is called the magic constant or magic sum, \\(M\\). The magic constant of a normal magic square depends only on n and has the following value: \\(M = n(n^2+1)/2\\)</p> <p>more information fo how to generate ir here Magic Square</p>"},{"location":"Python/Scripts/Magic_square.html#the-problem","title":"The problem","text":"<p>We define a magic square to be an \\(nXn\\)  matrix of distinct positive integers from \\(1\\) to \\(n^2\\)  where the sum of any row, column, or diagonal of length \\(n\\) is always equal to the same number: the magic constant.</p> <p>You will be given a \\(3x3\\) matrix \\(s\\) of integers in the inclusive range \\([1,9]\\). We can convert any digit \\(a\\) to any other digit \\(b\\) in the range \\([1,9]\\)  at cost of \\(|a -b|\\) . Given \\(s\\), convert it into a magic square at minimal cost. Print this cost on a new line.</p>"},{"location":"Python/Scripts/Magic_square.html#the-answer-explained","title":"The answer explained","text":"<p>We will assume that we need to develop just the function to calculate the difference, but no the code necessary to display the answer.</p> <p>Considerations</p> <p>we are going to create an array with all the possible combination of a Magic Square \\(3x3\\).</p> <p>Steps</p> <ul> <li>Create an array: We are going to define an array with all the possible combination.</li> </ul> <p></p> <pre><code>    possibles = [\n        [[8,1,6],[3,5,7],[4,9,2]],\n        [[6,1,8],[7,5,3],[2,9,4]],\n        [[4,9,2],[3,5,7],[8,1,6]],\n        [[2,9,4],[7,5,3],[6,1,8]],\n        [[8,3,4],[1,5,9],[6,7,2]],\n        [[4,3,8],[9,5,1],[2,7,6]],\n        [[6,7,2],[1,5,9],[8,3,4]],\n        [[2,7,6],[9,5,1],[4,3,8]]\n        ]\n</code></pre> <ul> <li>Create a list where I will store all the \\(|a-b|\\) difference.</li> </ul> <pre><code>diffs = []\n</code></pre> <ul> <li>First loop, where we are going to extract every possible magic square variant, and define a variable call cost that is going to hold the difference from the element in the input and the element in the Magic square variant</li> </ul> <pre><code>for possible in possibles:\n    cost = 0\n</code></pre> <ul> <li>Second loop, in this one we want to make a tuple that holds each row from the magic square variant and the input, for that we are going to use <code>zip()</code> with the possible and the s which is the input <code>zip(possible,s)</code> and we are going to cast it to a <code>list()</code></li> </ul> <pre><code>for p_row, s_row in list(zip(possible,s)):\n</code></pre> <p>the first iteration will be something like this:</p> <pre><code>[([8, 1, 6], [4, 9, 2]), ([3, 5, 7], [3, 5, 7]), ([4, 9, 2], [8, 1, 5])] ...\n</code></pre> <p>First element is going to be the row from the magic square variant and the second will be the row from the input.</p> <ul> <li>Third loop, Here we are going to create a tuple with each value from the Magic square variant and the input, this will be use to compare number by number</li> </ul> <pre><code>for p_num, s_num in list(zip(p_row,s_row)):\n</code></pre> <p>will give an output like:</p> <pre><code>[(8, 4), (1, 9), (6, 2)]\n[(3, 3), (5, 5), (7, 7)]\n...\n</code></pre> <ul> <li>Comparison, inside the third loop we are going to compare each element for the magic square variant with the each element of the input, and store the absolute total difference of all the changes done.</li> </ul> <pre><code>if p_num != s_num:\n    cost += abs(p_num - s_num)\n</code></pre> <ul> <li>Populate the diffs list now all the different cost will be use to populate the diffs list</li> </ul> <pre><code>    for possible in possibles:\n        cost = 0\n        for p_row, s_row in list(zip(possible,s)):\n            for p_num, s_num in list(zip(p_row, s_row)):\n                if p_num != s_num:\n                 cost += abs(p_num - s_num)\n        diffs.append(cost)\n</code></pre> <ul> <li>Return the minimum value in the list returning the minimum value we will return the minimum difference ask in the challenge</li> </ul> <pre><code>return min(diffs)\n</code></pre>"},{"location":"Python/Scripts/Magic_square.html#the-answer-the-script","title":"The answer (the script)","text":"<p>so the the function will be like:</p> <pre><code>def formingMagicSquare(s):\n\n    possibles = [\n        [[8,1,6],[3,5,7],[4,9,2]],\n        [[6,1,8],[7,5,3],[2,9,4]],\n        [[4,9,2],[3,5,7],[8,1,6]],\n        [[2,9,4],[7,5,3],[6,1,8]],\n        [[8,3,4],[1,5,9],[6,7,2]],\n        [[4,3,8],[9,5,1],[2,7,6]],\n        [[6,7,2],[1,5,9],[8,3,4]],\n        [[2,7,6],[9,5,1],[4,3,8]]\n        ]\n\n    diffs = []\n\n    for possible in possibles:\n        cost = 0\n        for p_row, s_row in list(zip(possible,s)):\n            for p_num, s_num in list(zip(p_row, s_row)):\n                if p_num != s_num:\n                 cost += abs(p_num - s_num)\n        diffs.append(cost)\n    print(diffs)\n    return min(diffs)\n</code></pre>"},{"location":"Python/Scripts/Scraping_Usign_Python.html","title":"Scraping Using Python","text":"<p>We are going to use Beautifulsoup and other libraries to scrap Wikipedia:</p> <ol> <li>List of Countries: On accessing the first page, we\u2019ll extract the list of countries, their population and percentage of world population.</li> <li>Country: We\u2019ll then access each country\u2019s page, and get information including total area, percentage water, and GDP (nominal).</li> </ol>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#import-libraries","title":"Import Libraries","text":"<ul> <li>Numpy:  To be use with arrays.</li> <li>Pandas: To convert the data in a tabular structure so we can manipulate it.</li> <li>Urllib: To open the url from which we would like to extract the data.</li> <li>BeautifulSoup: This library helps us to get the HTML structure of the page that we want to work with. We can then, use its functions to access specific elements and extract relevant information.</li> </ul> <pre><code>import numpy as np\nimport pandas as pd\n\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n</code></pre>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#understanding-the-data","title":"Understanding the data","text":""},{"location":"Python/Scripts/Scraping_Usign_Python.html#getting-the-raw-data","title":"Getting the \"raw\" data","text":"<p>First we will need to get the \"raw\" data, the HTML content of the specific URL, for this we will create a function that will return this \"raw\" data.</p> <pre><code>def getHTMLContent(link):\n    html = urlopen(link)\n    soup = Beautifulsoup(html,'html.parser')\n    return soup\n</code></pre> <p>The Function <code>getHTMLContent()</code> will receive a link or URL, later we are going to use <code>urlopen()</code> to open this URL, tis will enable us to apply Beautifulsoup library. There are different parsers, for XML and HTML, but in this case, we will use just <code>html.parser</code> and we return  the output of this parser, <code>Beautifulsoup(markup,'html.parser')</code>, so we can extract our data.</p>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#finding-the-data-and-display-it-with-prettify","title":"Finding the data and display it with <code>prettify()</code>","text":"<p>we get the content of the URL but the information we need is in a table </p> <p>so we are going to store the information we got in a variable, later we will apply the method <code>find_all()</code> from Beautifulsoup  and the tag <code>table</code> so we can get all the tables in this HTML, later we are going to print it in a readable way using the method <code>prettify()</code></p> <pre><code>content = getHTMLContent(URL)\n#print(content)\ntables = content.find_all('table')\nfor table in tables:\n    print(table.prettify())\n</code></pre> <p>The code will print all the table in this HTML, therefore we will need to check which is the table that we need, but first let see the code so far:</p> <pre><code>import numpy as np\nimport pandas as pd\n\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nURL= 'https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population'\n\n\n#get the HTML\ndef getHTMLContent(link):\n    html = urlopen(link)\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\n\ncontent = getHTMLContent(URL)\n#print(content)\ntables = content.find_all('table')\nfor table in tables:\n    print(table.prettify())\n</code></pre> <p>Now we need one table  in specific</p> <p></p> <p>so we will need to find this table with the class wikitable sortable, We will use the method <code>find()</code>, since this method allow us no just find a tag but a tag with a specific tag, once we have the table we will get all the rows</p> <pre><code>table = content.find('table', {'class': 'wikitable sortable'})\nrows = table.find_all('tr')\n</code></pre> <p>now we have all the rows, we need to iterate over them to find the cell that contain the link to the country page&gt; we know that HTML table are detonated with <code>&lt;tr&gt;&lt;/tr&gt;</code> an each row is either be heading <code>&lt;th&gt;&lt;/th&gt;</code> or data <code>&lt;td&gt;&lt;/td&gt;</code> and we know that the country page is in the second column so <code>cells[1]</code> and we use <code>find()</code> to find the <code>a</code> elements, and we extract the link or <code>href</code> with <code>get()</code>:</p> <p><pre><code>for row in rows:\n    cells = row.find_all('td')\n    if len(cells) &gt; 1:\n        country_link = cells[1].find('a')\n        print(country_link.get('href'))\n</code></pre> so the code will be</p> <pre><code>import numpy as np\nimport pandas as pd\n\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nURL= 'https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population'\n\n\n#get the HTML\ndef getHTMLContent(link):\n    html = urlopen(link)\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\n\ncontent = getHTMLContent(URL)\n#print(content)\ntables = content.find_all('table')\n#for table in tables:\n    #print(table.prettify())\n\ntable = content.find('table', {'class': 'wikitable sortable'})\nrows = table.find_all('tr')\n\nfor row in rows:\n    cells = row.find_all('td')\n    if len(cells) &gt; 1:\n        country_link = cells[1].find('a')\n        print(country_link.get('href'))\n</code></pre> <p>and the result</p> <p></p> <p>We can see that the information or links that we got back don't include the first part of the URL so we will need to prefix \"https://en.wikipedia.org\".</p> <p>Later we will create a variable called <code>root_URL</code> that will contain \"https://en.wikipedia.org\"</p>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#data-for-each-country","title":"Data for Each country","text":"<p>Now, we Will use the list of link to go to each country page and locate the card to the right of the screen where there is the remaining information.</p> <p>inspecting the country page we found that the class for card mentioned above is <code>infobox geography vcard</code></p> <p></p> <p>Here is when we run into some issues, we are looking for the following fields:</p> <ul> <li>Area &gt; Total area</li> <li>Water (%)</li> <li>GDP (nominal) &gt; Total</li> <li>Per capita</li> </ul> <p>but their order vary in each country page, so we will need to make some adjustment.</p>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#modifying-current-code","title":"Modifying current code","text":"<p>We will start making a small modification in the code, we will create a new function that will return a list with the link of all the counties</p> <pre><code>import numpy as np\nimport pandas as pd\n\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nroot_URL = 'https://en.wikipedia.org'\nURL= 'https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population'\ncountry_links = []\n\n#get the HTML\ndef getHTMLContent(link):\n    html = urlopen(link)\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\n# get the link of all countries\ndef getCountryLinks(URL):\n    content = getHTMLContent(URL)\n    #tables = content.find_all('table')\n    table = content.find('table', {'class': 'wikitable sortable'})\n    rows = table.find_all('tr')\n    for row in rows:\n        cells = row.find_all('td')\n        if len(cells) &gt; 1:\n            country_link = cells[1].find('a').get('href')\n            #print(country_link.get('href'))\n            country_links.append(country_link)\n\ngetCountryLinks(URL)\nprint(country_links)\n</code></pre>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#values-in-different-positions-something-to-thing-about-it","title":"Values in different positions - Something to thing about it","text":"<p>Now, with few pages inspected we can see where will be a problem, the location of the different values we want are in different position depending of the country.</p> <p>We now the information is in tags with classes <code>mergedrow</code> or <code>mergedrowbottom</code> but the position of the row that contain the information it is not constant, in the first example, we see that we don't have <code>water(%)</code> but in the second page we do have this value, making the position of population one position down in comparison with the first example</p> <p></p> <p></p> <p>To solve this we will add some extra code. We will start by adding a new variable called <code>additional_details</code>, later use it to append the information we collect form each country page to the table with the list of countries. Next, we will create a function <code>getadditionalDetails()</code> and a variable flag <code>read_content</code>, we will explain the usage later.</p> <p>we are going to use three type of function here:</p> <ol> <li><code>get()</code> With this function we will find and get the reference of a particular element.</li> <li><code>get_text()</code> the function will return the text that is within the opening and close tags of an element.</li> <li><code>strip()</code> This will remove the white spaces at both sides of the string or text.</li> </ol>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#getadditionaldetails-function","title":"<code>getadditionalDetails()</code> function:","text":"<p>First, we will create a new variable</p> <pre><code># to be use in getAdditionalDetails\nadditional_details = []\n</code></pre> <p>next, the function</p> <pre><code>def getAdditionalDetails(country_link):\n    try:\n        country_page = getHTMLContent('https://en.wikipedia.org' + country_link)\n        table = country_page.find('table', {'class': 'infobox geography vcard'})\n        read_content = False\n\n        for tr in table.find_all('tr'):\n\n            if (tr.get('class') == ['mergedtoprow'] and not read_content):\n                link = tr.find('a')\n\n                if (link and (link.get_text().strip() == 'Area' or (link.get_text().strip() == 'GDP' and tr.find('span').get_text().strip() == '(nominal)'))):\n                    read_content = True\n\n                if (link and (link.get_text().strip() == 'Population')):\n                    read_content = False\n\n            elif ((tr.get('class') == ['mergedrow'] or tr.get('class') == ['mergedbottomrow']) and read_content):\n                additional_details.append(tr.find('td').get_text().strip('\\n'))\n\n                if (tr.find('div').get_text().strip() != '\u2022\\xa0Total area' and\n                   tr.find('div').get_text().strip() != '\u2022\\xa0Total'):\n                    read_content = False\n        return additional_details\n\n    except Exception as error:\n        print('Error occurred: {}'.format(error))\n        return []\n</code></pre> <p>We have a <code>try/except</code> block that will wrap the logic and it will prevent the script to crash if one of the links doesn't provide the information in the same format or if the page is empty</p> <ol> <li> <p>We get the links for the countries, remember those links don't have the root url so here we concatenate them with the root URL. We find the table with the classes <code>infobox geography vcard</code>, and set the flag <code>read_content</code>.</p> </li> <li> <p>We use a <code>for</code> loop to iterate over all the <code>&lt;tr&gt;</code> tags on the table.</p> </li> <li> <p>We use a decision block to check if the class in the <code>&lt;tr&gt;</code> is  <code>mergedtoprow</code> and <code>not read_content</code>. if the condition are match we save the content of <code>&lt;a&gt;</code> on the variable <code>link</code>.</p> </li> <li> <p>the next two condition blocks are checking if the information on the page is following the order that we want, in which case we set the <code>read_content</code> to True , otherwise <code>read_content</code> will be set as False.</p> </li> <li> <p>the <code>elif</code> part of the initial conditional will be the one that will populate the variable <code>additional_details</code></p> </li> <li> <p>Finally the <code>except</code> block, this will be used to report back if there is any issue.</p> </li> </ol>"},{"location":"Python/Scripts/Scraping_Usign_Python.html#create-the-dataset","title":"Create the dataset","text":""},{"location":"Python/Scripts/Scrapy_and_Scrapyrt.html","title":"Scrapy and Scrapyrt","text":"<p>Scrapy is a free and open-source web crawling framework written in Python. With Scrapy we can send requests to websites and parse the HTML code received as response.</p> <p>Scrapyrt (Scrapy realtime), we can create an HTTP server that can control Scrapy through HTTP requests. The response send by the server will be data formatted as JSON and it will contain the data scraped by Scrapy.</p> <p>With the combination of these two tools, We can create an entire API without need a database.</p>"},{"location":"Python/Scripts/Scrapy_and_Scrapyrt.html#set-up-scrapy-and-create-your-spider","title":"Set up Scrapy and create your spider","text":"<p>To install Scrapy we can use <code>pip</code></p> <p><pre><code>pip install scrapy\n</code></pre> Once the installation completed, you can start a Scrapy project by running:</p> <pre><code>scrapy startproject &lt;project_name&gt;\n</code></pre> <p>We will use an article from Medium.com as guide, for that we will use coinmarketcap.com</p> <pre><code>scrapy startproject coinmarketcap\n</code></pre> <p>We will scrape the URL: https://coinmarketcap.com/all/views/all/. It contains information about cryptocurrencies such as their current prices, their price variations, etc.</p> <p>The goal is to collect those data with Scrapy and then to return them as JSON value with Scrapyrt.</p> <p>the project folder structure should currently look like this:</p> <p></p>"},{"location":"Python/Scripts/Scrapy_and_Scrapyrt.html#the-first-spider","title":"The First Spider","text":"<p>To create the new spider we need to create a new file in the spiders folder.</p> <p>The file\u2019s name doesn\u2019t really matter, it should just represent what your spider is scraping. in this example we simply call it <code>coinSpider.py</code>.</p> <p>First let\u2019s create a class that inherits from scrapy.Spider.</p> <p><pre><code>import scrapy\n\nclass CoinSpider(scrapy.Spider):\n</code></pre> A Spider class must have a <code>name</code> attribute. This element will help you to inform Scrapy which crawler you want to start.</p> <p><pre><code>import scrapy\n\nclass CoinSpider(scrapy.Spider):\n    name = \"coin\"\n</code></pre> Now we need to tell Scrapy what is the URL we want to send the request to. We\u2019ll use <code>start_requests</code> method. This method will return the Scrapy request to the URL we want to crawl.</p> <p><pre><code>import scrapy\n\nclass CoinSpider(scrapy.Spider):\n    name = \"coin\"\n\n    def start_requests(self):\n        url = \"https://coinmarketcap.com/all/views/all/\"\n        yield scrapy.Request(url=url, callback=self.parse)\n</code></pre> The <code>scrapy.Request</code> function takes the URL we want to crawl as the first parameter and a callback function that will parse the response we\u2019ll receive from the request.</p> <p>Now we need to create that callback function</p> <p><pre><code>def parse(self, response):\n        for row in response.css(\"tbody tr\"):\n            yield {\n                \"name\": row.css(\"a.currency-name-container::text\").extract_first(),\n                \"symbol\": row.css(\"td.col-symbol::text\").extract_first(),\n                \"market_cap\": row.css(\"td.market-cap::text\").extract_first(),\n                \"price\": row.css(\"a.price::attr(data-usd)\").extract_first(),\n                \"circulating_supply\": row.css(\"td.circulating-supply span::attr(data-supply)\").extract_first(),\n                \"volume\": row.css(\"a.volume::attr(data-usd)\").extract_first()\n            }\n</code></pre> Our parse method will go through each row of the table containing the cryptocurrency data that we want for our API. It then selects the wanted information using CSS selector.</p> <p>The line <code>for row in response.css(\u201ctbody tr\u201d)</code> basically says \u201ctake the content of the response, select all the <code>&lt;tr&gt;</code> in the <code>&lt;tbody&gt;</code>, assign individually the content of each of them in the row variable\u201d. The value of this variable would look like something like this for the first line of the table:</p> <pre><code>&lt;tr id=\"id-bitcoin\" class=\"odd\" role=\"row\"&gt;\n    &lt;td class=\"text-center\"&gt;\n        1\n    &lt;/td&gt;\n    &lt;td class=\"no-wrap currency-name\" data-sort=\"Bitcoin\"&gt;\n        &lt;div class=\"s-s-1 logo-sprite\"&gt;&lt;/div&gt;\n        &lt;span class=\"currency-symbol visible-xs\"&gt;&lt;a class=\"link-secondary\" href=\"/currencies/bitcoin/\"&gt;BTC&lt;/a&gt;&lt;/span&gt;\n        &lt;br class=\"visible-xs\"&gt;\n        &lt;a class=\"currency-name-container link-secondary\" href=\"/currencies/bitcoin/\"&gt;Bitcoin&lt;/a&gt;\n    &lt;/td&gt;\n    &lt;td class=\"text-left col-symbol\"&gt;BTC&lt;/td&gt;\n    &lt;td class=\"no-wrap market-cap text-right\" data-usd=\"1.10882148223e+11\" data-btc=\"17226975.0\" data-sort=\"1.10882148223e+11\"&gt;$110&amp;nbsp;882&amp;nbsp;148&amp;nbsp;223&lt;/td&gt;\n    &lt;td class=\"no-wrap text-right\" data-sort=\"6436.54200598\"&gt;\n        &lt;a href=\"/currencies/bitcoin/#markets\" class=\"price\" data-usd=\"6436.54200598\" data-btc=\"1.0\"&gt;$6&amp;nbsp;436,54&lt;/a&gt;\n    &lt;/td&gt;\n    &lt;td class=\"no-wrap text-right circulating-supply\" data-sort=\"17226975.0\"&gt;\n        &lt;span data-supply=\"17226975.0\" data-supply-container=\"\"&gt;17&amp;nbsp;226&amp;nbsp;975&lt;/span&gt;\n    &lt;/td&gt;\n    &lt;td class=\"no-wrap text-right \" data-sort=\"3666361510.97\"&gt;\n        &lt;a href=\"/currencies/bitcoin/#markets\" class=\"volume\" data-usd=\"3666361510.97\" data-btc=\"571144.12818\"&gt;$3&amp;nbsp;666&amp;nbsp;361&amp;nbsp;511&lt;/a&gt;\n    &lt;/td&gt;\n    &lt;td class=\"no-wrap percent-change   text-right positive_change\" data-timespan=\"1h\" data-percentusd=\"0.01\" data-symbol=\"BTC\" data-sort=\"0.0133683\"&gt;0,01%&lt;/td&gt;\n    &lt;td class=\"no-wrap percent-change   text-right positive_change\" data-timespan=\"24h\" data-percentusd=\"0.65\" data-symbol=\"BTC\" data-sort=\"0.648688\"&gt;0,65%&lt;/td&gt;\n    &lt;td class=\"no-wrap percent-change   text-right positive_change\" data-timespan=\"7d\" data-percentusd=\"0.97\" data-symbol=\"BTC\" data-sort=\"0.974922\"&gt;0,97%&lt;/td&gt;\n    &lt;td class=\"more-options-cell dropdown\" data-more-options=\"\" data-cc-id=\"1\" data-cc-slug=\"bitcoin\"&gt;\n        &lt;button class=\"btn btn-transparent dropdown-toggle\" type=\"button\" id=\"dropdown-menu-1\" data-toggle=\"dropdown\"&gt;\n            &lt;span class=\"glyphicons glyphicons-more text-gray\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\" aria-labelledby=\"dropdown-menu-1\"&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"#\" data-watchlist-add=\"\"&gt;Add to Watchlist&lt;/a&gt;&lt;/li&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"#\" data-watchlist-remove=\"\" style=\"display: none;\"&gt;Remove from Watchlist&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"disabled\" role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"#\" data-watchlist-full=\"\" style=\"display: none;\"&gt;Watchlist full!&lt;/a&gt;&lt;/li&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"/currencies/bitcoin/#charts\"&gt;View Chart&lt;/a&gt;&lt;/li&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"/currencies/bitcoin/#markets\"&gt;View Markets&lt;/a&gt;&lt;/li&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"/currencies/bitcoin/historical-data/\"&gt;View Historical Data&lt;/a&gt;&lt;/li&gt;\n        &lt;li role=\"presentation\"&gt;&lt;a role=\"menuitem\" tabindex=\"-1\" href=\"https://payments.changelly.com/?crypto=BTC&amp;amp;fiat=USD&amp;amp;ref_id=coinmarketcap\" target=\"_blank\" rel=\"nofollow noopener\"&gt;Buy / Sell Instantly&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre> <p>We then loop through each row and apply one more CSS selector to extract the exact value that we want. For example; The name of the currency is contained in a link <code>&lt;a&gt;</code> which has the class <code>currency-name-container</code> assigned to it. By adding <code>::text</code> to the selector, we specify that we want the text between <code>&lt;a&gt;</code> and <code>&lt;/a&gt;</code>. The method <code>.extract_first()</code> is added after the selector to indicate that we want the first value found by the parser.</p> <p>We repeat the process with all the data we want to extract, and we then return them in a dictionary.</p> <p>Quick note: if the data that you want to extract is not between two HTML tags but in an attribute, you can use <code>::attr(&lt;name_of_the_attribute&gt;)</code> in the CSS selector. In our case we have <code>::attr(data-usd)</code> as an example.</p> <p>So putting everything together the spider will look like:</p> <pre><code>import scrapy\n\nclass CoinSpider(scrapy.Spider):\n    name = \"coin\"\n\n    def start_requests(self):\n        url = \"https://coinmarketcap.com/all/views/all/\"\n        yield scrapy.Request(url=url, callback=self.parse)\n\n    def parse(self, response):\n        for row in response.css(\"tbody tr\"):\n            yield {\n                \"name\": row.css(\"a.currency-name-container::text\").extract_first(),\n                \"symbol\": row.css(\"td.col-symbol::text\").extract_first(),\n                \"market_cap\": row.css(\"td.market-cap::text\").extract_first(),\n                \"price\": row.css(\"a.price::attr(data-usd)\").extract_first(),\n                \"circulating_supply\": row.css(\"td.circulating-supply span::attr(data-supply)\").extract_first(),\n                \"volume\": row.css(\"a.volume::attr(data-usd)\").extract_first()\n            }\n</code></pre>"},{"location":"Python/Scripts/Scrapy_and_Scrapyrt.html#run-the-spider","title":"Run the spider","text":"<p>Using the terminal and set our working directory in your Scrapy project folder. example:</p> <p><code>C:\\Users\\BlackDesktop\\Documents\\Hero of Alexandria\\006. [Scrapy] Create an API with Scrapy and Scrapyrt\\coinmarketcap</code></p> <p>To start the crawler and save the scraped data in a JSON file, run the following command:</p> <p><code>scrapy crawl &lt;name_of_the_spider&gt; -o &lt;output_file_name&gt;.json</code></p> <p>In our case:</p> <p><code>scrapy crawl coin -o coin.json</code></p> <p>The file coin.json should be created at the root of your coinmarketcap folder</p> <p></p> <p>It should contain the result scraped by the spider similar to the following format:</p> <pre><code>[\n{\"name\": \"Bitcoin\", \"symbol\": \"BTC\", \"market_cap\": \"\\n$111,793,976,147\\n\", \"price\": \"6489.45341094\", \"circulating_supply\": \"17227025.0\", \"volume\": \"3643933075.18\"},\n{\"name\": \"Ethereum\", \"symbol\": \"ETH\", \"market_cap\": \"\\n$28,021,091,521\\n\", \"price\": \"276.039836485\", \"circulating_supply\": \"101511042.311\", \"volume\": \"1356884351.47\"},\n{\"name\": \"XRP\", \"symbol\": \"XRP\", \"market_cap\": \"\\n$12,774,073,210\\n\", \"price\": \"0.323193723266\", \"circulating_supply\": \"39524508956.0\", \"volume\": \"221046052.002\"},\n{\"name\": \"Bitcoin Cash\", \"symbol\": \"BCH\", \"market_cap\": \"\\n$9,107,466,682\\n\", \"price\": \"526.167151135\", \"circulating_supply\": \"17309075.0\", \"volume\": \"291574904.596\"},\n  ...\n</code></pre>"},{"location":"Python/Scripts/Scrapy_and_Scrapyrt.html#install-scrapyrt-and-combine-it-with-our-project","title":"Install Scrapyrt and combine it with our project","text":"<p>Let\u2019s now use Scrapyrt to serve those data through an HTTP request instead of having them saved in a JSON file.</p> <p>To install scrapyrt we run</p> <p><code>pip install scrapyrt</code></p> <p>To use it, open your terminal again and set your working directory to the Scrapy project folder. Then run the following command:</p> <p><code>scrapyrt -p &lt;PORT&gt;</code></p> <p><code>&lt;PORT&gt;</code> can be replaced with a port number. For example</p> <p><code>scrapyrt -p 3000</code></p> <p>With this command Scrapyrt will setup locally a simple HTTP server that will allow you to control your crawler.  We can access it with a <code>GET</code> request through the endpoint <code>http://localhost:&lt;PORT&gt;/crawl.json.</code></p> <p>To work properly it also needs at least these two arguments: <code>start_requests (Boolean)</code> and <code>spider_name (string)</code>. to see the results we can open the browser on:</p> <p><code>http://localhost:3000/crawl.json?start_requests=true&amp;spider_name=coin</code></p> <p>The result should look like this:</p> <p></p>"},{"location":"Python/Scripts/create_dataset_api_python.html","title":"Creating a dataset with api and python","text":"<p>The idea will be follow the article from medium Creating a dataset using an API with Python from this we will change code at will to fit more my personal style or just to try different things.</p>"},{"location":"Python/Scripts/create_dataset_api_python.html#import-libraries","title":"Import Libraries","text":"<p>There will be 3 main libraries to be use in this project:</p> <ul> <li> <p><code>request</code> this will help use to get content from the API usign the method <code>get()</code> and to decide the format of how are we getting this info using <code>json()</code> so we can handle the answer for he API using JSON.</p> </li> <li> <p><code>json</code> with this library we can work with JSON</p> </li> <li> <p><code>pandas</code> this will help us to create the dataframes that later can be export to a .cvs file.</p> </li> </ul> <p>we will import <code>numpy</code> as well, ... just in case.</p>"},{"location":"Python/Scripts/create_dataset_api_python.html#understanding-the-api","title":"Understanding the API","text":"<p>We want first to understand what is the information that the API is giving us, what type of data and what values, so for that we are going to start by calling the API and display the content.</p> <p>first, the API end point is https://wind-bow.glitch.me/twitch-api/channels/freecodecamp this API doesn't require any authentication which will make the process easier</p> <pre><code>import numpy as np\nimport pandas as pd\nimport requests\nimport json\n\nurl = \"https://wind-bow.glitch.me/twitch-api/channels/freecodecamp\"\nJSONContent = requests.get(url).json()\ncontent = json.dumps(JSONContent, indent=4, sort_keys=True)\nprint(content)\n</code></pre> <p>and the result is:</p> <p></p> <p>The screen-shot looks messy but we will see the response after explain a bit the code.</p> <p>We use the variable URL in order to store the end point for the API, Later we use <code>requests.get(url).json()</code>  that will give use the response of the API (URL) in a JSON format, as a final step we dump the data with <code>dump()</code> so we can see the content in a readable way, this is done thanks to the parameters <code>indent=4</code> and <code>sort_key=True</code>.</p> <pre><code>{\n    \"_id\": 79776140,\n    \"_links\": {\n        \"chat\": \"https://api.twitch.tv/kraken/chat/freecodecamp\",\n        \"commercial\": \"https://api.twitch.tv/kraken/channels/freecodecamp/commercial\",\n        \"editors\": \"https://api.twitch.tv/kraken/channels/freecodecamp/editors\",\n        \"features\": \"https://api.twitch.tv/kraken/channels/freecodecamp/features\",\n        \"follows\": \"https://api.twitch.tv/kraken/channels/freecodecamp/follows\",\n        \"self\": \"https://api.twitch.tv/kraken/channels/freecodecamp\",\n        \"stream_key\": \"https://api.twitch.tv/kraken/channels/freecodecamp/stream_key\",\n        \"subscriptions\": \"https://api.twitch.tv/kraken/channels/freecodecamp/subscriptions\",\n        \"teams\": \"https://api.twitch.tv/kraken/channels/freecodecamp/teams\",\n        \"videos\": \"https://api.twitch.tv/kraken/channels/freecodecamp/videos\"\n    },\n    \"background\": null,\n    \"banner\": null,\n    \"broadcaster_language\": \"en\",\n    \"created_at\": \"2015-01-14T03:36:47Z\",\n    \"delay\": null,\n    \"display_name\": \"FreeCodeCamp\",\n    \"followers\": 11770,\n    \"game\": \"Creative\",\n    \"language\": \"en\",\n    \"logo\": \"https://static-cdn.jtvnw.net/jtv_user_pictures/freecodecamp-profile_image-d9514f2df0962329-300x300.png\",\n    \"mature\": false,\n    \"name\": \"freecodecamp\",\n    \"partner\": false,\n    \"profile_banner\": \"https://static-cdn.jtvnw.net/jtv_user_pictures/freecodecamp-profile_banner-6f5e3445ff474aec-480.png\",\n    \"profile_banner_background_color\": null,\n    \"status\": \"Some GoLang Today #go #golang #youtube\",\n    \"updated_at\": \"2018-09-19T23:01:33Z\",\n    \"url\": \"https://www.twitch.tv/freecodecamp\",\n    \"video_banner\": \"https://static-cdn.jtvnw.net/jtv_user_pictures/freecodecamp-channel_offline_image-b8e133c78cd51cb0-1920x1080.png\",\n    \"views\": 216340\n}\n</code></pre> <p>From this response we get enough information to continue, we are going to use few properties:</p> <ul> <li><code>_id</code></li> <li><code>display_name</code></li> <li><code>status</code></li> <li><code>followers</code></li> <li><code>views</code></li> </ul>"},{"location":"Python/Scripts/create_dataset_api_python.html#creating-the-dataset","title":"Creating the dataset","text":"<p>First we will need to make a list that will contain the name of the channels that we want to get the information, later we will:</p> <ol> <li>Use the <code>append()</code> method to populate a variable  with the properties we want.</li> <li>use the <code>DataFrame()</code> from pandas library to create the dataframe which is a similar structure to a table</li> </ol>"},{"location":"Python/Scripts/create_dataset_api_python.html#list-of-channels","title":"List of channels","text":"<pre><code># List of channels we want to access\nchannels = [\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\", \"storbeck\", \"habathcx\", \"RobotCaleb\"]\n</code></pre>"},{"location":"Python/Scripts/create_dataset_api_python.html#variable-to-save-the-information-after-hit-the-api","title":"Variable to save the information after hit the API","text":"<pre><code>Channels_list = []\n</code></pre>"},{"location":"Python/Scripts/create_dataset_api_python.html#loop-to-get-response-for-each-channels","title":"Loop to get response for each channels","text":"<pre><code>for channel in channels;\n    JSONContent = requests.get(\"https://wind-bow.glitch.me/twitch-api/channels/\" + channel).json()\n    Channels_list.append([JSONContent[\"_id\"],JSONContent[\"display_name\"],JSONContent[\"status\"],JSONContent[\"followers\"],JSONContent[\"views\"]])\n</code></pre> <p>we use the [] to access the specific parameter, to this point the script will loop like this:</p> <pre><code>import numpy as np\nimport pandas as pd\nimport requests\nimport json\n\nurl = \"https://wind-bow.glitch.me/twitch-api/channels/freecodecamp\"\nJSONContent = requests.get(url).json()\ncontent = json.dumps(JSONContent, indent=4, sort_keys=True)\n#print(content)\n\nchannels = [\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\", \"storbeck\", \"habathcx\", \"RobotCaleb\"]\nchannels_list = []\n\nfor channel in channels:\n    JSONContent = requests.get(\"https://wind-bow.glitch.me/twitch-api/channels/\" + channel).json()\n    channels_list.append([JSONContent['_id'], JSONContent['display_name'], JSONContent['status'],JSONContent['followers'], JSONContent['views']])\n\n\n#print(channels_list)\n\ndataset = pd.DataFrame(channels_list)\nprint(dataset.sample(5))\n</code></pre> <p>producing this result:</p> <p></p> <p><code>sample(5)</code> allow me to display 5 random records</p>"},{"location":"Python/Scripts/create_dataset_api_python.html#enhancing-the-dataset","title":"Enhancing the Dataset","text":"<p>Now we can see that are few things we can improve in the dataset we are creating;</p> <ol> <li> <p>The headings: there right now just numbers, but we can name them to represent the columns in more meaningful way.</p> </li> <li> <p>There are some empty cells we can remove them</p> </li> </ol>"},{"location":"Python/Scripts/create_dataset_api_python.html#the-headings","title":"The headings","text":"<p>we can use the method <code>columns()</code> from pandas to name the columns</p> <pre><code>dataset = pd.DataFrame(channels_list)\n\ndataset.columns = ['ID', 'Name', 'Status', 'Followers', \"Views\"]\n\nprint(dataset.sample(5))\n</code></pre> <p></p>"},{"location":"Python/Scripts/create_dataset_api_python.html#removing-rows-with-empty-columns","title":"Removing rows with Empty columns","text":"<p>In this case we are going to use <code>dropan(axis = 0, how = 'any', inplace = True)</code> this will drop the rows that has some empty columns, after this we need to reindex the dataframe for that we use <code>dataset.index = pd.RangeIndex(len(dataset.index))</code></p> <pre><code>dataset.dropna(axis = 0, how = 'any', inplace = True)\ndataset.index = pd.RangeIndex(len(dataset.index))\n</code></pre> <p>so the code will be:</p> <pre><code>import numpy as np\nimport pandas as pd\nimport requests\nimport json\n\nurl = \"https://wind-bow.glitch.me/twitch-api/channels/freecodecamp\"\nJSONContent = requests.get(url).json()\ncontent = json.dumps(JSONContent, indent=4, sort_keys=True)\n#print(content)\n\nchannels = [\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\", \"storbeck\", \"habathcx\", \"RobotCaleb\"]\nchannels_list = []\n\nfor channel in channels:\n    JSONContent = requests.get(\"https://wind-bow.glitch.me/twitch-api/channels/\" + channel).json()\n    channels_list.append([JSONContent['_id'], JSONContent['display_name'], JSONContent['status'],JSONContent['followers'], JSONContent['views']])\n\n\n#print(channels_list)\n\ndataset = pd.DataFrame(channels_list)\n\n#Name the columns\ndataset.columns = ['ID', 'Name', 'Status', 'Followers', \"Views\"]\n#drop rows with empty columns\ndataset.dropna(axis = 0, how = 'any', inplace = True)\n#re-index the DataFrame\ndataset.index = pd.RangeIndex(len(dataset.index))\n\nprint(dataset.sample(5))\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html","title":"Create Excel Files With Python","text":"<p>First we are going to create a csv file using the build-in csv module, after that we will proceed to use a third party library to create a xlsx file.</p>"},{"location":"Python/Scripts/create_excel_files.html#creating-a-csv-file","title":"Creating a CSV file","text":"<p>To be able to work with this type of file we are going to import CSV in the following way</p> <pre><code>import csv\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html#cvs-module","title":"CVS Module","text":"<p>the CVS module includes all necessary methods built-in some of which are:</p> <ul> <li>csv.reader</li> <li>csv.writer</li> <li>csv.DictReader</li> <li>csv.DictWriter</li> </ul> <p>with this method we can edit, modify and manipulate the stored data in a csv file.</p>"},{"location":"Python/Scripts/create_excel_files.html#initial-preparation","title":"Initial preparation","text":"<p>First we will need to prepare the file so it can be run with <code>python namefile.py</code> for that we  add the <code>if __name__ == \"__main__\"</code></p> <pre><code>import csv\n\n\n\n\nif __name__ = \"__main__\":\n    main()\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html#name-of-the-file-header-and-data","title":"Name of the file, header and data","text":"<p>Now, we proceed to define some variables, the name of the file with <code>filename</code>, later the headers ( or the name of the columns) with <code>header</code> and provide some data with <code>data</code></p> <pre><code>import csv\n\nfilename = \"imdb_top_4.csv\"\nheader = (\"Rank\", \"Rating\", \"Title\")\ndata = [\n(1, 9.2, \"The Shawshank Redemption(1994)\"),\n(2, 9.2, \"The Godfather(1972)\"),\n(3, 9, \"The Godfather: Part II(1974)\"),\n(4, 8.9, \"Pulp Fiction(1994)\")\n]\n\n\nif __name__ = \"__main__\":\n    main()\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html#function-to-write-on-the-file","title":"Function to write on the file","text":"<p>The next step will be create a function that write the data on the file, this function will have 3 parameters, <code>header</code>,<code>data</code>, and <code>filename</code>. Inside this function we will write the first line of the file with the content of header, this will give the name to the columns and later with a <code>for</code> loop we will write the data.</p> <pre><code>def writer(header,data,filename):\n    with open(filename,\"w\",newline = \" \") as csvfile:\n        movies = cvs.writer(csvfile)\n        movies.writerow(header)\n        for x in data:\n            movies.writerow(x)\n</code></pre> <p>so the full, first version of the script will be, notice that there is a call to the function <code>writer</code> after the variable <code>data</code> is defined.</p> <pre><code>import csv\n\nfilename = \"imdb_top_4.csv\"\nheader = (\"Rank\", \"Rating\", \"Title\")\ndata = [\n(1, 9.2, \"The Shawshank Redemption(1994)\"),\n(2, 9.2, \"The Godfather(1972)\"),\n(3, 9, \"The Godfather: Part II(1974)\"),\n(4, 8.9, \"Pulp Fiction(1994)\")\n]\n\nwriter(header, data, filename, \"write\")\n\ndef writer(header,data,filename):\n    with open(filename,\"w\",newline = \" \") as csvfile:\n        movies = cvs.writer(csvfile)\n        movies.writerow(header)\n        for x in data:\n            movies.writerow(x)\n\n\n\n\nif __name__ = \"__main__\":\n    main()\n</code></pre> <p>And the result will be like:</p> <p></p>"},{"location":"Python/Scripts/create_excel_files.html#updating-a-csv-files","title":"Updating a CSV files","text":"<p>To update this type of file and in this case we will need to create a new function named 'updater' that will just take the <code>filename</code> as a parameter.</p> <pre><code>def updater(filename):\n    with open(filename, newline= \"\") as file:\n        readData = [row for row in csv.DictReader(file)]\n        readData[0]['Rating'] = '9.4'\n\n        readHeader = readData[0].keys()\n        writer(readHeader,readData,filename,\"update\")\n</code></pre> <p>In this function:</p> <ol> <li>We open the file define in <code>filename</code> and we are going to called it 'file'.</li> <li>Save all the information from that file in a variable called <code>readData</code>,  cvs.DictReader</li> <li>the next line <code>readData[0]['Rating'] = '9.4'</code> is hard-coding the value 9.4 in the 'Rating' column.</li> <li>the last line will tell the function <code>writer</code> that we are executing an update ( this option is not yet define in the function <code>writer</code> that will be the next step)</li> <li>finally we add a call to the function <code>uodater</code> after the call to the function <code>writer</code></li> </ol> <pre><code>import csv\n\nfilename = \"imdb_top_4.csv\"\nheader = (\"Rank\", \"Rating\", \"Title\")\ndata = [\n(1, 9.2, \"The Shawshank Redemption(1994)\"),\n(2, 9.2, \"The Godfather(1972)\"),\n(3, 9, \"The Godfather: Part II(1974)\"),\n(4, 8.9, \"Pulp Fiction(1994)\")\n]\n\nwriter(header, data, filename, \"write\")\nupdater(filename)\n\ndef writer(header,data,filename):\n    with open(filename,\"w\",newline = \" \") as csvfile:\n        movies = cvs.writer(csvfile)\n        movies.writerow(header)\n        for x in data:\n            movies.writerow(x)\n    # TODO option to update\n\ndef updater(filename):\n    with open(filename, newline= \"\") as file:\n        readData = [row for row in csv.DictReader(file)]\n        readData[0]['Rating'] = '9.4'\n\n        readHeader = readData[0].keys()\n        writer(readHeader,readData,filename,\"update\")\n\n\nif __name__ = \"__main__\":\n    main()\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html#create-the-option-for-update","title":"Create the option for update","text":"<p>Now, we need to modify the function <code>writer</code> to be able to receive an extra parameter, and inside, some modifications to handle these options for \"write\" and \"update\".</p> <ol> <li>lets add the extra parameter, this will be called option</li> </ol> <pre><code>def writer(header, data, filename, option):\n    ...\n</code></pre> <ol> <li>Inside we are going to create a decision loop to execute some part of the code depending of the the parameter option</li> </ol> <pre><code>def writer(header, data, filename, option):\n    with open(filename, \"w\", newline = \"\") as csvfile:\n        if option == \"write\":\n            movies = csv.writer(csvfile)\n            movies.writerow(headers)\n            for x in data:\n                movies.writerow(x)\n\n        elif option == \"update\":\n            writer = csv.DictWriter(csvfile, fieldnames = headers)\n            writer.writeheader()\n            write.writerow(data)\n        else:\n            print(\"option is not know\")\n</code></pre> <p>More information about <code>DictWriter</code> here but basically here is use to write a row with the field names.</p> <p>so with all this changes we will have a script that look like this:</p> <pre><code>import csv\n\nfilename = \"imdb_top_4.csv\"\nheader = (\"Rank\", \"Rating\", \"Title\")\ndata = [\n(1, 9.2, \"The Shawshank Redemption(1994)\"),\n(2, 9.2, \"The Godfather(1972)\"),\n(3, 9, \"The Godfather: Part II(1974)\"),\n(4, 8.9, \"Pulp Fiction(1994)\")\n]\n\n\nwriter(header, data, filename, \"write\")\nupdater(filename)\n\n\ndef writer(header, data, filename, option):\n    with open(filename, \"w\", newline = \"\") as csvfile:\n        if option == \"write\":\n            movies = csv.writer(csvfile)\n            movies.writerow(headers)\n            for x in data:\n                movies.writerow(x)\n\n        elif option == \"update\":\n            writer = csv.DictWriter(csvfile, fieldnames = headers)\n            writer.writeheader()\n            write.writerow(data)\n        else:\n            print(\"option is not know\")\n\ndef updater(filename):\n    with open(filename, newline= \"\") as file:\n        readData = [row for row in csv.DictReader(file)]\n        readData[0]['Rating'] = '9.4'\n\n        readHeader = readData[0].keys()\n        writer(readHeader,readData,filename,\"update\")\n\n\nif __name__ = \"__main__\":\n    main()\n</code></pre>"},{"location":"Python/Scripts/create_excel_files.html#the-xlsx-file","title":"The xlsx File","text":"<p>This will be an enhancement of the previous part, that doesn't mean previous part is not a solution, just that this solution will include openpyxl  which is a all in one solution to work with worksheets, loading, updating m renaming and deleting them.</p>"},{"location":"Python/Scripts/create_excel_files.html#basic-terminology","title":"Basic terminology","text":"<ul> <li>WorkBook is the name for a an Excel file in <code>openpyxl</code>.</li> <li>A workbook consist of sheets( default is 1 sheet). sheets are referenced by their names.</li> <li>A Sheet consist of rows ( horizontal lines) starting from the number 1 and columns ( vertical lines) starting the letter A.</li> <li>Rows and columns result in a grid and form cells which may contain some data ( numerical or string value) or formulas.</li> </ul>"},{"location":"Python/Scripts/create_excel_files.html#first-steps-with-openpyxl","title":"First Steps with openpyxl","text":"<p>First we need to install <code>openpyxl</code> this can be done using <code>pip</code></p> <pre><code>pip install openpyxl\n</code></pre> <p>For the most basic usage, this been creating a new workbook with just one sheet</p>"},{"location":"Python/Scripts/create_excel_files.html#create-a-workbook","title":"Create a workbook","text":"<p>To create a workbook we can use the function <code>Workbook()</code></p> <p><pre><code>from openpyxl import Workbook\nwb = Workbook()\n</code></pre> now, we need to create the first sheet, the following statement is just for the first sheet</p> <pre><code>from openpyxl import Workbook\nwb = Workbook()\n\nws = wb.active\n</code></pre> <p>by default the name of the sheet will be \"sheet\" and a number, so the first sheet will be \"sheet\", the second \"Sheet1\", etc.</p> <p>Now, we have the workbook and the first sheet, what about the second sheet?, To create the second sheet and all the following sheets, we use <code>create_sheet(\"name of the sheet\")</code></p> <pre><code>from openpyxl import Workbook\nwb = Workbook()\n\nws = wb.active\nws1 = wb.create_sheet(\"second sheet\")\n</code></pre> <p></p> <p>We can use the <code>create_sheet(\"name of the sheet\")</code> and by defautl the sheet will be created after the previous sheet, but if we want to insert the sheet in a specific spot we can use <code>create_sheet(\"name of the sheet\",0)</code> in this case this sheet will be insert in the first spot.</p> <p>At any moment we can change the title of the sheet using <code>.title</code> as follow</p> <p><pre><code>from openpyxl import Workbook\nwb = Workbook()\n\nws = wb.active\nws1 = wb.create_sheet(\"second sheet\")\n\n#change the name of the first sheet\nws.title = \"first sheet\"\n</code></pre> </p>"},{"location":"Python/Scripts/create_excel_files.html#save-the-workbook","title":"Save the workbook","text":"<p>To save the workbook, first we need to give it a name <code>dest_filename = \"name of the file\"</code>, later, we use the function <code>save(filename=\"name of the workbook\")</code></p> <pre><code>from openpyxl import Workbook\n\n# Creating the workbook\nwb = Workbook()\n\n# the name of the file\ndest_filename = 'test_openpyxl.xlsx'\n\nws = wb.active\nws1 = wb.create_sheet(\"second sheet\")\n\n#change the name of the first sheet\nws.title = \"first sheet\"\n\nwb.save(filename = dest_filename)\n</code></pre> <p>For more details or tutorial we can visit openpyxl documentation</p> <p>we just saw how to create a workbook, now, for this example, we are going to focus in manipulate a workbook that already exist, for that reason we will create one called \"Customers1.xlsx\" and continue working on it</p>"},{"location":"Python/Scripts/create_excel_files.html#working-with-xlsx-files","title":"Working with xlsx files","text":"<p>Now, we are going to work with an existing file called \"customers1.xlsx\", this look like this:</p> <p></p> <p>The file contain 6 columns and 11 rows, We are going to import it and:</p> <ol> <li>Print the sheets name</li> <li>save the current sheet on the variable <code>current_Sheet</code></li> <li>print the value of the second column and 4 row (B4).</li> </ol> <p><pre><code>import openpyxl as opxl\n\ntheFile = opxl.load_workbook('Customers1.xlsx')\nprint(theFile.sheetnames)\n</code></pre> the result:</p> <p></p> <p>We got the file, and display the sheets names, now step 2 and 3, Save the current sheet in a variable and print the value of the cell B4.</p> <pre><code>import openpyxl as opxl\n\ntheFile = opxl.load_workbook('Customers1.xlsx')\nprint(theFile.sheetnames)\n\ncurrent_sheet = theFile['customers 1']\nprint(current_sheet['B4'].value)\n</code></pre> <p></p> <p>there is hardcoded values in this script which make it not that flexible, but we can make modifications in the future, for now we are going to do the following:</p> <ul> <li>Read the file</li> <li>Get all sheet names</li> <li>Loop through all sheets</li> <li>In the last step, the code will print values that are located in B4 fields of each found sheet inside the workbook.</li> </ul> <pre><code>import openpyxl as opxl\n\nthe_File = opxl.load_workbook('Customers1.xlsx')\nprint(the_File.sheetnames)\n\nall_sheets = the_File.sheetnames\n\nfor x in all_sheets:\n    current_sheet = the_File[x]\n    print(current_sheet['B4'].value)\n</code></pre> <p>Next, We will use the string <code>'ABCDEF'</code> to create a loop through the content of each sheet.</p> <pre><code>import openpyxl as opxl\n\nthe_File = opxl.load_workbook('Customers1.xlsx')\nprint(the_File.sheetnames)\n\ncolumns_marks = 'ABCDEF'\n\nall_sheets = the_File.sheetnames\n\nfor x in all_sheets:\n    current_sheet = the_File[x]\n    for row in range(1, current_sheet.max_row + 1):\n        for column in columns_marks:\n            cell_name = \"{}{}\".format(column, row) # creat the structure B4 or C4 etc\n            print(\"Cell Position: {} has the value {}\".format(cell_name,current_sheet[cell_name].value))\n</code></pre> <p></p>"},{"location":"Python/Scripts/create_excel_files.html#rudimentary-way-to-find-content-of-a-column","title":"Rudimentary way to find content of a column","text":"<p>The idea will be find the content of the column named \"telephone\" and display its content. For that we will start by creating a function that will hold the loops, this loops will look row by row and column by column until we found the column named \"telephone\"</p> <pre><code>def find_specific_cell():\n    for row in range(1, current_sheet.max_row + 1):\n        for column in columns_marks:\n            cell_name = \"{}{}\".format(column,row)\n            if current_sheet[cell_name].value == \"telephone\":\n                return cell_name\n</code></pre> <p>now with the function, we can create a loop that iterate over the different sheets looking for the specific column that we are looking for</p> <pre><code>for sheet in all_sheets:\n    current_sheet =  the_File[sheet]\n    print(find_specific_cell)\n</code></pre> <p>so the script including this new function will be:</p> <pre><code>import openpyxl as opxl\n\nthe_File = opxl.load_workbook('Customers1.xlsx')\nprint(the_File.sheetnames)\n\ncolumns_marks = 'ABCDEF'\n\nall_sheets = the_File.sheetnames\n\ndef find_specific_cell():\n    for row in range(1, current_sheet.max_row + 1):\n        for column in columns_marks:\n            cell_name = \"{}{}\".format(column, row) # create the structure B4 or C4 etc\n            if  current_sheet[cell_name].value == \"telephone\":\n                return cell_name\n\nfor sheet in all_sheets:\n    print(\"Current sheet is: {}\".format(sheet))\n    current_sheet = the_File[sheet]\n    print(find_specific_cell())\n</code></pre> <p></p> <p>so, with few modification and the creation of the second functions we have</p> <pre><code>import openpyxl as opxl\n\nthe_File = opxl.load_workbook('Customers1.xlsx')\nprint(the_File.sheetnames)\n\ncolumns_marks = 'ABCDEF'\n\n#adding all the sheets to this variable\nall_sheets = the_File.sheetnames\n\ndef find_specific_cell():\n    for row in range(1, current_sheet.max_row + 1):\n        for column in columns_marks:\n            cell_name = \"{}{}\".format(column, row)\n            if  current_sheet[cell_name].value == \"telephone\":\n                return (cell_name,column)\n\ndef print_all(cell_name):\n    _ , column_letter = cell_name\n    for row in range(1, current_sheet.max_row +1):\n        cell = column_letter + str(row)\n        print(current_sheet[cell].value)\n\nfor sheet in all_sheets:\n    print(\"Current sheet is: {}\".format(sheet))\n    current_sheet = the_File[sheet]\n    cell = find_specific_cell()\n    print(print_all(cell))\n</code></pre> <p></p>"},{"location":"Python/build_your_own_package/build_your_own.html","title":"Building a pypi package","text":"\ud83d\udca1 This article will use the wrapper, I made for the Coin Market Cap API. I\u2019m still working on this wrapper so the code might change with the time but the steps to create the package won't change.   <p>The structure of the project is more or less like this:</p> <pre><code>coinmarketcap/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 cmc_api/\n\u2502  \u2502  \u251c\u2500 __init__\n\u2502  \u2502  \u251c\u2500 cmc.py\n\u2502  \u2502  \u251c\u2500 cmc_datahandler.py\n\u2502  \u2502  \u251c\u2500 cmc_helper.py\n\u2502  \u2502  \u251c\u2500 cmc_utils.py\n\u2502  \u251c\u2500 test/\n\u2502  \u2502  \u251c\u2500 test_files.py\n\u2502  \u251c\u2500 __init__.py\n\u2502  \u251c\u2500 config.ini\n\u251c\u2500 .gitignore\n\u251c\u2500 README.md\n</code></pre> <p>From the <code>tree</code> above:</p> <ol> <li><code>src/</code> folder contains the main part of the API wrapper.</li> <li><code>cmc_api/</code> folder holds the code for the wrapper.</li> <li><code>test/</code>contains the unittest.</li> <li><code>config.ini</code> is used to store some information like API credits.</li> <li><code>[README.md](http://README.md)</code> provides a description of the project. NOTE: this will be useful to provide a description on pypi.org package page.</li> </ol>  \ud83d\udca1 it is important to have the __init__.py files, this serves many purposes but the essential one s to tell python which folders are modules. in most cases, this file will be empty."},{"location":"Python/build_your_own_package/build_your_own.html#the-steps","title":"The Steps","text":"<ol> <li>What files do I need to build the package?</li> <li>What information is stored in each package?</li> <li>What additional package do I need to build and upload the package?</li> <li>Building, deploying on test.pypi.org.</li> <li>Deploy on pypi.org.</li> <li>Some errors I run into when doing the process.</li> </ol>"},{"location":"Python/build_your_own_package/build_your_own.html#1-what-files-do-i-need-to-build-the-package","title":"1. What files do I need to build the package?","text":"<p>I already have a project with a specific structure, for know what is important is that I have a README.md file and the code of the project is within a folder called <code>/src</code>. This information will be important for the creation of one of the files <code>setup.cfg</code>.</p> <p>The files I need for the project will be:</p> <ol> <li><code>README.md</code></li> <li><code>setup.cfg</code></li> <li><code>pyproject.toml</code></li> <li><code>LICENSE</code></li> <li>(optional) <code>MANIFEST.in</code>.</li> </ol> <p>Now the project will look like</p> <pre><code>coinmarketcap/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 cmc_api/\n\u2502  \u2502  \u251c\u2500 __init__\n\u2502  \u2502  \u251c\u2500 cmc.py\n\u2502  \u2502  \u251c\u2500 cmc_datahandler.py\n\u2502  \u2502  \u251c\u2500 cmc_helper.py\n\u2502  \u2502  \u251c\u2500 cmc_utils.py\n\u2502  \u251c\u2500 test/\n\u2502  \u2502  \u251c\u2500 test_files.py\n\u2502  \u251c\u2500 __init__.py\n\u2502  \u251c\u2500 config.ini\n\u251c\u2500 .gitignore\n\u251c\u2500 LICENSE.json\n\u251c\u2500 README.md\n\u251c\u2500 pyproject.toml\n\u251c\u2500 setup.cfg\n</code></pre> <p>I will describe what to add to each file in the next section for now I will provide a simple description of what they do:</p>"},{"location":"Python/build_your_own_package/build_your_own.html#readmemd","title":"<code>README.md</code>","text":"<p>This is a markdown file, commonly used to provide some information on the GitHub repository page, pypi.org allow the use of this file to provide a long description of the project.</p>"},{"location":"Python/build_your_own_package/build_your_own.html#setupcfg","title":"<code>setup.cfg</code>","text":"\ud83d\udd25 There are many discussions and resources advocating for the usage of setup.py which is a way to create this `setup.cfg` file programmatically. I prefer to build the `setup.cfg` by myself.   <p>This file is going to provide all the details and information of the project to pypi.org, this information includes:</p> <ul> <li>Name of the package ( what are we going to use with <code>pip install</code>.</li> <li>Name of the author</li> <li>Description: Here I will tell Pypi.org the long descriptions in the README.md File.</li> <li>URL to the Github repository.</li> <li>Where to report bugs.</li> <li>Additional package required to use this project (example: <code>request</code> package needs it in this project since it is the module used to make the HTTP request)</li> <li>Documentation.</li> <li>etc</li> </ul> <p></p> <p><code>pyproject.toml</code></p> <p>It tells build tools (like pip and build) what is required to build your project.</p> <p><code>LICENSE</code></p> <p>This tells users who install your package the terms under which they can use the package.</p>"},{"location":"Python/build_your_own_package/build_your_own.html#2-what-information-is-stored-in-each-package","title":"2. What information is stored in each package?","text":""},{"location":"Python/build_your_own_package/build_your_own.html#readmemd_1","title":"<code>README.md</code>","text":"<p>This file will be the presentation of the project, on GitHub and pypi.org so it is a good idea to provide useful information, below is an example of the main sections for a <code>README.md</code></p> <pre><code># Product Name\n\n[tags or shields with relevant information]\n\nOne to a two-paragraph statement about your product and what it does.\n\n![](header.png) &lt;----- image or logo of the project\n\n##Index\n\n## About\nSome special remarks\n\n## Installation or usage\n\n## Development\n\n## Pre- Requisites\n\n## Release History\n\n## Community or contributing guidelines\n\n# License\n</code></pre> <p>Here is a good template:</p> <p>GitHub - dbader/readme-template: README.md template for your open-source project</p> <p>Here is part of what my project README.md look like on Github:</p> <p></p>"},{"location":"Python/build_your_own_package/build_your_own.html#setupcfg_1","title":"<code>setup.cfg</code>","text":"\u261d\ud83c\udffe `setup.cfg` is the configuration file for [setuptools]. It tells setuptools about your package (such as the name and version) as well as which code files to include.   <p>This file is a <code>configparser</code> format, so I should not place quotes around the values, it will have a section defined with <code>[]</code> like <code>[metadata]</code>, inside this section, there will be a key-value pair that will provide the information.</p> <pre><code>[metadata]\nname = example-package-YOUR-USERNAME-HERE\nversion = 0.0.1\nauthor = Example Author\nauthor_email = author@example.com\ndescription = A small example package\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/pypa/sampleproject\nproject_urls =\n    Bug Tracker = https://github.com/pypa/sampleproject/issues\nclassifiers =\n    Programming Language :: Python :: 3\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n\n[options]\npackage_dir =\n    = src\npackages = find:\npython_requires = &gt;=3.6\n\n[options.packages.find]\nwhere = src\n</code></pre> <p>The example above is the minimal configuration for a project, notice the following:</p> <ul> <li><code>[metadata]</code> has a parameter <code>long_description</code> which is using <code>[README.md](http://README.md)</code> file, more details about <code>file:</code> later.</li> <li><code>[options]</code> has a parameter <code>package_dir</code> that provides direction to the folder containing the code for the project, I need to add <code>where</code> in the section <code>[options.packages.find]</code> to point to the correct direction.</li> </ul> <p>The <code>setup.cfg</code> has a variety of parameters:</p> <p><code>[metadata]</code></p> <ul> <li><code>name</code> is the distribution name of your package.</li> <li><code>version</code> is the package version.</li> <li><code>author</code> and <code>author_email</code> are used to identify the author of the package.</li> <li><code>description</code> is a short, one-sentence summary of the package.</li> <li><code>long_description</code> is a detailed description of the package In this case, the long description is loaded from <code>README.md</code> (which is a common pattern) using the\u00a0<code>file:</code>\u00a0directive.</li> <li><code>long_description_content_type</code> tells the index what type of markup is used for the long description. In this case, it\u2019s Markdown.</li> <li><code>url</code> is the URL for the homepage of the project. Either a website or a link to GitHub, GitLab, or Bitbucket.</li> <li><code>project_urls</code> lets you list any number of extra links. Generally, this could be to documentation, issue trackers, etc.</li> <li><code>classifiers</code> give the index and pip some additional metadata about your package. see https://pypi.org/classifiers/.</li> </ul> <p><code>[options]</code></p> <ul> <li><code>package_dir</code> The directory in the project that contains all Python source files for the package. An empty package name represents the \u201croot package\u201d. in the example, <code>src</code> directory is designated the root package.</li> <li><code>packages</code> is a list of all Python import packages that should be included in the distribution package. we can use the\u00a0<code>find:</code>\u00a0directive to automatically discover all packages and subpackages and\u00a0<code>options.packages.find</code>\u00a0to specify the\u00a0<code>package_dir</code>\u00a0to use.</li> <li><code>python_requires</code> gives the versions of Python supported by your project.</li> </ul>  \u261d\ud83c\udffe The directives allowed are file:, attr:, find: and find_namespace: these can be used to instruct setuptools to find some information, for example the long description or the package will be in a file called README.md therefore <code>long_description = find: README.md</code> <p>Complex values can be added with comma-separated values or placed it one per line</p> <p></p> <p>All the parameter available for the <code>[metadata]</code> are:</p> <p>and for the <code>[options]</code></p> <p>More details here distributing-packages and here Configuring setuptools using setup.cfg files - documentation</p>"},{"location":"Python/build_your_own_package/build_your_own.html#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>The most basic configuration will be</p> <p></p> <p>Where:</p> <ul> <li><code>build-system.requires</code> gives a list of packages that are needed to build your package. package here is only used and available during the building process not afterward.</li> <li><code>build-system.build-backend</code> If you were to use a different build system, such as flit\u00a0or\u00a0poetry, those would go here, in this case, I am building with the\u00a0setuptools.</li> </ul>"},{"location":"Python/build_your_own_package/build_your_own.html#license","title":"<code>LICENSE</code>","text":"<p>The best way to generate the license is through the website https://choosealicense.com/</p> <p></p>"},{"location":"Python/build_your_own_package/build_your_own.html#3-what-additional-package-do-i-need-to-build-and-upload-the-package","title":"3. What additional package do I need to build and upload the package?","text":""},{"location":"Python/build_your_own_package/build_your_own.html#build","title":"Build","text":"<p>Once I Create all the files I need the tools for; Building the package and uploading the package.</p> <p>First, To build the package I can use <code>build</code></p> <p>build</p> <pre><code>pip install build\n</code></pre>"},{"location":"Python/build_your_own_package/build_your_own.html#twine","title":"Twine","text":"<p>Twine is a utility for publishing Python packages on PyPI.</p> <p>twine</p> <pre><code>pip install twine\n</code></pre>"},{"location":"Python/build_your_own_package/build_your_own.html#4-building-deploying-on-testpypiorg","title":"4. Building, deploying on test.pypi.org.","text":""},{"location":"Python/build_your_own_package/build_your_own.html#build_1","title":"Build","text":"<p>After installation of the package required (build and twine), I can start building the package.</p> <p>I can run the following command:</p> <pre><code>python -m build\n</code></pre> <p></p> <p>As a result:</p> <ol> <li>A folder called <code>dist</code> is created</li> <li>Inside the folder, the builder will save two files, one <code>.whl</code> and the other <code>tar.gz</code> these are the files I need to upload to test.pypi.org and later to pypi.org.</li> </ol>"},{"location":"Python/build_your_own_package/build_your_own.html#testpypiorg","title":"test.pypi.org","text":"<p>This is the test side for the packages, it works similarly to pypi.org however I need a different account to sign up, once the account is activated I can upload the package to this side and proceed to test.</p> <p></p>"},{"location":"Python/build_your_own_package/build_your_own.html#twine_1","title":"Twine","text":"<p>If Twine is already installed I just need the following command to start uploading the files to test.pypi.org</p> <pre><code>python -m twine upload --repository testpypi dist/*\n</code></pre> <p>Add the credentials (test.pypi.org and pypi.org provide other means of authentication, for example via access tokens )</p> <p></p> <p></p> <p>if I want I can install the test package and test it</p> <pre><code>pip install -i https://test.pypi.org/simple/ cmc-api-wrapper==0.1.19b0\n</code></pre>"},{"location":"Python/build_your_own_package/build_your_own.html#5-deploy-on-pypiorg","title":"5. Deploy on pypi.org.","text":"<p>If everything is working, it is a good idea to test the package first in test.pypi.org, I can proceed to upload it to pypi.org.</p> <p>I don't need to build the package again if everything is working, so the only change is where are the packages going to be uploaded, so I need to do some changes to the twine command.</p> <pre><code>python -m twine upload --repository pypi dist/*\n</code></pre> <p></p>"},{"location":"Python/build_your_own_package/build_your_own.html#6-some-errors-i-run-into-when-doing-the-process","title":"6. Some errors I run into when doing the process.","text":""},{"location":"Python/build_your_own_package/build_your_own.html#error-due-to-quotes-on-setupcfg","title":"Error due to quotes on setup.cfg","text":"<p>During the building of the package I got</p> <pre><code>WARNING: Built wheel for cmc-api-wrapper is invalid: Metadata 1.2 mandates PEP 440 version, but '-0.1.10-' is not\nFailed to build cmc-api-wrapper\nERROR: Could not build wheels for cmc-api-wrapper, which is required to install pyproject.toml-based projects\n</code></pre> <p>I checked the <code>setup.cfg</code></p> <pre><code>[metadata]\nname = cmc_api_wrapper\nversion = \"0.1.10\"\nauthor = Victor Fernandez\nauthor_email = victorxxxxxxxx@gmail.com\ndescription = A wrapper for the Con Market Cap API\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/CubeVic/coinmarketcapAPI\nproject_urls =\n    Bug Tracker = https://github.com/CubeVic/coinmarketcapAPI/issues\nkeywords=['python-client', 'CoinMarketCap','crypto']\nclassifiers =\n    Programming Language :: Python :: 3\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n</code></pre> <p>The version was <code>version=\"0.1.10\"</code> when I remove the <code>\"</code> everything work</p>"},{"location":"Python/build_your_own_package/build_your_own.html#error-when-assuming-build-package-was-already-installed","title":"Error when assuming build package was already installed","text":"<p>Trying to use <code>python -m build</code> I run into</p> <pre><code>No module named build.**main**; 'build' is a package and\ncannot be directly executed\n</code></pre> <p>solve it by installing it with <code>pip install</code></p> <pre><code>pip install build\n</code></pre> <p>Error requests not part of the build</p> <p>I had an issue, the request module was not installed or wasn't part of the build, so when I tried to the package, I will get an error that the request package was needed it. I solve it by defining <code>requests</code> as a module on the <code>setup.cfg</code> file.</p> <pre><code>[options]\npackages = find:\npython_requires = &gt;=3.10\ninstall_requires=\n    requests\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html","title":"How to install OpenCV on Raspberry pi","text":"<p>I will divide the process into seven steps.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-1-preparing-the-raspberry","title":"Step 1: Preparing the raspberry","text":""},{"location":"Raspberry/How_install_openCV_raspberry.html#expanding-filesystem-on-the-raspberry-pi","title":"Expanding filesystem on the Raspberry Pi","text":"<p>The raspberry won't be using all the space available. It will have a directory structure by default. The first step will be to expand that directory to get more space  in the micro-sd card:</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#access-the-raspberry-configuration-menu","title":"Access the raspberry configuration menu","text":"<p>To access the configuration, I need to type on the terminal the following command. <pre><code>sudo raspi-config\n</code></pre></p> <p>After entering the command, a configuration menu appears on the screen. This menu allows us to change some configurations. Using the arrow keys,  I navigate to <code>Advance Options</code>.</p> <p></p> <p>Next, I select the option \"Expand filesystem\".</p> <p></p> <p>Finally,  and reboot the unit. <p><pre><code>sudo reboot\n</code></pre> After the reboot, the available space will expand. To verify it, I use the command <code>df -h</code>.</p> <p></p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#deleting-software-unused-to-release-more-space","title":"Deleting software unused to release more space.","text":"<p>Depending on the OS installed, might not be enough space. I can get some extra space if I remove some of the software installed. To remove the software, I can use the terminal. I will remove libreOffice and Wolfram engine.</p> <pre><code>sudo apt-get purge wolfram-engine\nsudo apt-get purge libreoffice*\nsudo apt-get clean\nsudo apt-get autoremove\n</code></pre> <p>dpkg-query -l  will provide a list all the programs installed, I can remove the following: * wolfram-engine. * bluej. * greenfoot. * nodered. * nuscratch. * scratch. * sonic-pi. * libreoffice. * claws-mail. * claws-mail-i18n. * minecraft-pi. * python-pygame.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#increasing-memory-assigned-to-gpu","title":"Increasing memory assigned to GPU","text":"<p>The raspberry pi share the RAM with CPU and GPU, for the early models like  pi2 and pi3 the memory assigned to GPU is 64Mbytes ( for pi4 is 76MBytes). I'm going to use the raspberry with a project that include vision, so, I will increase the memory assigned to the GPU to 128Mbytes.</p> <ol> <li>Go to menu&gt;preference&gt;Raspberry pi configuration</li> <li>navigate to performance tab</li> <li>Change value assigned to the GPU</li> <li>reboot</li> </ol> <p></p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#verify-eeprom-is-up-to-date-just-for-raspberry-pi-4","title":"verify EEPROM is up-to-date (just for Raspberry pi 4).","text":"<p>This might not be needed it for new installation, but it is a good idea to double check.</p> <ol> <li>Check if the EEPROM is up-to-date with <code>sudo rpi-eeprom-update</code>.</li> <li>Update it if need it <code>rpi-eeprom-update -a</code></li> </ol> <pre><code>sudo rpi-eeprom-update\nsudo rpi-eeprom-update -a\nsudo reboot\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#verify-os-version","title":"Verify OS version.","text":"<p>Before to continue with the installation I need to make sure what os I'm using. Using the commands <code>uname -a</code> i can get information about the OS.</p> <ul> <li>aarch64 ---&gt; 64-bit OS.</li> <li>armv7l  ---&gt; 32-bit OS.</li> </ul> <p>The steps I follow are for 32-bit.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-2-installing-opencv-4-dependencies-on-raspberry-pi","title":"Step 2: Installing OpenCV 4 dependencies on Raspberry pi","text":"<p>I start by updating and upgrading the system.</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre> <p>This process might take some time</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-developer-tools-cmake","title":"Install developer tools (CMake)","text":"<p>After updating, I have to include the developer tools on CMake</p> <pre><code>sudo apt-get install build-essential cmake unzip pkg-config\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-libraries-to-handle-video-and-image","title":"Install libraries to handle video and image.","text":"<p>I'm going to install libraries to work with videos and images.</p> <pre><code>sudo apt-get install cmake gfortran\nsudo apt-get install libjpeg-dev libtiff-dev libgif-dev\nsudo apt-get install libavcodec-dev libavformat-dev libswscale-dev\nsudo apt-get install libgtk2.0-dev libcanberra-gtk*\nsudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev\nsudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev libv4l-dev\nsudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev\nsudo apt-get install libjasper-dev liblapack-dev libhdf5-dev\nsudo apt-get install protobuf-compiler\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#development-toolkits","title":"Development toolkits","text":"<p>Toolkits are relevant when you are using a system like linux, this tool kits are going to affect how the app will integrate with the desktop, We have two options GTK+ and Qt.</p> <p>These are toolkits developer use to create the structure and how the app looks and feel, we are talking about the buttons, toolbars and menus we use in the apps. These toolkits are a time-saver for developers, since we don't need to waste time designing and writing code for evey shape, size and look of every button. we can let the toolkit take care of it.</p> <p>They are different, however I won't dig deeper in that difference, I will use Qt just because that is what I feel more comfortable.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-gtk","title":"Install GTK","text":"<p>GTK is a UI tool kit used to render the different components for a UI.</p> <p>The next step will be to Install GTK and GUI backend.  I will install an additional package that reduces the GTK warnings.</p> <pre><code>sudo apt-get install libgtk-3-dev\nsudo apt-get install libcanberra-gtk*\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-qt","title":"install Qt","text":"<p>Qt  Qt is the fastest and smartest war to produce industrial-leading software that user love.</p> <pre><code>sudo apt-get install qt5-default\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-3-download-opencv-4-for-raspberry-pi","title":"Step 3: Download OpenCV 4 for Raspberry pi","text":"<p>There are two things to download, the <code>opencv</code> and the <code>opencv_contrib</code>. Bellow the code to download the libraries and unzip them. It is a good practice to rename the directories.</p> <pre><code>cd ~\nwget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.3.zip\nwget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.3.zip\n</code></pre> <p>I ran into some issue using <code>wget</code>, so i had two options, download the zip from github directly, see links bellow, or use <code>curl</code>. I used <code>curl</code>.</p> <ul> <li>opencv</li> <li>opencv_contrib</li> </ul> <p><pre><code>sudo curl -L --output opencv.zip https://github.com/opencv/opencv/archive/4.5.3.zip\nsudo curl -L --output opencv_contrib https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.3.zip\n</code></pre> Once the download finish, we will have two zip files, the next step is to unzip them and rename them, just to make it easier to work with the directories.</p> <pre><code>unzip opencv.zip\nunzip opencv_contrib.zip\nmv opencv-4.5.3 opencv\nmv opencv_contrib-4.5.3 opencv_contrib\n</code></pre> <p><code>opencv_contrib</code>  is a repository with additional or extra modules to increase the functionality.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-4-python-3-virtual-environment-for-opencv-4","title":"Step 4: Python 3 virtual environment for OpenCV 4","text":"<p>The first step is to check the current version of python 3 (do not use python2), after the version we will need to locate it, and finally we added to the <code>~/.bashrc</code> file.</p> <pre><code>python3 --version\nwhich python 3.7\n\n# merge VIRTUALENVWRAPPER_PYTHON=location/version\necho \"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.7\" &gt;&gt; ~/.bashrc\n# reload profile\nsource ~/.bashrc\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#get-pip","title":"Get PIP","text":"<p>We can use <code>PIP</code> to make the installation of python packages easier.</p> <pre><code>sudo apt-get install python3-pip\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-the-virtual-environment","title":"Install the virtual environment","text":"<p>First, we need to get the libraries with <code>pip</code>. The second step will be adding the package to the system path.</p> <p><pre><code>sudo pip3 install virtualenv\nsudo pip3 install virtualenvwrapper\n</code></pre> We need to do some admin work on the <code>~/.bashrc</code> file</p> <p><pre><code>echo \"export WORKON_HOME=$HOME/.virtualenvs\" &gt;&gt; ~/.bashrc\necho \"source /usr/local/bin/virtualenvwrapper.sh\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> Now, we can create the virtual environment with the name <code>cv453</code> <pre><code>mkvirtualenv cv453\n</code></pre> If there are no errors, we should get something like </p> <p>There is an extra step, that is the installation  of Numpy, this is important otherwise Cmake won't compile <pre><code>pip3 install numpy\n</code></pre></p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-5-cmake-and-compile-opencv-4","title":"Step 5: Cmake and compile OpenCV 4","text":""},{"location":"Raspberry/How_install_openCV_raspberry.html#increase-the-swap-on-the-raspberry","title":"Increase the SWAP on the raspberry","text":"<p>This increase will help with the compilation and avoid issues with memory.</p> <p>open <code>/etc/dphys-swapfile</code> : <pre><code>sudo nano /etc/dphys-swapfile\n</code></pre></p> <p>and add:</p> <pre><code># set the size to absolute value, leaving empty (default) then uses computed value\n#   you most likely don't want this, unless you have a special disk situation\n# CONF_SWAPSIZE=100\nCONF_SWAPSIZE=2048\n</code></pre> <p>restart the swap service: <pre><code>sudo /etc/init.d/dphys-swapfile stop\nsudo /etc/init.d/dphys-swapfile start\n</code></pre></p> <p>Be aware the increase in the size of SWAP might affect the MicroSD card. It is worthy to remember SD cards have a limited number of write and read. It is a good idea to make a copy of the image including OpenCV and python in case the SD card fails.</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#run-cmake-for-opencv","title":"Run CMake for OpenCV","text":"<p>I will use the Cmake command <code>make</code> to compile OpenCV.</p> <p>This is a time-consuming task <pre><code>cd ~/opencv\nmkdir build\ncd build\n</code></pre> Now we can make the compilation, here we will tell Cmake where, what and how to make the OpenCV, In the command bellow we have several flags, some of them are set as off, like the python example, this will allow us to save some memory space, here to we can enable or disable the usage of Qt.</p> <p><pre><code>cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n-D CMAKE_INSTALL_PREFIX=/usr/local \\\n-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n-D ENABLE_NEON=ON \\\n-D ENABLE_VFPV3=ON \\\n-D WITH_OPENMP=ON \\\n-D WITH_OPENCL=OFF \\\n-D BUILD_ZLIB=ON \\\n-D BUILD_TIFF=ON \\\n-D WITH_FFMPEG=ON \\\n-D WITH_TBB=ON \\\n-D BUILD_TBB=ON \\\n-D BUILD_TESTS=OFF \\\n-D WITH_EIGEN=OFF \\\n-D WITH_GSTREAMER=OFF \\\n-D WITH_V4L=ON \\\n-D WITH_LIBV4L=ON \\\n-D WITH_VTK=OFF \\\n-D WITH_QT=OFF \\\n-D OPENCV_ENABLE_NONFREE=ON \\\n-D INSTALL_C_EXAMPLES=OFF \\\n-D INSTALL_PYTHON_EXAMPLES=OFF \\\n-D BUILD_opencv_python3=TRUE \\\n-D OPENCV_GENERATE_PKGCONFIG=ON \\\n-D BUILD_EXAMPLES=OFF ..\n</code></pre> The <code>\\</code> indicate that all is one single line, the space before '-D' is a single space.</p> <p>IMPORTANT the  <code>..</code> at the end is not a type, it is a way to tell CMAke where is the CmakeList.txt file</p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#example-of-missing-the-at-the-end","title":"Example of missing the <code>..</code> at the end","text":"<p>if you miss the last two dots you will get an error message </p> <p>Once it is finished, it is a good idea to check the result or the output:</p> <p>I didn't add the whole answer, I focus in the report</p> <pre><code>General configuration for OpenCV 4.4.0 =====================================\n--   Version control:               unknown\n--\n--   Extra modules:\n--     Location (extra):            /home/pi/opencv_contrib/modules\n--     Version control (extra):     unknown\n--\n--   Platform:\n--     Timestamp:                   2021-09-29T09:05:47Z\n--     Host:                        Linux 5.10.60-v7+ armv7l\n--     CMake:                       3.16.3\n--     CMake generator:             Unix Makefiles\n--     CMake build tool:            /usr/bin/make\n--     Configuration:               RELEASE\n--\n--   CPU/HW features:\n--     Baseline:                    VFPV3 NEON\n--       requested:                 DETECT\n--       required:                  VFPV3 NEON\n--\n--   C/C++:\n--     Built as dynamic libs?:      YES\n--     C++ standard:                11\n--     C++ Compiler:                /usr/bin/c++  (ver 8.3.0)\n--     C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG\n--     C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG\n--     C Compiler:                  /usr/bin/cc\n--     C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG\n--     C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG\n--     Linker flags (Release):      -Wl,--gc-sections -Wl,--as-needed\n--     Linker flags (Debug):        -Wl,--gc-sections -Wl,--as-needed\n--     ccache:                      NO\n--     Precompiled headers:         NO\n--     Extra dependencies:          dl m pthread rt\n--     3rdparty dependencies:\n--\n--   OpenCV modules:\n--     To be built:                 aruco bgsegm bioinspired calib3d ccalib core datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor ml objdetect optflow phase_unwrapping photo plot python2 python3 quality rapid reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab xfeatures2d ximgproc xobjdetect xphoto\n--     Disabled:                    world\n--     Disabled by dependency:      -\n--     Unavailable:                 alphamat cnn_3dobj cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev cvv hdf java js julia matlab ovis sfm viz\n--     Applications:                perf_tests apps\n--     Documentation:               NO\n--     Non-free algorithms:         YES\n--\n--   GUI:\n--     GTK+:                        YES (ver 3.24.5)\n--       GThread :                  YES (ver 2.58.3)\n--       GtkGlExt:                  NO\n--     VTK support:                 NO\n--\n--   Media I/O:\n--     ZLib:                        /usr/lib/arm-linux-gnueabihf/libz.so (ver 1.2.11)\n--     JPEG:                        /usr/lib/arm-linux-gnueabihf/libjpeg.so (ver 62)\n--     WEBP:                        build (ver encoder: 0x020f)\n--     PNG:                         /usr/lib/arm-linux-gnueabihf/libpng.so (ver 1.6.36)\n--     TIFF:                        /usr/lib/arm-linux-gnueabihf/libtiff.so (ver 42 / 4.1.0)\n--     JPEG 2000:                   build Jasper (ver 1.900.1)\n--     OpenEXR:                     build (ver 2.3.0)\n--     HDR:                         YES\n--     SUNRASTER:                   YES\n--     PXM:                         YES\n--     PFM:                         YES\n--\n--   Video I/O:\n--     DC1394:                      NO\n--     FFMPEG:                      YES\n--       avcodec:                   YES (58.35.100)\n--       avformat:                  YES (58.20.100)\n--       avutil:                    YES (56.22.100)\n--       swscale:                   YES (5.3.100)\n--       avresample:                NO\n--     GStreamer:                   NO\n--     v4l/v4l2:                    YES (linux/videodev2.h)\n--\n--   Parallel framework:            pthreads\n--\n--   Trace:                         YES (with Intel ITT)\n--\n--   Other third-party libraries:\n--     Lapack:                      NO\n--     Eigen:                       NO\n--     Custom HAL:                  YES (carotene (ver 0.0.1))\n--     Protobuf:                    build (3.5.1)\n--\n--   OpenCL:                        YES (no extra features)\n--     Include path:                /home/pi/opencv/3rdparty/include/opencl/1.2\n--     Link libraries:              Dynamic load\n--\n--   Python 2:\n--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.16)\n--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython2.7.so (ver 2.7.16)\n--     numpy:                       /usr/lib/python2.7/dist-packages/numpy/core/include (ver 1.16.2)\n--     install path:                lib/python2.7/dist-packages/cv2/python-2.7\n--\n--   Python 3:\n--     Interpreter:                 /home/pi/cv/bin/python3 (ver 3.7.3)\n--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython3.7m.so (ver 3.7.3)\n--     numpy:                       /home/pi/cv/lib/python3.7/site-packages/numpy/core/include (ver 1.21.2)\n--     install path:                lib/python3.7/site-packages/cv2/python-3.7\n--\n--   Python (for build):            /usr/bin/python2.7\n--\n--   Java:\n--     ant:                         NO\n--     JNI:                         NO\n--     Java wrappers:               NO\n--     Java tests:                  NO\n--\n--   Install to:                    /usr/local\n-- -----------------------------------------------------------------\n--\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/pi/opencv/build\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#compile-opencv4","title":"Compile OpenCV4","text":"<p>Compile the OpenCV <pre><code>make -j4\n</code></pre></p> <p>The <code>-j4</code>  argument specifies that I have 4 cores for compilation. if there are problems with the compilation try <code>make</code> without <code>-j4</code>.</p> <p></p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#install-opencv-4","title":"Install OpenCV 4","text":"<pre><code>sudo make install\nsudo ldconfig\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#dont-forget-to-reset-the-swap-size","title":"DON'T FORGET  to reset the SWAP size","text":"<p>open the file with <code>/etc/dphys-swapfile</code> and reset <code>CONF_SWAPSIZE</code> to 100MB, reset the swap service</p> <pre><code>sudo /etc/init.d/dphys-swapfile stop\nsudo /etc/init.d/dphys-swapfile start\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#cleaning","title":"Cleaning","text":"<p>now we can clean the make and update the system <pre><code>make clean\nsudo apt-get update\n</code></pre> we can remove the zip files too <pre><code>cd ~\nrm opencv.zip\nrm opencv_contrib.zip\nsudo reboot\n</code></pre></p>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-6-link-opencv-to-python-virtual-environment","title":"Step 6: Link OpenCV to python virtual environment","text":"<p>This an important step if we use a virtual environment, otherwise the system won't be able to import openCV correctly</p> <pre><code>cd ~/.virtualenvs/cv453/lib/python3.7/site-packages\nln -s /usr/local/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37m-arm-linux-gnueabihf.so\ncd ~\n</code></pre>"},{"location":"Raspberry/How_install_openCV_raspberry.html#step-7-test-opencv","title":"Step 7: Test OpenCV","text":"<p>Using the terminal</p> <pre><code>workon cv\npython\n&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; cv2.__version__\n</code></pre>"},{"location":"Raspberry/Nagios.html","title":"Nagios Core","text":"<p>Nagios is an open source software light-weight  designed to monitor system, networks and infrastructure, its light weight allow us to install it in a raspberry.</p> <p>There are several version but in this tutorial we go for the Nagios Core</p>"},{"location":"Raspberry/Nagios.html#1-prepare-raspberry","title":"1. Prepare Raspberry","text":"<ol> <li>Update the system.</li> </ol> <p><pre><code>sudo apt updates\nsudo apt full-upgrade\n</code></pre> 2. Install the packages need it for Nagios</p> <pre><code>sudo apt install -y autoconf build-essential wget unzip apache2 apache2-utils php libgd-dev snmp libnet-snmp-perl gettext libssl-dev wget bc gawk dc libmcrypt-dev\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-download-and-compiling-nagios","title":"2. Download and compiling Nagios","text":""},{"location":"Raspberry/Nagios.html#1-move-to-a-temporal-directory-tmp-were-wi-later-will-download-the-nagios-source-code","title":"1. Move to a temporal directory <code>/tmp</code> were wi later will download the Nagios source code.","text":"<pre><code>cd /tmp\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-download-the-nagios-source-code","title":"2. Download the Nagios source code","text":"<pre><code>wget -O nagios.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-4.4.6.tar.gz\n</code></pre> <p>I had an issue with SSL those i download it normally and i move it to the directory manually</p>"},{"location":"Raspberry/Nagios.html#3-extract-the-files","title":"3. Extract the files","text":"<pre><code>tar xzf nagios.tar.gz\n</code></pre>"},{"location":"Raspberry/Nagios.html#4-move-to-the-directory-and-prepare-for-compilation","title":"4. Move to the directory and prepare for compilation","text":"<pre><code>cd /tmp/nagioscore-nagios-4.4.6/\n./configure --with-httpd-conf=/etc/apache2/sites-enabled\n</code></pre>"},{"location":"Raspberry/Nagios.html#5-compile-nagios","title":"5. Compile Nagios","text":"<pre><code>make all\n</code></pre>"},{"location":"Raspberry/Nagios.html#3-settings-up-nagios-on-the-raspberry","title":"3. Settings up Nagios on the Raspberry","text":""},{"location":"Raspberry/Nagios.html#1-create-users-and-groups-with-the-make-command","title":"1. Create users and groups with the <code>make</code> command","text":"<pre><code>sudo make install-groups-users\nsudo usermod -a -G nagios www-data\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-installed-the-binaries-to-the-system-using-the-command-bellow","title":"2. Installed the binaries to the system using the command bellow","text":"<pre><code>sudo make install\n</code></pre>"},{"location":"Raspberry/Nagios.html#3-with-the-make-command-we-install-the-nagios-service-and-make-it-start-at-boot","title":"3. With the <code>make</code> command we install the Nagios service and make it start at boot","text":"<p>this command install the Nagios core deamon</p> <pre><code>sudo make install-daemoninit\n</code></pre>"},{"location":"Raspberry/Nagios.html#4-we-set-up-the-external-command-directory","title":"4. we set up the external command directory","text":"<pre><code>sudo make install-commandmode\n</code></pre>"},{"location":"Raspberry/Nagios.html#5-copy-a-sample-configuration-file-using-make","title":"5. Copy a sample configuration file using <code>make</code>","text":"<p>this file is important without it the software wont run</p> <pre><code>sudo make install-config\n</code></pre>"},{"location":"Raspberry/Nagios.html#6-now-configure-the-apache-server-or-to-install-the-configuration-for-the-apache","title":"6. now configure the apache server or to install the configuration for the apache","text":"<pre><code>sudo make install-webconf\nsudo a2enmod rewrite\nsudo a2enmod cgi\n</code></pre>"},{"location":"Raspberry/Nagios.html#7-now-we-create-an-apache-user-that-we-will-use-to-access-the-nagios-interface","title":"7. Now we create an apache user that we will use to access the Nagios interface","text":"<p>The following command will create a user called nagiosadmin. You will be asked to specify a password for this user. <pre><code>sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin\n</code></pre> The user must be called nagiosadmin to satisfy the default configuration of Nagios.</p>"},{"location":"Raspberry/Nagios.html#4-starting-nagios-on-raspberry","title":"4. Starting Nagios on Raspberry","text":""},{"location":"Raspberry/Nagios.html#1-restart-the-apache-server","title":"1. Restart the Apache server","text":"<pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-enable-nagios-service-and-start-it-up-by-running-the-following-two-commands","title":"2. Enable NAgios service and start it up by running the following two commands","text":"<p><pre><code>sudo systemctl enable nagios\nsudo systemctl start nagios\n</code></pre> By enabling the service, we will be allowing Nagios to start up at boot on your Raspberry Pi.</p>"},{"location":"Raspberry/Nagios.html#3-verify-that-nagios-has-started-on-your-raspberry-pi-by-running-the-following-command","title":"3. Verify that Nagios has started on your Raspberry Pi by running the following command.","text":"<pre><code>sudo systemctl status nagios\n</code></pre> <p>If everything is working as intended, you should see the following text be outputted to the terminal.</p> <pre><code>Active: active (running)\n</code></pre> <p>This text tells us that the service is active and is currently running.</p>"},{"location":"Raspberry/Nagios.html#5-installing-the-nagios-plug-ins","title":"5. Installing the Nagios Plug-ins","text":"<p>In this section, we will be showing you how to install these Nagios plugins on your Raspberry Pi.</p>"},{"location":"Raspberry/Nagios.html#1-first-change-into-our-tmp-directory","title":"1. First change into our /tmp directory.","text":"<pre><code>cd /tmp\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-now-that-we-are-in-the-tmp-directory-we-can-download-the-nagios-plugins-by-running-the-command-below","title":"2. Now that we are in the /tmp directory, we can download the Nagios plugins by running the command below.","text":"<pre><code>wget -O nagios-plugins.tar.gz https://github.com/nagios-plugins/nagios-plugins/releases/download/release-2.3.3/nagios-plugins-2.3.3.tar.gz\n</code></pre>"},{"location":"Raspberry/Nagios.html#3-now-extract-the-plugin-source-code-to-our-current-directory-by-using-the-following-command","title":"3. Now extract the plugin source code to our current directory by using the following command.","text":"<pre><code>tar zxf nagios-plugins.tar.gz\n</code></pre>"},{"location":"Raspberry/Nagios.html#4-our-next-step-is-to-change-into-our-newly-created-directory-and-configure-the-plugins-for-compilation","title":"4. Our next step is to change into our newly created directory and configure the plugins for compilation.","text":"<pre><code>cd /tmp/nagios-plugins-2.3.3\n./configure\n</code></pre>"},{"location":"Raspberry/Nagios.html#4-once-the-configuration-process-has-completed-we-can-compile-the-nagios-plugins-by-running-the-following-command","title":"4. Once the configuration process has completed, we can compile the Nagios plugins by running the following command.","text":"<p><pre><code>make\n</code></pre> Depending on your Raspberry Pi, this process can take some time. However, it should be a lot faster than compiling the base Nagios code.</p>"},{"location":"Raspberry/Nagios.html#5-finish-up-this-process-by-installing-the-nagios-plugins-by-running-the-following-command","title":"5. Finish up this process by installing the Nagios plugins by running the following command.","text":"<pre><code>sudo make install\n</code></pre>"},{"location":"Raspberry/Nagios.html#6-to-make-sure-nagios-loads-in-the-new-plugins-restart-the-software-by-running-the-command-below","title":"6. To make sure Nagios loads in the new plugins, restart the software by running the command below.","text":"<pre><code>sudo systemctl restart nagios\n</code></pre>"},{"location":"Raspberry/Nagios.html#6-connecting-the-nagios-web-interface","title":"6. Connecting the Nagios Web interface","text":"<p>We can access the UI by</p> <p><pre><code>http://[IPADDRESS]/nagios\n</code></pre> You can retrieve your Raspberry Pi\u2019s local IP address by running the following command. <pre><code>hostname -I\n</code></pre></p>"},{"location":"Raspberry/Nagios.html#7-adding-devices-to-nagios","title":"7. Adding Devices to Nagios","text":"<p>To add host we will need to create a configuration file that later Nagios will read.</p>"},{"location":"Raspberry/Nagios.html#1-navigate-to-object-configuration-folder-for-nagios","title":"1. Navigate to <code>object</code> configuration folder for Nagios","text":"<p>this is a default folder that contain sample configuration files  we can check the file to get an idea</p> <pre><code>cd /usr/local/nagios/etc/objects\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-now-lets-create-a-configuration-file","title":"2. Now lets create a configuration file","text":"<p>We can use a name <code>pimylifeuphost.cfg</code></p> <pre><code>sudo nano pimylifeuphost.cfg\n</code></pre>"},{"location":"Raspberry/Nagios.html#3-within-the-file-we-can-enter-the-following","title":"3. within the file we can enter the following","text":"<pre><code>define host {\n    use                     linux-server            ; Host group to use\n    host_name               Pi My Life Up Host      ; Name of this host\n    alias                   pimylifeuphost          ; Alias\n    address                 [YOURHOSTIPADDRESS]     ; IP Address\n}\n</code></pre> <p>to save <code>ctrl</code> + <code>x</code> follow by <code>y</code> and enter</p>"},{"location":"Raspberry/Nagios.html#4-we-need-to-modify-the-nagios-file-to-be-able-to-read-the-new-host","title":"4. We need to modify the Nagios file to be able to read the new host","text":"<pre><code>sudo nano /usr/local/nagios/etc/nagios.cfg\n</code></pre>"},{"location":"Raspberry/Nagios.html#5-within-the-file-we-need-to-do-changes","title":"5. within the file we need to do changes","text":"<p>Find <pre><code>cfg_file=/usr/local/nagios/etc/objects/templates.cf\n</code></pre></p> <p>add Bellow <pre><code>cfg_file=/usr/local/nagios/etc/objects/pimylifeuphost.cfg\n</code></pre></p> <p>Restart Nagios <pre><code>sudo systemctl restart nagios\n</code></pre> For now we are making a ping check and nothing else, for more specialties test we need to configure the services</p>"},{"location":"Raspberry/Nagios.html#8-adding-service-to-nagios","title":"8. Adding Service to Nagios","text":"<p>This example we will add check_http and Check_ssh</p>"},{"location":"Raspberry/Nagios.html#1-we-need-to-modify-the-host-configuration-created-earlier","title":"1. We need to modify the host configuration created earlier","text":"<pre><code>define service {\n    use                     local-service\n    host_name               Pi My Life Up Host\n    service_description     SSH\n    check_command           check_ssh\n}\n\ndefine service {\n    use                     local-service\n    host_name               Pi My Life Up Host\n    service_description     HTTP\n    check_command           check_http\n}\n</code></pre>"},{"location":"Raspberry/Nagios.html#2-we-need-to-check-if-the-configuration-made-is-correct","title":"2. We need to check if the configuration made is correct","text":"<pre><code>sudo /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n</code></pre> <p>If everything is okay we will see <code>Things look okay</code></p> <p></p> <p>Now we restart Nagios <pre><code>sudo systemctl restart nagios\n</code></pre></p>"},{"location":"Raspberry/Password_related_raspberry.html","title":"Raspberry Password Related","text":""},{"location":"Raspberry/Password_related_raspberry.html#reset-lost-admin-password-for-raspberry-pi","title":"Reset lost admin password for Raspberry Pi","text":"<p>I run into several problems when i was trying to connect with the raspberry using VNC viewer, this time was because i forgot the password that I set up so i found a way to reset the password.</p>"},{"location":"Raspberry/Password_related_raspberry.html#with-access-to-the-desktop-raspberry","title":"With access to the desktop raspberry","text":"<p>If we have access to the desktop or to the terminal of the raspberry we will need just to use the command <pre><code>passwd pi\n</code></pre></p> <p>It will ask for the new password and later the confirmation.</p>"},{"location":"Raspberry/Password_related_raspberry.html#without-access-to-the-desktop","title":"Without access to the desktop","text":"<p>We we don't have access at all we will need to modify some files in the SD card</p> <ol> <li>Power down the unit, remove the SD card, and put it in a computer.</li> <li>Open the file cmdline.txt and add<code>init=/bin/sh/</code>.</li> <li>Put the SD card in the unit again and boot it up.</li> <li>when the unit boot up type <code>su</code> that will log you as root but you wont need the password.</li> <li>type <code>passwd pi</code></li> <li>Power down the unit, remove the SD card, use the computer again and remove the line <code>init=/bin/sh/</code>. in the cmdline.txt.</li> </ol> <p>If the process is not working it might be because the boot process is in read-only, in that case is is necessary to write in the terminal <pre><code>mount -o remount,rw/\n</code></pre> You will need access to the terminal in order to type that command.</p>"},{"location":"Raspberry/cloning_raspbian_opencv.html","title":"Make a Clone of Customized Raspbian OS","text":"<p>I will use a Linux machine, GParted, and a Bash script to clone, shrink and compress the instance of Raspbian containing OpenCV. GParted is a partition-editing application, used for creating, deleting, resizing, moving, checking, and copying disk partitions and their file systems. The final result will be a compressed file like this:</p> <p></p>"},{"location":"Raspberry/cloning_raspbian_opencv.html#the-steps","title":"The steps","text":"<ol> <li>Pre-Requisites.</li> <li>Prepare the environment.</li> <li>Making a Clone of the custom Raspbian OS.</li> <li>(optional) compress the image further.</li> </ol>"},{"location":"Raspberry/cloning_raspbian_opencv.html#1-pre-requisites","title":"1. Pre-Requisites","text":"<ol> <li>A Linux machine, not the Raspberry.</li> <li>A working instance of the Raspbian OS.</li> </ol>"},{"location":"Raspberry/cloning_raspbian_opencv.html#2-prepare-the-environment","title":"2. Prepare the environment","text":"<p>1.Install <code>gparted</code> <pre><code>sudo apt-get install gparted\n</code></pre></p> <p>2.Using a USB adapter connect the SDcard to the Linux machine. </p>"},{"location":"Raspberry/cloning_raspbian_opencv.html#3-making-a-clone-of-the-custom-raspbian-os","title":"3. Making a Clone of the custom Raspbian OS","text":""},{"location":"Raspberry/cloning_raspbian_opencv.html#1find-the-usb-with-the-raspbian-os","title":"1.Find the USB with the Raspbian OS.","text":"<pre><code>sudo fdisk -l\n</code></pre>"},{"location":"Raspberry/cloning_raspbian_opencv.html#2-clone-the-raspbian-os","title":"2. Clone the Raspbian OS.","text":"<pre><code>sudo dd if=/dev/sdb of=/your/path/to/clone.img\n</code></pre> <p>where:</p> <ul> <li><code>if</code> Stand for the Input file, this is the path to the USB with the Raspbian OS.</li> <li><code>of</code> Stand for the Output file, where we will save the clone OS.</li> </ul>      \ud83d\udd25 This process might take between 20 and 40 minutes."},{"location":"Raspberry/cloning_raspbian_opencv.html#3-shrinking-the-image","title":"3. Shrinking the image","text":"<p>The clone can be shrunk further ( in some cases the clone can be 16GB), so it is a good idea to shrink it. For the process, one can use the script pishrink by Drewsif:</p> <p>GitHub - Drewsif/PiShrink: Make your pi images smaller!</p> <pre><code>wget &lt;https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh&gt;\nchmod +x pishrink.sh\nsudo mv pishrink.sh /usr/local/bin\n</code></pre> <p>to execute the script <pre><code>sudo pishrink.sh /your/path/to/clone.img /your/path/to/shrink_image.img\n</code></pre></p>"},{"location":"Raspberry/cloning_raspbian_opencv.html#4-optional-compress-the-image-further","title":"4. (optional) Compress the image further","text":"<pre><code>gzip -9 /your/path/to/shrink_image.img\n</code></pre>"},{"location":"Raspberry/introduction.html","title":"Raspberry Pi","text":"<p>Raspberry  pi  is a single board computer create for the UK-Based foundation Raspberry pi</p> <p> What is raspberry pi</p> <p>Raspberry pi in all its forms is a mini-computer running a modified version of Linux Debian call Raspbian OS, although Raspberry pi foundation has created a special distribution for these devices, it is possible to install different distributions and some customize images of Raspbian OS (Linux distro special for Raspberry pi). I most mentioned that now Raspberry foundation is offering a microcontroller call raspberry pico, this microcontroller is closer to an Arduino than to a single board computer.</p>"},{"location":"Raspberry/introduction.html#raspberry-models","title":"Raspberry models","text":""},{"location":"Raspberry/introduction.html#model-bb","title":"Model B/B+","text":"<p>raspberrypi.com   These are the most popular form factor, they required a SD card to work, and it provided different ports, from Ethernet to USB 3 (in some models).</p> <ul> <li>Raspberry pi 4 Model B</li> <li>Raspberry pi 3 Model B+</li> <li>Raspberry pi 3 Model B</li> <li>Raspberry pi 1 Model B+</li> </ul>"},{"location":"Raspberry/introduction.html#model-aa","title":"Model A/A+","text":"<p>raspberrypi.com   This is a smaller form factor, with fewer ports similar performance in a smaller package.</p> <ul> <li>Raspberry pi 3 Model A+</li> <li>Raspberry pi 1 Model A+</li> </ul>"},{"location":"Raspberry/introduction.html#zero","title":"Zero","text":"<p>raspberrypi.com   Another version of the Raspberry Pi, Although some models of the raspberry pi zero have limitations in outputs or onboard wifi, it is versatile hardware capable to run the same version of Raspbian resent on Raspberry pi model B+.  * Raspberry Pi Zero W  * Raspberry Pi Zero</p>"},{"location":"Raspberry/introduction.html#compute-modules","title":"Compute modules","text":"<p>raspberrypi.com</p> <p>This is to compute module, these are versions of the raspberry pi without the IO or output connectors, they required other devices to be able to connect. These modules are used in several applications such as NAS, Routers, Emulators, or Clusters, the run the same software that the other Pis.</p> <ul> <li>Raspberry Pi compute module 4</li> <li>Raspberry Pi compute module 3+</li> </ul>"},{"location":"Raspberry/introduction.html#pico","title":"Pico","text":"<p>raspberrypi.com   These are not single-board computers. They are a microcontroller designed and made by the Raspberry foundation.</p> <ul> <li>Raspberry Pico</li> </ul>"},{"location":"Raspberry/samba.html","title":"Samba Server","text":"<p>Samba is a re-implementation of the SMB network protocol, and allows Linux computer to integrate into Microsoft' active directory environments without any issue.</p> <p>By using samba in the raspberry we can share directories in a way they can be accessed on almost every operating system.</p> <p>This is probably the Easiest way to set up a NAS, although it exists other alternatives Samba is the one that i have use the most.</p>"},{"location":"Raspberry/samba.html#setting-the-samba-server","title":"Setting the samba server","text":""},{"location":"Raspberry/samba.html#initial-steps","title":"Initial steps","text":"<ul> <li>Before set up the SMB share we need to be sure that the Raspberry is up-to-date.</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre> <ul> <li>Now we need to install the samba software</li> </ul> <pre><code>sudo apt-get install samba samba-common-bin\n</code></pre> <ul> <li>Now we can set up the folder to share, this folder can be in any location, in the internal storage or in a mounted external hard drive.</li> </ul> <pre><code>mkdir /home/pi/shared\n</code></pre> <ul> <li>To share the folder with the samba software we need to modify the smb.conf file</li> </ul> <pre><code>sudo nano /etc/samba/smb.conf\n</code></pre> <pre><code>[pimyshare]\npath = /home/pi/shared\nwriteable=Yes\ncreate mask=0777\ndirectory mask=0777\npublic=no\n</code></pre> <ol> <li><code>[pimyshare]</code> the text in brackets define the point were we will access the folder itself, example <code>//raspberrypi/pimyshare</code>.</li> <li><code>path</code> this is the path to the directory that we are going to share</li> <li><code>writeable</code> set as <code>yes</code> allow the user to write in the folder.</li> <li><code>create mask</code> and <code>directory mask</code>  define the permission for both folder and files, if is set as  \\(0777\\) users are allow to read, write and execute.</li> <li><code>public</code> if is set to <code>no</code> ti will require a valid user to grand access to the folder</li> </ol> <p>save the document in this case <code>ctrl</code> + <code>X</code> and <code>Y</code></p>"},{"location":"Raspberry/samba.html#set-a-user-for-the-samba-share","title":"Set a user for the samba share","text":"<p>In this case we will create a password that follow the default password of raspberry, so the user will be <code>pi</code> and the password will be <code>raspberry</code></p> <pre><code>sudo smbpasswd -a pi\n</code></pre> <p>we need to restart the server now</p> <pre><code>sudo systemctl restart smbd\n</code></pre> <p>we can get the host name with  <code>hostname -I</code></p>"},{"location":"Raspberry/samba.html#connecting-to-the-samba-server","title":"Connecting to the Samba server","text":"<p>In this case the configuration will be different in windows  and Windows</p>"},{"location":"Raspberry/samba.html#windows","title":"Windows","text":"<ul> <li>File Explorer &gt; Computer &gt; Map network drive</li> </ul> <ul> <li>now we need to input the name of the host or the IP address follow by the name of the folder ( name in brackets in the configuration file)</li> </ul> <p>we will need to log in first with the user and password defined before</p>"},{"location":"Raspberry/samba.html#macos","title":"MacOS","text":"<p>We will need to connect to a server and the address will be something like <code>smb://raspberryhost/pimyshared</code></p>"},{"location":"Raspberry/setting_openmediavault.html","title":"Setting Open Media Vault","text":"<p>This is the Guide to install and sett up the Open Media vault on the Raspberry pi ( in this case raspberry pi 3B)</p> <p>From the Open media vault website</p> <p>What is openmediavault? openmediavault is the next generation network attached storage (NAS) solution based on Debian Linux. It contains services like SSH, (S)FTP, SMB/CIFS, DAAP media server, RSync, BitTorrent client and many more. Thanks to the modular design of the framework it can be enhanced via plugins.</p>"},{"location":"Raspberry/setting_openmediavault.html#download-image","title":"Download Image","text":"<p>In this case we need to download the images for the Raspberry</p> <p></p> <p>We can use balenaEtcher  to flash the image, after this we can put it in the RAspberry pi and boot it up, the next steps i did it connecting a keyboard to the Raspberry and a screen, this might be possible connecting to the raspberry by SSH but i didn't try.</p>"},{"location":"Raspberry/setting_openmediavault.html#configuration","title":"Configuration","text":"<ol> <li>Let the raspberry boot up.</li> <li>Connect using the default user and password, this will be <code>root</code> and <code>openmediavault</code>.</li> <li>Set a new password.</li> <li>Run <code>reboot</code></li> <li>Once rebooted run <code>sudo /etc/network/interfaces</code></li> <li>In this document add this line at the end <code>dns-nameservers 8.8.4.4 8.8.8.8</code></li> <li>Run <code>reboot</code></li> <li>Run <code>sudo apt-get update</code></li> <li>Run <code>sudo apt-get upgrade</code></li> <li>After it finish, run <code>reboot</code></li> <li>Run <code>omv-firstaid</code></li> <li>Previous command will display a menu.</li> <li>Select from the menu clean apt.</li> <li>Select Clear local upload package repository.</li> <li>Select Clear web control panel cache.</li> <li>Run <code>reboot</code></li> <li>Run <code>omv-firstaid</code></li> <li>Select Configure network interface, select or just go OK...OK until finish.</li> <li>Run <code>omv-firstaid</code></li> <li>Select Configure web control panel the default will be 80.</li> <li>Run <code>sudo apt-get update</code></li> <li>Run <code>sudo apt-get upgrade</code></li> </ol> <p>Now we can access to the web configuration using the IP address mention in the raspberry screen, the user and password will be <code>admin</code> and <code>openmediavault</code></p> <p>source: configure OMV on raspberry</p>"},{"location":"SQL/Advance_Funtion_SQL.html","title":"Advance Function SQL","text":""},{"location":"SQL/Advance_Funtion_SQL.html#case-function","title":"<code>CASE</code> function","text":"<p>The CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result.</p> <p>If no conditions are true, it will return the value in the ELSE clause.</p> <p>If there is no ELSE part and no conditions are true, it returns NULL.</p>"},{"location":"SQL/Advance_Funtion_SQL.html#syntax-case","title":"Syntax CASE","text":"<pre><code>CASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    WHEN conditionN THEN resultN\n    ELSE result\nEND;\n</code></pre> <p>Example</p> <pre><code>SELECT CASE\n        WHEN A + B &gt; C AND A + C &gt; B AND B + C &gt; A THEN CASE\n            WHEN A = B AND B = C THEN 'Equilateral'\n            WHEN A = B OR B = C OR A = C THEN 'Isosceles'\n            ELSE 'Scalene' END\n        ELSE 'Not A Triangle' END\nFROM TRIANGLES;\n</code></pre>"},{"location":"SQL/Advance_Funtion_SQL.html#if-function","title":"<code>IF()</code> function","text":"<p>The <code>IF()</code> function returns a value if a condition is TRUE, or another value if a condition is FALSE.</p>"},{"location":"SQL/Advance_Funtion_SQL.html#syntax-if","title":"Syntax IF()","text":"<pre><code>IF(condition, value_if_true, value_if_false)\n</code></pre> <p>Example <pre><code>SELECT IF(500&lt;1000, 5, 10);\n</code></pre></p> <pre><code>SELECT OrderID, Quantity, IF(Quantity&gt;10, \"MORE\", \"LESS\")\nFROM OrderDetails;\n</code></pre>"},{"location":"SQL/Advance_Funtion_SQL.html#set-var_name-user-defined-variables","title":"<code>SET @var_name</code> User-defined Variables","text":"<p>You can store a value in a user-defined variable in one statement and refer to it later in another statement. This enables you to pass values from one statement to another.</p> <p>User variables are written as @var_name, where the variable name var_name consists of alphanumeric characters, ., _ , and $.</p> <p>User variable names are not case-sensitive. Names have a maximum length of 64 characters.</p> <p>One way to set a user-defined variable is by issuing a <code>SET</code> statement:</p> <pre><code>SET @var_name = expr [, @var_name = expr] ...\n</code></pre> <p>For <code>SET</code>, either <code>=</code> or <code>:=</code> can be used as the assignment operator.</p> <p>When making an assignment in this way, you must use <code>:=</code> as the assignment operator; <code>=</code> is treated as the comparison operator in statements other than <code>SET</code>.</p> <p>Here ans example of the usage of this \"user-defined variables\", this is the solution to the challenge Occupations of Hacker Ranks</p> <pre><code>SET @dRow = 0, @pRow = 0, @sRow = 0, @aRow = 0;\n\nSELECT MIN(Doctor), MIN(Professor), MIN(Singer), MIN(Actor)\nFROM (\n    SELECT  CASE Occupation\n                WHEN 'Doctor'       THEN @dRow := @dRow + 1\n                WHEN 'Professor'    THEN @pRow := @pRow + 1\n                WHEN 'Singer'       THEN @sRow := @sRow + 1\n                WHEN 'Actor'        THEN @aRow := @aRow + 1\n            END AS row,\n            IF (Occupation = 'Doctor', Name, NULL) AS Doctor,\n            IF (Occupation = 'Professor', Name, NULL) AS Professor,\n            IF (Occupation = 'Singer', Name, NULL) AS Singer,\n            IF (Occupation = 'Actor', Name, NULL) AS Actor\n    FROM    OCCUPATIONS\n    ORDER BY Name\n) a\nGROUP BY row;\n</code></pre>"},{"location":"SQL/Some_SQL.html","title":"Random notes about SQL ( mostly MySQL)","text":""},{"location":"SQL/Some_SQL.html#how-to-get-different-unique-results","title":"How to get different (unique) results","text":"<pre><code>SELECT DISTINCT column-name\n  FROM table-name\n</code></pre>"},{"location":"SQL/Some_SQL.html#how-to-count-different-unique-results","title":"How to count different (unique) results","text":"<pre><code>SELECT COUNT (DISTINCT column-name)\n  FROM table-name\n</code></pre>"},{"location":"SQL/Some_SQL.html#how-to-display-different-unique-in-alphabetical-order","title":"How to display different (unique) in alphabetical order","text":"<pre><code>SELECT DISTINCT Country\n  FROM Supplier\nORDER BY COUNTRY\n</code></pre>"},{"location":"SQL/Some_SQL.html#how-to-find-the-difference-between-unique-values-and-all-values","title":"How to find the difference between unique values and all values","text":"<pre><code>SELECT (COUNT(CITY) - COUNT(DISTINCT CITY)) FROM STATION;\n</code></pre> <p>some reference</p>"},{"location":"SQL/String_Functions_SQL.html","title":"String Functions SQL","text":""},{"location":"SQL/String_Functions_SQL.html#how-to-find-the-length-of-a-string","title":"How to find the length of a string","text":"<p>In this case, let say that we want to print the size or length of a string.</p> <pre><code>SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY)\n</code></pre>"},{"location":"SQL/String_Functions_SQL.html#left-and-right-functions-useful-to-make-substrigns","title":"<code>LEFT()</code> and <code>RIGHT()</code> functions useful to make substrigns","text":"<p>The <code>LEFT()</code> function extracts a number of characters from a string (starting from left.</p>"},{"location":"SQL/String_Functions_SQL.html#syntax-left","title":"Syntax LEFT()","text":"<pre><code>LEFT(string, number_of_chars)\n</code></pre> <p>Example: Extract 5 characters from the text in the \"CustomerName\" column (starting from left):</p> <pre><code>SELECT LEFT(CustomerName, 5) AS ExtractString\nFROM Customers;\n</code></pre> <p>now, The <code>RIGHT()</code> function extracts a number of characters from a string (starting from right).</p>"},{"location":"SQL/String_Functions_SQL.html#syntax-right","title":"Syntax RIGHT()","text":"<p><pre><code>RIGHT(string, number_of_chars)\n</code></pre> Example Extract 5 characters from the text in the \"CustomerName\" column (starting from right):</p> <pre><code>SELECT RIGHT(CustomerName, 5) AS ExtractString\nFROM Customers;\n</code></pre>"},{"location":"SQL/String_Functions_SQL.html#concat-function","title":"<code>CONCAT()</code> function","text":"<p>The CONCAT() function adds two or more expressions together.</p>"},{"location":"SQL/String_Functions_SQL.html#syntax-concat","title":"Syntax CONCAT()","text":"<pre><code>CONCAT(expression1, expression2, expression3,...)\n</code></pre> <p>Example: <pre><code>SELECT CONCAT(Address, \" \", PostalCode, \" \", City) AS Address\nFROM Customers;\n</code></pre></p>"},{"location":"SQL/String_Functions_SQL.html#concat_ws-function","title":"<code>CONCAT_WS()</code> function","text":"<p>The <code>CONCAT_WS()</code> function adds two or more expressions together with a separator.</p>"},{"location":"SQL/String_Functions_SQL.html#syntax-concat_ws","title":"Syntax CONCAT_WS()","text":"<pre><code>CONCAT_WS(separator, expression1, expression2, expression3,...)\n</code></pre> <p>Example <pre><code>SELECT CONCAT_WS(\" \", Address, PostalCode, City) AS Address\nFROM Customers;\n</code></pre></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html","title":"Jenkins","text":""},{"location":"ci_cd/jenkins/jenkins_robotframework.html#initial-setup","title":"Initial setup","text":""},{"location":"ci_cd/jenkins/jenkins_robotframework.html#download-jenkins","title":"Download Jenkins","text":"<p>Jenkins can be downloaded on:</p> <p>Jenkins</p> <p>Jenkins is available for different OS, such as Windows, Mac, and Linux.</p> <p>There are some hardware pre-requisites:</p> <ul> <li>256MB of RAM.</li> <li>1GB of free space ( although according to the documentation 10GB is recommended if one uses the docker container)</li> <li>Java</li> <li>Web browser (supported Browsers Chrome, Mozilla Firefox, Microsoft Edge, and Apple Safari)</li> </ul>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#install-jenkins","title":"Install Jenkins","text":"<p>On Windows, a <code>.msi</code> file will be downloaded which can facilitate the installation.</p> <p></p> <p>I can run the wizard to install it.</p> <p></p> <p>I need to select the logon type (in my case, the option <code>Run service as LocalSystem</code> is enough, but in a production environment might be better be safe and select the next option)</p> <p></p> <p>The last step is to set the port where I will run Jenkins, by default will be <code>8080</code>.</p> <p></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#make-sure-java-is-already-installed-in-the-system","title":"\u26a0\ufe0f Make sure Java is already installed in the system","text":"<p>If everything is correct, I should be able to use the browser to navigate to the localhost with the port selected, for example, <code>http://127.0.0.1:8080</code> and we will find the Jerking welcome page.</p> <p></p> <p>If this is the first time using this instance of Jenkins, it will ask for a password stored in a specific location.</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#customize-jenkins","title":"Customize Jenkins","text":"<p>Jenkins will provide a shortcut to get the plugin if this is the first time I am using this instance</p> <p>Install suggested plugins</p> <p></p> <p>For now, I will choose to <code>Install suggested plugins</code></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#creating-the-administrator-user","title":"Creating the administrator user","text":"<p>If this is the first time using the instance Jenkins will ask for the creation of an administrator account.</p> <p></p> <p>After creating the user, Jenkins will ask couple more questions for the setup, and then it is done.</p> <p></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#installation-with-war-file","title":"Installation with <code>.war</code> file","text":"<p>If instead of downloading the installer, I decided to download the <code>.war</code> file I need to follow:</p> <ol> <li>Navigate to the location of the <code>.war</code> file</li> <li>Execute the command <code>java -jar jenkins.war</code></li> </ol>  \u261d\ud83c\udffe It is easier if I navigate to the location of the file using Windows explorer, once in the file location, on the top bar I use this will open in that location (check the gif below).   <p></p> <ol> <li>In this location, I use the command</li> </ol> <pre><code>java -jar jenkins.war\n</code></pre> <p>This will open Jenkins in the default port <code>8080</code> however if I want to open it in a different location I can use</p> <pre><code>java -jar jenkins.war --httpPort=(the port I want)java -jar jenkins.war --httpPort=9191\n</code></pre> <p></p> <p>launching Jenkins from the console.</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#adding-the-robot-framework-plugin","title":"Adding the Robot Framework plugin","text":"<p>Jenkins allows adding a plugin that helps with the automation, in this case, I want to use Jenkins to run the Robot framework test, so I need to install the robot framework plugin</p> <ol> <li>Navigate to Manage Jenkins.</li> </ol> <p></p> <ol> <li>Locate manage plugins.</li> </ol> <p></p> <ol> <li>Switch to the Available tab and search for <code>robot framework</code>.</li> </ol> <p></p> <ol> <li>Check the box and later install without restart.</li> </ol> <p></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#how-to-create-a-job-in-jenkins","title":"How to Create a job in Jenkins","text":"<p>To create a job I can start by:</p> <ol> <li>Navigating to a new item.</li> </ol> <p></p> <ol> <li>Select the Freestyle project</li> </ol> <p></p> <ol> <li>Once on the configuration page, I need to tell Jenkins to execute the test case, I can do that using the built section and selecting <code>Executing Windows batch command</code> if I am running Jenkins in windows and <code>Execute Shell</code> if I am in Linux or MAC.</li> </ol> <p></p> <ol> <li>In this space, I need to navigate to the folder where the <code>.robot</code> files representing the test case are and run the <code>robot command</code>.</li> </ol> <p></p> <p></p> <ol> <li> <p>I need to tell Jenkins where to publish the Framework test results, for that I need to configure the Post-build Actions.</p> </li> <li> <p>In the section post-built Actions, select <code>Publish Robot Framework test results</code></p> </li> </ol> <p></p> <p>I can either provide the full path to the directory of Robot Output</p> <p></p> <p>Path to the result folder</p> <p></p> <p>or I can define a custom workspace and shorten the path.</p> <p></p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#run-the-robot-framework-job","title":"Run the Robot Framework Job","text":"<p>Once the job is created and everything is configured I can run the job by clicking on <code>build now</code></p> <p></p>  ***Before continue***"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#troubleshooting","title":"Troubleshooting","text":"<p>The Builds are shown as <code>failed</code> but if I inspect the result they say the test passed,</p> <p></p> <p></p> <p>This is because I made a mistake during the configuration, I have the following</p> <p>Step 4 is the build</p> <pre><code>C:\ncd C:\\Users\\Victo\\PycharmProjects\\robotframework_twitch\\Tests\\twitch\\FunctionalTestSuite\nrobot -d Result VideoSearch_Android.robot\n</code></pre> <p>but <code>robot -d Result VideoSearch_Android.robot</code> is not a valid command, and I can prove this by checking the test console output</p> <p></p> <p>Console output</p> <p>Here I can see what the console printed</p> <p></p> <p>So the test is passing, but due to my mistake of adding a not recognized internal command, Jenkins reported it as failed.</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#the-solution","title":"The solution","text":"<p>Remove the command <code>robot -d Result VideoSearch_Android.robot</code> from step 4.</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#show-html-reports-on-jenkins","title":"Show HTML reports on Jenkins","text":"<p>Robot Framework will generate some reports but if I try to see it on Jenkins I will get some errors like this :</p> <p></p> <p>So I need to make some small changes</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#the-problem","title":"The problem","text":"<p>There is some issue with the Content Security Policy and by default Jenkins will block the HTML results generated by the Robot framework</p> <p>Configuring Content Security Policy</p>"},{"location":"ci_cd/jenkins/jenkins_robotframework.html#the-solution_1","title":"The solution","text":"<p>Unset the header, for this, I can use the command</p> <pre><code>System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"\")\n</code></pre> <p>I need to go to the correct place to paste this command</p> <ol> <li>Navigate to the dashboard.</li> <li>Go to manage Jenkins.</li> <li>Look for the option Script console.</li> </ol> <p></p> <p>Script console</p> <ol> <li>Paste the command here</li> </ol> <p></p> <p>Script Console</p>  \u261d\ud83c\udffe  You will need to run the test again."},{"location":"ci_cd/jenkins/jenkins_robotframework.html#robot-results","title":"\ud83e\udd16Robot Results","text":"<p>Now to see the general result and some useful graphics I can go to <code>robot results</code></p> <p></p>"}]}